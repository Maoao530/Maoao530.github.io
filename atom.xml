<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风中老狼的博客</title>
  <subtitle>不积跬步，无以至千里；不积小流，无以成江海</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://maoao530.github.io/"/>
  <updated>2016-10-24T13:21:32.738Z</updated>
  <id>https://maoao530.github.io/</id>
  
  <author>
    <name>风中老狼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>flask-source-reading</title>
    <link href="https://maoao530.github.io/2016/10/24/flask-source-reading/"/>
    <id>https://maoao530.github.io/2016/10/24/flask-source-reading/</id>
    <published>2016-10-24T12:26:04.000Z</published>
    <updated>2016-10-24T13:21:32.738Z</updated>
    
    <content type="html"><![CDATA[<p>Flask是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。</p>
<a id="more"></a>
<p>我们先从flask 0.1版本阅读起。</p>
<h1 id="安装Flask-0-1"><a href="#安装Flask-0-1" class="headerlink" title="安装Flask 0.1"></a>安装Flask 0.1</h1><p>因为flask 0.1暂时不支持python3，所以我们使用python2.7版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">py -2 -m pip install flask==0.1</div></pre></td></tr></table></figure></p>
<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>这是一个很简单的示例，编写hello.py，参考官方网站的示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line">app = Flask(__name__)</div><div class="line"><span class="meta">@app.route("/")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span>    </div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure></p>
<p>运行hello.py后，打开浏览器访问 <code>localhost:5000</code>可以看到浏览器输出<code>Hello World!</code>。</p>
<h1 id="知识准备"><a href="#知识准备" class="headerlink" title="知识准备"></a>知识准备</h1><p>在对flask有了一个比较简单的认识之后，我们知道，flask是基于Jinja2和Werkzeug的一个框架，其WSGI工具箱采用Werkzeug，模板引擎则使用 Jinja2。</p>
<h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h2><p>WSGI是Web Server Gateway Interface的缩写，是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口。引用一张图说明WSGI的位置：</p>
<p><img src="/img/archives/flask-wsgi.jpg" alt="wsgi"></p>
<p>WSGI接口定义非常简单，它只要求Web开发者实现一个函数，就可以响应HTTP请求。我们来看一个hello world：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># args:</span></div><div class="line"><span class="comment">#  - environ：一个包含所有HTTP请求信息的dict对象；</span></div><div class="line"><span class="comment">#  - start_response：一个发送HTTP响应的函数。</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)])</div><div class="line">    <span class="keyword">return</span> [<span class="string">b'&lt;h1&gt;Hello, web!&lt;/h1&gt;'</span>]</div></pre></td></tr></table></figure></p>
<ul>
<li>上面的application()函数就是符合WSGI标准的一个HTTP处理函数，函数必须由WSGI服务器来调用。</li>
<li>start_response返回了http响应的header，Header只能发送一次，也就是这个函数只能调用一次。</li>
</ul>
<p>有很多符合WSGI规范的服务器，我们可以挑选一个来用。比如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> eventlet <span class="keyword">import</span> wsgi</div><div class="line"><span class="keyword">import</span> eventlet</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>)])</div><div class="line">    <span class="keyword">return</span> [<span class="string">'Hello, World!\r\n'</span>]</div><div class="line"></div><div class="line">wsgi.server(eventlet.listen((<span class="string">''</span>, <span class="number">8090</span>)), hello_world)</div></pre></td></tr></table></figure>
<h2 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h2><h2 id="Werkzeug"><a href="#Werkzeug" class="headerlink" title="Werkzeug"></a>Werkzeug</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flask是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。&lt;/p&gt;
    
    </summary>
    
      <category term="python 进阶" scheme="https://maoao530.github.io/categories/python-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="flask" scheme="https://maoao530.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>一步一步搭建hexo博客</title>
    <link href="https://maoao530.github.io/2016/10/23/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/"/>
    <id>https://maoao530.github.io/2016/10/23/一步一步搭建hexo博客/</id>
    <published>2016-10-23T07:16:27.000Z</published>
    <updated>2016-10-23T09:07:42.753Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><a id="more"></a></p>
<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><p>因为我是在windows下，所以需要先安装Git和Node.js：</p>
<ul>
<li><a href="https://github.com/git-for-windows/git/releases/download/v2.10.1.windows.1/Git-2.10.1-64-bit.exe" target="_blank" rel="external">Git for windows</a></li>
<li><a href="https://nodejs.org/dist/v4.6.1/node-v4.6.1-x64.msi" target="_blank" rel="external">Node.js</a><br>安装过程就不多说了。</li>
</ul>
<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>打开git，cd到你需要安装hexo的目录，然后安装hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p><img src="/img/archives/npm-install-hexo-cli.png" alt="安装hexo"></p>
<h1 id="初始化Hexo项目"><a href="#初始化Hexo项目" class="headerlink" title="初始化Hexo项目"></a>初始化Hexo项目</h1><p>创建并且初始化hexo项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init &lt;folder&gt;</div><div class="line">cd &lt;folder&gt;</div><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>hexo默认的目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">├── .deploy_git</div><div class="line">├── public</div><div class="line">├── scaffolds</div><div class="line">├── scripts</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">├── themes</div><div class="line">├── _config.yml</div><div class="line">└── package.json</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>目录</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>.deploy_git</td>
<td style="text-align:left">执行hexo deploy命令部署到GitHub上的内容目录</td>
</tr>
<tr>
<td>public</td>
<td style="text-align:left">执行hexo generate命令，输出的静态网页内容目录</td>
</tr>
<tr>
<td>scaffolds</td>
<td style="text-align:left">layout模板文件目录，其中的md文件可以添加编辑</td>
</tr>
<tr>
<td>scripts</td>
<td style="text-align:left">扩展脚本目录，这里可以自定义一些javascript脚本</td>
</tr>
<tr>
<td>source</td>
<td style="text-align:left">文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon，ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。</td>
</tr>
<tr>
<td>_drafts</td>
<td style="text-align:left">草稿文章</td>
</tr>
<tr>
<td>_posts</td>
<td style="text-align:left">发布文章</td>
</tr>
<tr>
<td>themes</td>
<td style="text-align:left">主题文件目录</td>
</tr>
<tr>
<td>_config.yml</td>
<td style="text-align:left">全局配置文件，大多数的设置都在这里</td>
</tr>
<tr>
<td>package.json</td>
<td style="text-align:left">应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</td>
</tr>
</tbody>
</table>
<h1 id="hexo-命令"><a href="#hexo-命令" class="headerlink" title="hexo 命令"></a>hexo 命令</h1><p>常用几个命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;postName&quot; #新建文章</div><div class="line">hexo new page &quot;pageName&quot; #新建页面</div><div class="line">hexo generate #生成静态页面至public目录</div><div class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class="line">hexo deploy #将.deploy目录部署到GitHub</div></pre></td></tr></table></figure></p>
<h1 id="更换next主题"><a href="#更换next主题" class="headerlink" title="更换next主题"></a>更换next主题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd your-hexo-site</div><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<p>修改站点配置文件_config.yml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure></p>
<p>更多关于next主题可以参考：</p>
<ul>
<li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">使用文档</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next/wiki" target="_blank" rel="external">next常见问答</a></li>
</ul>
<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>hexo支持插件，可以直接通过命令行安装即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install plugin-name --save</div><div class="line">//更新插件</div><div class="line">npm update</div><div class="line">//卸载插件</div><div class="line">npm uninstall plugin-name</div></pre></td></tr></table></figure></p>
<p>下面推荐几个常用的插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//feed插件</div><div class="line">npm install hexo-generator-feed --save</div><div class="line">//站点地图</div><div class="line">npm install hexo-generator-sitemap --save</div><div class="line">//百度站点地图</div><div class="line">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure></p>
<p>然后在 Hexo 根目录下的 _config.yml 里配置一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">feed:</div><div class="line">    type: atom      </div><div class="line">    path: atom.xml</div><div class="line">    limit: 20  # 最近20篇文章  </div><div class="line">sitemap:</div><div class="line">    path: sitemap.xml</div><div class="line">baidusitemap:</div><div class="line">    path: baidusitemap.xml</div></pre></td></tr></table></figure></p>
<h1 id="博客推广优化"><a href="#博客推广优化" class="headerlink" title="博客推广优化"></a>博客推广优化</h1><p>为了博客有更好的展示率, 最好的方式是通过搜索引擎, 下面讲讲怎么让搜索引擎搜录你的博客.</p>
<p>面以百度为例:</p>
<ul>
<li><a href="">百度网址提交入口</a></li>
</ul>
<p>百度站长平台为站长提供单条url提交通道，您可以提交想被百度收录的url，百度搜索引擎会按照标准处理，不保证一定能够收录您提交的url。<br>建议验证网站所有权后，再提交url。</p>
<p>向百度提交 Sitemap 的过程如下：</p>
<blockquote>
<ul>
<li>注册并登录百度站长平台.</li>
<li>点击 我的网站=&gt;站点管理, 添加你的域名, 类似上文中验证你的域名, 采用 文件验证 上传 html 文件的方式.</li>
<li>验证好以后就可以在 数据提交 里面提交 Sitemap 了.</li>
</ul>
</blockquote>
<p>更详细的可以参考下面这篇文章：</p>
<ul>
<li><a href="www.franktly.com/2016/07/06/让Baidu和Google收录Hexo博客/">franktly.com/2016/07/06/让Baidu和Google收录Hexo博客/</a></li>
</ul>
<h1 id="配置上传到github"><a href="#配置上传到github" class="headerlink" title="配置上传到github"></a>配置上传到github</h1><p>安装deploy git：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>配置_config.yml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:Maoao530/Maoao530.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>配置完成后直接<code>hexo deploy</code>,就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;br&gt;
    
    </summary>
    
      <category term="hexo博客" scheme="https://maoao530.github.io/categories/hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://maoao530.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>python中的@classmethod和@staticmethod</title>
    <link href="https://maoao530.github.io/2016/05/17/python-classmethod-staticmethod/"/>
    <id>https://maoao530.github.io/2016/05/17/python-classmethod-staticmethod/</id>
    <published>2016-05-17T15:58:59.000Z</published>
    <updated>2016-10-22T13:54:23.921Z</updated>
    
    <content type="html"><![CDATA[<p>花两分钟了解什么是实例方法，类方法，静态方法。</p>
<a id="more"></a>
<h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h1><p>python中类方法和静态方法是用装饰器<code>@classmethod</code>和<code>@staticmethod</code>来定义的。</p>
<p><a href="https://maoao530.github.io/2016/05/17/python-decorator/">点我学习什么是装饰器</a></p>
<p>我们先来看一个简单的实例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self,x)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"executing foo(%s,%s)"</span>%(self,x))</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_foo</span><span class="params">(cls,x)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"executing class_foo(%s,%s)"</span>%(cls,x))</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_foo</span><span class="params">(x)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"executing static_foo(%s)"</span>%x)</div></pre></td></tr></table></figure>
<p>我们定义了一个<code>class A</code>，类A里面分别定义了普通方法foo，<code>@classmethod</code>修饰的类方法class_foo，还有<code>@staticmethod</code>修饰的静态方法static_foo，那么他们之间有什么区别呢？<br>我们不妨来验证一下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a=A()</div><div class="line">print(a.foo)</div><div class="line">print(a.class_foo)</div><div class="line">print(a.static_foo)</div><div class="line"></div><div class="line"><span class="comment"># 输出结果</span></div><div class="line"><span class="comment"># &lt;bound method A.foo of &lt;__main__.A object at 0x0121B950&gt;&gt;</span></div><div class="line"><span class="comment"># &lt;bound method A.class_foo of &lt;class '__main__.A'&gt;&gt;</span></div><div class="line"><span class="comment"># &lt;function A.static_foo at 0x01222078&gt;</span></div></pre></td></tr></table></figure>
<p>我们从输出结果可以看到：</p>
<ul>
<li>foo是绑定在实例a上的，参数self便是实例a本身</li>
<li>class_foo是绑定在class A上的，参数cls指向class A本身</li>
<li>static_foo不绑定在a或者A上，所以没有额外的参数</li>
</ul>
<h1 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h1><p>那么使用上有什么区别呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">a = A()</div><div class="line">a.foo(<span class="number">1</span>)</div><div class="line">a.class_foo(<span class="number">1</span>)</div><div class="line">a.static_foo(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># A.foo(2) #error</span></div><div class="line">A.class_foo(<span class="number">2</span>)</div><div class="line">A.static_foo(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment"># 输出结果</span></div><div class="line"><span class="comment"># executing foo(&lt;__main__.A object at 0x0121B950&gt;,1)</span></div><div class="line"><span class="comment"># executing class_foo(&lt;class '__main__.A'&gt;,1)</span></div><div class="line"><span class="comment"># executing static_foo(1)</span></div><div class="line"><span class="comment"># executing class_foo(&lt;class '__main__.A'&gt;,2)</span></div><div class="line"><span class="comment"># executing static_foo(2)</span></div></pre></td></tr></table></figure></p>
<p>从上面的代码我们可以看到，使用上的区别：</p>
<ul>
<li>foo是绑定在实例a上的，只能通过实例去调用</li>
<li>class_foo绑定在类A上，可以通过实例a或者类A去调用</li>
<li>static_foo不绑定任何参数，也可以通过实例a或者类A去调用</li>
</ul>
<h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>类和实例都是对象，所以它们可以有方法：</p>
<ul>
<li>实例的方法就叫实例方法。</li>
<li>类的方法就叫类方法。</li>
<li>静态方法就是写在类里的普通方法,必须用类来调用，比如说有一些跟类有关系的功能，但是运行的时候又不需要实例和类参与的函数，这个时候就可以用@staticmethod，因为如果写一堆全局函数，可能后续会变得难以维护。</li>
</ul>
<p>References：</p>
<ul>
<li><a href="https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/14/README.html" target="_blank" rel="external">装饰器@staticmethod和@classmethod有什么区别?</a></li>
<li><a href="http://www.wklken.me/posts/2013/12/22/difference-between-staticmethod-and-classmethod-in-python.html" target="_blank" rel="external">[翻译]PYTHON中STATICMETHOD和CLASSMETHOD的差异</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;花两分钟了解什么是实例方法，类方法，静态方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Python 基础拾遗" scheme="https://maoao530.github.io/categories/Python-%E5%9F%BA%E7%A1%80%E6%8B%BE%E9%81%97/"/>
    
    
      <category term="python" scheme="https://maoao530.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 装饰器decorator</title>
    <link href="https://maoao530.github.io/2016/05/17/python-decorator/"/>
    <id>https://maoao530.github.io/2016/05/17/python-decorator/</id>
    <published>2016-05-17T15:08:59.000Z</published>
    <updated>2016-10-22T14:01:30.766Z</updated>
    
    <content type="html"><![CDATA[<p>2分钟告诉你什么是python装饰器。</p>
<a id="more"></a>
<h1 id="1-什么是装饰器"><a href="#1-什么是装饰器" class="headerlink" title="1. 什么是装饰器"></a>1. 什么是装饰器</h1><p>Python的装饰器的英文名叫<code>Decorator</code>，这个和设计模式中的<code>Decorator Pattern</code>是两种东西。<br>Python中的装饰器主要用于对已经有的模块做一些“修饰工作”。比如说，我们经常需要在函数调用前后自动打印日志，又不想要改变原有函数的模块，这个时候，我们便可以写一个打印log的装饰器。</p>
<h1 id="2-Hello-World"><a href="#2-Hello-World" class="headerlink" title="2. Hello World"></a>2. Hello World</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义log装饰器</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        print(<span class="string">'start %s()'</span> % func.__name__)</div><div class="line">        <span class="keyword">return</span> func(*args, **kw)</div><div class="line">        print(<span class="string">'end %s()'</span> % func.__name__)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'foo function ...'</span>)</div><div class="line"></div><div class="line">foo()</div></pre></td></tr></table></figure>
<p>当运行代码，你会发现有如下输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">C:\Users\maoao\Desktop\Project&gt;python Test.py</div><div class="line">start foo()</div><div class="line">foo function ...</div><div class="line">end foo()</div></pre></td></tr></table></figure></p>
<p>有木有发现很神奇？</p>
<h1 id="3-Decorator-的本质"><a href="#3-Decorator-的本质" class="headerlink" title="3. Decorator 的本质"></a>3. Decorator 的本质</h1><p>对于Python的这个@注解语法糖来说，当你在用某个@decorator来修饰某个函数func时，如下所示:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'foo function ...'</span>)</div></pre></td></tr></table></figure></p>
<p>相当于执行了语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">foo = log(foo)</div></pre></td></tr></table></figure></p>
<p>其实就是把一个函数当参数传到另一个函数中，然后再把decorator这个函数的返回值赋值回了原来的func。</p>
<p>不信我们可以做如下验证：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuck</span><span class="params">(fn)</span>:</span></div><div class="line">    <span class="keyword">print</span> (<span class="string">"fuck %s ! "</span> % fn.__name__.upper())</div><div class="line"> </div><div class="line"><span class="meta">@fuck</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gfw</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>还没有执行gfw就输出我们每个人的心声了有木有。</p>
<p>知道这点本质，当你看到有<strong>多个decorator</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@decorator_one</span></div><div class="line"><span class="meta">@decorator_two</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>相当于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">func = decorator_one(decorator_two(func))</div></pre></td></tr></table></figure></p>
<p><strong>带参数的decorator</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@decorator(arg1, arg2)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>相当于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">func = decorator(arg1,arg2)(func)</div></pre></td></tr></table></figure></p>
<p>这意味着decorator(arg1, arg2)这个函数需要返回一个“真正的decorator”。</p>
<h1 id="4-带参数的装饰器示例"><a href="#4-带参数的装饰器示例" class="headerlink" title="4. 带参数的装饰器示例"></a>4. 带参数的装饰器示例</h1><p>假设我们可以编写一个带参数的装饰器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            print(<span class="string">'%s, start %s()'</span> % (text, func.__name__))</div><div class="line">            func(*args, **kw)</div><div class="line">            print(<span class="string">'%s, end %s()'</span> % (text, func.__name__))</div><div class="line">        wrapper.__name__ = func.__name__</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"><span class="meta">@log('SHUN_TAG')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'foo function ...'</span>)</div><div class="line"></div><div class="line">foo()</div><div class="line"><span class="keyword">print</span> foo.__name__</div><div class="line"></div><div class="line"><span class="comment"># 输出：</span></div><div class="line"></div><div class="line"><span class="comment"># C:\Users\maoao\Desktop\Project&gt;python Test.py</span></div><div class="line"><span class="comment"># SHUN_TAG, start foo()</span></div><div class="line"><span class="comment"># foo function ...</span></div><div class="line"><span class="comment"># SHUN_TAG, end foo()</span></div><div class="line"><span class="comment"># foo</span></div></pre></td></tr></table></figure></p>
<p>@@log(‘SHUN_TAG’)实际上会执行如下语句：<br><code>foo = log(&#39;SHUN_TAG&#39;)(foo)</code><br>然后<strong>最终会返回wrapper函数给foo</strong>，另外要记得<code>wrapper.__name__ = func.__name__</code>，防止有些函数签名的代码回报错。</p>
<p>也可以用@functools.wraps(func)来代替上述写法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(func)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            print(<span class="string">'%s, start %s()'</span> % (text, func.__name__))</div><div class="line">            func(*args, **kw)</div><div class="line">            print(<span class="string">'%s, end %s()'</span> % (text, func.__name__))</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div></pre></td></tr></table></figure></p>
<p>其实也没有什么复杂的东西。</p>
<h1 id="5-class式的-Decorator"><a href="#5-class式的-Decorator" class="headerlink" title="5. class式的 Decorator"></a>5. class式的 Decorator</h1><p>最后再来看下decorator的class方式，还是看个示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">myDecorator</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fn)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"inside myDecorator.__init__()"</span></div><div class="line">        self.fn = fn</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></div><div class="line">        self.fn()</div><div class="line">        <span class="keyword">print</span> <span class="string">"inside myDecorator.__call__()"</span></div><div class="line"> </div><div class="line"><span class="meta">@myDecorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">aFunction</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"inside aFunction()"</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">"Finished decorating aFunction()"</span></div><div class="line"> </div><div class="line">aFunction()</div><div class="line"> </div><div class="line"><span class="comment"># 输出：</span></div><div class="line"><span class="comment"># inside myDecorator.__init__()</span></div><div class="line"><span class="comment"># Finished decorating aFunction()</span></div><div class="line"><span class="comment"># inside aFunction()</span></div><div class="line"><span class="comment"># inside myDecorator.__call__()</span></div></pre></td></tr></table></figure></p>
<p>用类的方式声明一个decorator。我们可以看到这个类中有两个成员：</p>
<ul>
<li>一个是<strong>init</strong>()，这个方法是在我们给某个函数decorator时被调用，所以，需要有一个fn的参数，也就是被decorator的函数。</li>
<li>一个是<strong>call</strong>()，这个方法是在我们调用被decorator函数时被调用的。<br>上面输出可以看到整个程序的执行顺序。</li>
</ul>
<h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>decorator可以增强函数的功能，定义起来虽然有点复杂，但使用起来非常灵活和方便。</p>
<p>References:</p>
<ul>
<li><a href="http://coolshell.cn/articles/11265.html" target="_blank" rel="external">Python修饰器的函数式编程</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014318435599930270c0381a3b44db991cd6d858064ac0000" target="_blank" rel="external">廖雪峰的教程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2分钟告诉你什么是python装饰器。&lt;/p&gt;
    
    </summary>
    
      <category term="Python 基础拾遗" scheme="https://maoao530.github.io/categories/Python-%E5%9F%BA%E7%A1%80%E6%8B%BE%E9%81%97/"/>
    
    
      <category term="python" scheme="https://maoao530.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>如何构建一个orm框架？</title>
    <link href="https://maoao530.github.io/2016/04/25/python-orm/"/>
    <id>https://maoao530.github.io/2016/04/25/python-orm/</id>
    <published>2016-04-25T15:54:48.000Z</published>
    <updated>2016-10-22T14:03:42.112Z</updated>
    
    <content type="html"><![CDATA[<p>ORM全称“Object Relational Mapping”，即对象-关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作SQL语句。</p>
<a id="more"></a>
<h1 id="1-开始之前"><a href="#1-开始之前" class="headerlink" title="1. 开始之前"></a>1. 开始之前</h1><p>开始之前，请先掌握python metaclass的知识，请参考我的文章：<a href="https://maoao530.github.io/2016/04/12/python-metaclass/">从Python Metaclass说起</a>  </p>
<p>为什么要使用metaclass？因为要编写一个ORM框架，所有的类都只能动态定义，只有使用者才能根据表的结构定义出对应的类来。</p>
<p>掌握了元类的知识后，我们来尝试编写一个ORM框架。首先，假设我们有一个User表，那么我们可能会写出如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Model)</span>:</span></div><div class="line">    <span class="comment"># 定义类的属性到列的映射：</span></div><div class="line">    id = IntegerField(<span class="string">'id'</span>)</div><div class="line">    name = StringField(<span class="string">'username'</span>)</div><div class="line">    email = StringField(<span class="string">'email'</span>)</div><div class="line">    password = StringField(<span class="string">'password'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 创建一个实例：</span></div><div class="line">u = User(id=<span class="number">12345</span>, name=<span class="string">'Michael'</span>, email=<span class="string">'test@orm.org'</span>, password=<span class="string">'my-pwd'</span>)</div><div class="line"><span class="comment"># 保存到数据库：</span></div><div class="line">u.save()</div></pre></td></tr></table></figure></p>
<p>怎么样？我们可以不用直接去操作SQL了，看上去是不是非常简单呢？</p>
<h1 id="2-设计Field类"><a href="#2-设计Field类" class="headerlink" title="2. 设计Field类"></a>2. 设计Field类</h1><p>接下来我们要定义Field类，它负责保存数据库表的<strong>字段名</strong>和<strong>字段类型</strong>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Field</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, column_type)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.column_type = column_type</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;%s:%s&gt;'</span> % (self.__class__.__name__, self.name)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringField</span><span class="params">(Field)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        super(StringField, self).__init__(name, <span class="string">'varchar(100)'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerField</span><span class="params">(Field)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        super(IntegerField, self).__init__(name, <span class="string">'bigint'</span>)</div></pre></td></tr></table></figure>
<h1 id="3-设计Model类"><a href="#3-设计Model类" class="headerlink" title="3. 设计Model类"></a>3. 设计Model类</h1><p>Model类是数据库表类的基类。</p>
<p>在Model类中，就可以定义各种操作数据库的方法，比如save()，delete()，find()，update等等：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建Model类时，指定通过ModelMetaclass来创建</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(dict, metaclass=ModelMetaclass)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kw)</span>:</span></div><div class="line">        print(<span class="string">"Model __init__ : "</span>, kw )</div><div class="line">        super(Model, self).__init__(**kw)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, key)</span>:</span></div><div class="line">        print(<span class="string">"__getattr__: %s &gt; %s"</span> % (key,self[key]))</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self[key]</div><div class="line">        <span class="keyword">except</span> KeyError:</div><div class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">r"'Model' object has no attribute '%s'"</span> % key)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        print(<span class="string">"__setattr__ : "</span>, key)</div><div class="line">        self[key] = value</div><div class="line"></div><div class="line">    <span class="comment">#只是模拟打印出sql语句</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></div><div class="line">        fields = []</div><div class="line">        params = []</div><div class="line">        args = []</div><div class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__mappings__.items():</div><div class="line">            fields.append(v.name)  <span class="comment"># id,username,email,password 字段名</span></div><div class="line">            params.append(<span class="string">'?'</span>)     <span class="comment"># ????</span></div><div class="line">            args.append(getattr(self, k, <span class="keyword">None</span>))</div><div class="line">        sql = <span class="string">'insert into %s (%s) values (%s)'</span> % (self.__table__, <span class="string">','</span>.join(fields), <span class="string">','</span>.join(params))</div><div class="line">        print(<span class="string">'SQL: %s'</span> % sql)</div><div class="line">        print(<span class="string">'ARGS: %s'</span> % str(args))</div></pre></td></tr></table></figure>
<h1 id="4-设计ModelMetaclass元类"><a href="#4-设计ModelMetaclass元类" class="headerlink" title="4. 设计ModelMetaclass元类"></a>4. 设计ModelMetaclass元类</h1><p>最后就是mnetaclass元类的编写了。</p>
<p>使用Model中定义的metaclass的ModelMetaclass来创建User类，也就是说，<strong>metaclass可以隐式地继承到子类</strong>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelMetaclass</span><span class="params">(type)</span>:</span></div><div class="line">    <span class="comment"># 准备创建的类的对象，类名，父类集合，类方法集合</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></div><div class="line">        print(<span class="string">'Found model: %s'</span> % name)</div><div class="line">        <span class="keyword">if</span> name==<span class="string">'Model'</span>:</div><div class="line">            <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</div><div class="line">        </div><div class="line">        mappings = dict()</div><div class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.items():</div><div class="line">            <span class="keyword">if</span> isinstance(v, Field):</div><div class="line">                print(<span class="string">'Found mapping: %s ==&gt; %s'</span> % (k, v))</div><div class="line">                mappings[k] = v</div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mappings.keys():</div><div class="line">            attrs.pop(k)</div><div class="line">        attrs[<span class="string">'__mappings__'</span>] = mappings    <span class="comment"># 保存属性和列的映射关系</span></div><div class="line">        attrs[<span class="string">'__table__'</span>] = name           <span class="comment"># 假设表名和类名一致</span></div><div class="line">        <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</div></pre></td></tr></table></figure>
<p>至此，核心代码基本上写完了，怎么样？看起来也不是很难。我们来梳理一下：</p>
<ol>
<li>定义一个class User(Model)类</li>
<li>Python解释器通过父类Model的metaclass找到ModelMetaclass类，通过它来创建User</li>
<li>ModelMetaclass保存User类的一些信息，比如表名，字段等</li>
<li>当我们调用save()方法时，会去用到第三步骤保存的信息，构造出SQL语句，将数据保存到数据库中</li>
</ol>
<p>我们编写代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">u = User(id=<span class="number">12345</span>, name=<span class="string">'Michael'</span>, email=<span class="string">'test@orm.org'</span>, password=<span class="string">'my-pwd'</span>)</div><div class="line">u.save()</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Found model: User</div><div class="line">Found mapping: email ==&gt; &lt;StringField:email&gt;</div><div class="line">Found mapping: password ==&gt; &lt;StringField:password&gt;</div><div class="line">Found mapping: id ==&gt; &lt;IntegerField:uid&gt;</div><div class="line">Found mapping: name ==&gt; &lt;StringField:username&gt;</div><div class="line">SQL: insert into User (password,email,username,id) values (?,?,?,?)</div><div class="line">ARGS: ['my-pwd', 'test@orm.org', 'Michael', 12345]</div></pre></td></tr></table></figure></p>
<p>可以看到，save()方法打印出了SQL语句和参数列表，我们可以根据自己的需求，来将此信息存储到数据库中。</p>
<p>References:</p>
<ul>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319106919344c4ef8b1e04c48778bb45796e0335839000" target="_blank" rel="external">廖雪峰的教程</a> </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ORM全称“Object Relational Mapping”，即对象-关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作SQL语句。&lt;/p&gt;
    
    </summary>
    
      <category term="Python 基础拾遗" scheme="https://maoao530.github.io/categories/Python-%E5%9F%BA%E7%A1%80%E6%8B%BE%E9%81%97/"/>
    
    
      <category term="Python" scheme="https://maoao530.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>从Python Metaclass说起...</title>
    <link href="https://maoao530.github.io/2016/04/12/python-metaclass/"/>
    <id>https://maoao530.github.io/2016/04/12/python-metaclass/</id>
    <published>2016-04-12T15:50:27.000Z</published>
    <updated>2016-10-22T14:02:22.388Z</updated>
    
    <content type="html"><![CDATA[<p>在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（’Class’）的概念。<br>类也是对象，可以把类看成是元类（’Metaclass’）创建出来的对象。</p>
<a id="more"></a>
<h1 id="1-理解python中的class"><a href="#1-理解python中的class" class="headerlink" title="1. 理解python中的class"></a>1. 理解python中的class</h1><p>在理解元类之前，你需要先掌握Python中的类。类同样也是一种<code>对象</code>。是的，没错，就是对象。只要你使用关键字class，Python解释器在执行的时候就会创建一个对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">s = S()</div><div class="line"><span class="keyword">print</span> (s) <span class="comment"># &lt;__main__.S object at 0x00F3B390&gt;</span></div><div class="line"><span class="keyword">print</span> (S) <span class="comment"># &lt;class '__main__.S'&gt;</span></div></pre></td></tr></table></figure>
<p>通过以上片段我们可以知道，’s’是一个对象实例，而’S’是一个类。而通过type()我们可以查看它的类型：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> (type(s)) <span class="comment"># &lt;class '__main__.S'&gt;</span></div><div class="line"><span class="keyword">print</span> (type(S)) <span class="comment"># &lt;class 'type'&gt;</span></div></pre></td></tr></table></figure>
<p>可以看到s的类型是<code>Class S</code>，而S的类型是<code>type</code>，那么type是什么呢？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(type(S)       <span class="comment"># &lt;class 'type'&gt;</span></div><div class="line">print(type(type))   <span class="comment"># &lt;class 'type'&gt;</span></div></pre></td></tr></table></figure>
<p>为什么class的类型是type？？</p>
<h1 id="2-理解type"><a href="#2-理解type" class="headerlink" title="2. 理解type"></a>2. 理解type</h1><p>动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。<br>事实上，我们说class也是对象，而这个对象是运行时动态创建的，创建class的方法就是使用type()函数。</p>
<p>我们可以打印出<strong><code>help(type)</code></strong> :<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Help on class type in module builtins:</div><div class="line"></div><div class="line">class type(object)</div><div class="line"> |  type(object_or_name, bases, dict)</div><div class="line"> |  type(object) -&gt; the object's type</div><div class="line"> |  type(name, bases, dict) -&gt; a new type</div><div class="line"> |</div><div class="line"> |  Methods defined here:</div><div class="line"> |</div><div class="line"> |  __call__(self, /, *args, **kwargs)</div><div class="line"> |      Call self as a function.</div><div class="line"> |</div><div class="line"> |  __delattr__(self, name, /)</div><div class="line"> |      Implement delattr(self, name).</div><div class="line"> |</div></pre></td></tr></table></figure></p>
<p>我们主要看<code>type(name, bases, dict)</code>这个方法，事实上当我们定义class的时候，就是调用此方法来创建class对象的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(self)</span>:</span></div><div class="line">    print(<span class="string">"say hello"</span>)</div><div class="line"></div><div class="line">name = <span class="string">'Student'</span>                    <span class="comment"># 类名</span></div><div class="line">bases = (object,)                   <span class="comment"># 父类集合</span></div><div class="line">attrs = &#123;<span class="string">'say_hello'</span> : say_hello&#125;   <span class="comment"># 类属性和方法</span></div><div class="line"></div><div class="line">Student = type(name, bases, attrs)</div><div class="line">s = Student()</div><div class="line">s.say_hello()</div></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"say hello"</span>)</div><div class="line">s = Student()</div><div class="line">s.say_hello()</div></pre></td></tr></table></figure>
<h1 id="3-理解metaclass"><a href="#3-理解metaclass" class="headerlink" title="3. 理解metaclass"></a>3. 理解metaclass</h1><p>metaclass，直译为元类，metaclass允许你动态的控制类的创建行为。换句话说，你可以把类看成是metaclass创建出来的“实例”。  </p>
<p>因此我们可以<strong><code>先定义metaclass</code>，然后用<code>metaclass创建类</code>，最后用<code>类创建实例</code></strong>。  </p>
<p>我们先看一个简单的例子，这个metaclass可以给我们自定义的MyList增加一个add方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1. metaclass是类的模板，所以必须从`type`类型派生：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListMetaclass</span><span class="params">(type)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></div><div class="line">        attrs[<span class="string">'add'</span>] = <span class="keyword">lambda</span> self, value: self.append(value)</div><div class="line">        <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</div><div class="line"></div><div class="line"><span class="comment"># 2. 定义了metaclass，接下来我们要定义类，并指定用metaclass来创建：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">(list, metaclass=ListMetaclass)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>当我们传入关键字参数metaclass时，它指示Python解释器在创建MyList时，要通过<code>ListMetaclass.__new__()</code>来创建，因此我们在<code>__new__()</code>函数里面修改类的定义，比如，加上新的方法，然后，返回修改后的定义。<br><code>__new__()</code>方法接收到的参数依次是：</p>
<ul>
<li>当前准备创建的类的对象</li>
<li>类的名字           </li>
<li>类继承的父类集合       </li>
<li>类的方法集合<br>即：<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cls ==&gt; `&lt;class '__main__.ListMetaclass'&gt;`</div><div class="line">name ==&gt; `MyList`</div><div class="line">bases ==&gt; (&lt;class 'list'&gt;,) </div><div class="line">attrs ==&gt; &#123;'__qualname__': 'MyList', '__module__': '__main__'&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>当返回后，我们可以测试一下MyList类是否有add()方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">L = MyList()</div><div class="line">L.add(<span class="number">1</span>)</div><div class="line">print(L)  </div><div class="line"></div><div class="line"><span class="comment">###### 输出 ######</span></div><div class="line">[<span class="number">1</span>]</div></pre></td></tr></table></figure></p>
<p>动态修改类行为有什么意义？直接在MyList定义中写上add()方法不是更简单吗？ 正常情况下，确实应该直接写，通过metaclass修改纯属变态。  </p>
<p>但是，总会遇到需要通过metaclass修改类定义的。ORM就是一个典型的例子。ORM全称“Object Relational Mapping”，即对象-关系映射。</p>
<p>如果做过java web的同学应当知道，<strong><code>Hibernate</code></strong>就是一个对象关系映射的框架。就是把关系数据库的一行映射为一个对象，也就是<strong>一个类对应一个表</strong>，这样，写代码更简单，不用直接操作SQL语句。</p>
<p>下一节，我们会学习如何用python来构建一个ORM框架。  </p>
<p>References:</p>
<ul>
<li><a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python?answertab=active#tab-top" target="_blank" rel="external">StackOverflow</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319106919344c4ef8b1e04c48778bb45796e0335839000" target="_blank" rel="external">廖雪峰的教程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（’Class’）的概念。&lt;br&gt;类也是对象，可以把类看成是元类（’Metaclass’）创建出来的对象。&lt;/p&gt;
    
    </summary>
    
      <category term="Python 基础拾遗" scheme="https://maoao530.github.io/categories/Python-%E5%9F%BA%E7%A1%80%E6%8B%BE%E9%81%97/"/>
    
    
      <category term="Python" scheme="https://maoao530.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>io-multiplexing-epoll</title>
    <link href="https://maoao530.github.io/2016/03/23/io-multiplexing-epoll/"/>
    <id>https://maoao530.github.io/2016/03/23/io-multiplexing-epoll/</id>
    <published>2016-03-22T16:31:00.000Z</published>
    <updated>2016-10-22T13:51:40.951Z</updated>
    
    <content type="html"><![CDATA[<p>什么是epoll？epoll是在2.6内核中提出的，是之前的select和poll的增强版本。它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。</p>
<a id="more"></a>
<h1 id="1-epoll的优点？"><a href="#1-epoll的优点？" class="headerlink" title="1. epoll的优点？"></a>1. epoll的优点？</h1><p>相对于select和poll来说，epoll有如下优点：</p>
<ul>
<li><p><strong>支持一个进程打开大数目的socket描述符</strong><br>  select 最不能忍受的是一个进程所打开的FD是有一定限制的，由FD_SETSIZE设置，默认值是1024。对于那些需要支持的上万连接数目的IM服务器来说显然太少了。这时候你一是可以选择修改这个宏然后重新编译服务器代码，不过资料也同时指出这样会带来网络效率的下降。</p>
</li>
<li><p><strong>IO效率不随FD数目增加而线性下降</strong><br>  传统的select/poll另一个致命弱点就是当你拥有一个很大的socket集合，不过由于网络延时，任一时间只有部分的socket是“活跃”的，但是select/poll每次调用都会线性扫描全部的集合，导致效率呈现线性下降。但是epoll不存在这个问题，它只会对“活跃”的socket进行操作—这是因为在内核实现中epoll是根据每个fd上面的callback函数实现的。那么，只有“活跃”的socket才会主动的去调用 callback函数，其他idle状态socket则不会</p>
</li>
<li><p><strong>使用mmap加速内核与用户空间的消息传递</strong><br>  无论是select,poll还是epoll都需要内核把FD消息通知给用户空间，如何避免不必要的内存拷贝就很重要，在这点上，epoll是通过内核与用户空间mmap同一块内存实现的。</p>
</li>
</ul>
<h1 id="2-epoll使用说明"><a href="#2-epoll使用说明" class="headerlink" title="2. epoll使用说明"></a>2. epoll使用说明</h1><p>先来看epoll的几个函数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span>  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, <span class="keyword">struct</span> epoll_event *event)</span></span>;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">struct</span> epoll_event * events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong><code>int epoll_create(int size);</code></strong><br>创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大。这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值。需要注意的是，当创建好epoll句柄后，它就是会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。</li>
</ul>
<ul>
<li><strong><code>int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);</code></strong></li>
</ul>
<p>epoll的事件注册函数，它不同与select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。</p>
<ul>
<li>第一个参数是epoll_create()的返回值</li>
<li>第二个参数表示动作,用三个宏来表示:<ul>
<li>EPOLL_CTL_ADD：注册新的fd到epfd中；</li>
<li>EPOLL_CTL_MOD：修改已经注册的fd的监听事件；</li>
<li>EPOLL_CTL_DEL：从epfd中删除一个fd；</li>
</ul>
</li>
</ul>
<p>第三个参数是需要监听的fd，第四个参数是告诉内核需要监听什么事。struct epoll_event结构如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> epoll_data &#123;  </div><div class="line">    <span class="keyword">void</span> *ptr;  </div><div class="line">    <span class="keyword">int</span> fd;  </div><div class="line">    <span class="keyword">__uint32_t</span> u32;  </div><div class="line">    <span class="keyword">__uint64_t</span> u64;  </div><div class="line">&#125; <span class="keyword">epoll_data_t</span>;  </div><div class="line">  </div><div class="line"><span class="keyword">struct</span> epoll_event &#123;  </div><div class="line">  <span class="keyword">__uint32_t</span> events;  <span class="comment">/* Epoll events */</span>  </div><div class="line">  <span class="keyword">epoll_data_t</span> data;  <span class="comment">/* User data variable */</span>  </div><div class="line">&#125;;  </div><div class="line">  </div><div class="line"><span class="comment">//events可以是以下几个宏的集合：  </span></div><div class="line">EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；  </div><div class="line">EPOLLOUT：表示对应的文件描述符可以写；  </div><div class="line">EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；  </div><div class="line">EPOLLERR：表示对应的文件描述符发生错误；  </div><div class="line">EPOLLHUP：表示对应的文件描述符被挂断；  </div><div class="line">EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。  </div><div class="line">EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里</div></pre></td></tr></table></figure>
<ul>
<li><strong><code>int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</code></strong><br>　　<br>等待事件的产生，类似于select()调用。参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。</li>
</ul>
<h1 id="3-epoll的两种模式LT和ET"><a href="#3-epoll的两种模式LT和ET" class="headerlink" title="3. epoll的两种模式LT和ET"></a>3. epoll的两种模式LT和ET</h1><p>二者的差异在于level-trigger模式下只要某个socket处于readable/writable状态，无论什么时候进行epoll_wait都会返回该socket；而edge-trigger模式下只有某个socket从unreadable变为readable或从unwritable变为writable时，epoll_wait才会返回该socket。<br>LT支持阻塞和非阻塞，ET只支持非阻塞，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p>
<p><strong>返回EAGAIN或者EWOULDBLOCK错误，这个错误表示资源暂时不够，能read时，读缓冲区没有数据，或者write时，写缓冲区满了。</strong></p>
<p><strong>如果是阻塞socket，则会一直阻塞，直到能read或者能write。（当然如果你通过setsockopt设置了读写超时，超时时间到了还是会返回-1和EAGAIN，如果没有设置还是返回-1，则表示网络出错了）</strong></p>
<p><strong>如果是非阻塞socket，则会直接返回-1， 同时errno设置为EAGAIN</strong></p>
<p>所以，在epoll的ET模式下，正确的读写方式为:</p>
<blockquote>
<ul>
<li>读：只要可读，就一直读，直到返回0，或者 errno = EAGAIN</li>
<li>写:只要可写，就一直写，直到数据发送完，或者 errno = EAGAIN</li>
</ul>
</blockquote>
<h1 id="4-epoll-ET模式的简单HTTP服务器代码"><a href="#4-epoll-ET模式的简单HTTP服务器代码" class="headerlink" title="4. epoll,ET模式的简单HTTP服务器代码"></a>4. epoll,ET模式的简单HTTP服务器代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/tcp.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sendfile.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strings.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span> </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_EVENTS 10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 8080</span></div><div class="line"></div><div class="line"><span class="comment">//设置socket连接为非阻塞模式</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setnonblocking</span><span class="params">(<span class="keyword">int</span> sockfd)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> opts;</div><div class="line"></div><div class="line">    opts = fcntl(sockfd, F_GETFL);</div><div class="line">    <span class="keyword">if</span>(opts &lt; <span class="number">0</span>) &#123;</div><div class="line">        perror(<span class="string">"fcntl(F_GETFL)\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    opts = (opts | O_NONBLOCK);</div><div class="line">    <span class="keyword">if</span>(fcntl(sockfd, F_SETFL, opts) &lt; <span class="number">0</span>) &#123;</div><div class="line">        perror(<span class="string">"fcntl(F_SETFL)\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">struct</span> epoll_event ev, events[MAX_EVENTS];</div><div class="line">    <span class="keyword">int</span> addrlen, listenfd, conn_sock, nfds, epfd, fd, i, nread, n;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in local, remote;</div><div class="line">    <span class="keyword">char</span> buf[BUFSIZ];</div><div class="line"></div><div class="line">    <span class="comment">//创建listen socket</span></div><div class="line">    <span class="keyword">if</span>( (listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</div><div class="line">        perror(<span class="string">"sockfd\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    setnonblocking(listenfd);</div><div class="line">    bzero(&amp;local, <span class="keyword">sizeof</span>(local));</div><div class="line">    local.sin_family = AF_INET;</div><div class="line">    local.sin_addr.s_addr = htonl(INADDR_ANY);;</div><div class="line">    local.sin_port = htons(PORT);</div><div class="line">    <span class="keyword">if</span>( bind(listenfd, (<span class="keyword">struct</span> sockaddr *) &amp;local, <span class="keyword">sizeof</span>(local)) &lt; <span class="number">0</span>) &#123;</div><div class="line">        perror(<span class="string">"bind\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    listen(listenfd, <span class="number">20</span>);</div><div class="line"></div><div class="line">    epfd = epoll_create(MAX_EVENTS);</div><div class="line">    <span class="keyword">if</span> (epfd == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"epoll_create"</span>);</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ev.events = EPOLLIN;</div><div class="line">    ev.data.fd = listenfd;</div><div class="line">    <span class="keyword">if</span> (epoll_ctl(epfd, EPOLL_CTL_ADD, listenfd, &amp;ev) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"epoll_ctl: listen_sock"</span>);</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        nfds = epoll_wait(epfd, events, MAX_EVENTS, <span class="number">-1</span>);</div><div class="line">        <span class="keyword">if</span> (nfds == <span class="number">-1</span>) &#123;</div><div class="line">            perror(<span class="string">"epoll_pwait"</span>);</div><div class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nfds; ++i) &#123;</div><div class="line">            fd = events[i].data.fd;</div><div class="line">            <span class="keyword">if</span> (fd == listenfd) &#123;</div><div class="line">                <span class="keyword">while</span> ((conn_sock = accept(listenfd,(<span class="keyword">struct</span> sockaddr *) &amp;remote, </div><div class="line">                                (<span class="keyword">size_t</span> *)&amp;addrlen)) &gt; <span class="number">0</span>) &#123;</div><div class="line">                    setnonblocking(conn_sock);</div><div class="line">                    ev.events = EPOLLIN | EPOLLET;</div><div class="line">                    ev.data.fd = conn_sock;</div><div class="line">                    <span class="keyword">if</span> (epoll_ctl(epfd, EPOLL_CTL_ADD, conn_sock,</div><div class="line">                                &amp;ev) == <span class="number">-1</span>) &#123;</div><div class="line">                        perror(<span class="string">"epoll_ctl: add"</span>);</div><div class="line">                        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (conn_sock == <span class="number">-1</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (errno != EAGAIN &amp;&amp; errno != ECONNABORTED </div><div class="line">                            &amp;&amp; errno != EPROTO &amp;&amp; errno != EINTR) </div><div class="line">                        perror(<span class="string">"accept"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">if</span> (events[i].events &amp; EPOLLIN) &#123;</div><div class="line">                n = <span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span> ((nread = read(fd, buf + n, BUFSIZ<span class="number">-1</span>)) &gt; <span class="number">0</span>) &#123;</div><div class="line">                    n += nread;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (nread == <span class="number">-1</span> &amp;&amp; errno != EAGAIN) &#123;</div><div class="line">                    perror(<span class="string">"read error"</span>);</div><div class="line">                &#125;</div><div class="line">                ev.data.fd = fd;</div><div class="line">                ev.events = events[i].events | EPOLLOUT;</div><div class="line">                <span class="keyword">if</span> (epoll_ctl(epfd, EPOLL_CTL_MOD, fd, &amp;ev) == <span class="number">-1</span>) &#123;</div><div class="line">                    perror(<span class="string">"epoll_ctl: mod"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (events[i].events &amp; EPOLLOUT) &#123;</div><div class="line">                <span class="built_in">sprintf</span>(buf, <span class="string">"HTTP/1.1 200 OK\r\nContent-Length: %d\r\n\r\nHello World"</span>, <span class="number">11</span>);</div><div class="line">                <span class="keyword">int</span> nwrite, data_size = <span class="built_in">strlen</span>(buf);</div><div class="line">                n = data_size;</div><div class="line">                <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</div><div class="line">                    nwrite = write(fd, buf + data_size - n, n);</div><div class="line">                    <span class="keyword">if</span> (nwrite &lt; n) &#123;</div><div class="line">                        <span class="keyword">if</span> (nwrite == <span class="number">-1</span> &amp;&amp; errno != EAGAIN) &#123;</div><div class="line">                            perror(<span class="string">"write error"</span>);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    n -= nwrite;</div><div class="line">                &#125;</div><div class="line">                close(fd);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="5-epoll-amp-LT-模式简单的服务器代码"><a href="#5-epoll-amp-LT-模式简单的服务器代码" class="headerlink" title="5. epoll &amp; LT 模式简单的服务器代码"></a>5. epoll &amp; LT 模式简单的服务器代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IPADDRESS   <span class="meta-string">"127.0.0.1"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT        8787</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE     1024</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTENQ     5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FDSIZE      1000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> EPOLLEVENTS 100</span></div><div class="line"></div><div class="line"><span class="comment">//函数声明</span></div><div class="line"><span class="comment">//创建套接字并进行绑定</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">socket_bind</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* ip,<span class="keyword">int</span> port)</span></span>;</div><div class="line"><span class="comment">//IO多路复用epoll</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_epoll</span><span class="params">(<span class="keyword">int</span> listenfd)</span></span>;</div><div class="line"><span class="comment">//事件处理函数</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></div><div class="line"><span class="title">handle_events</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">struct</span> epoll_event *events,<span class="keyword">int</span> num,<span class="keyword">int</span> listenfd,<span class="keyword">char</span> *buf)</span>;</div><div class="line"><span class="comment">//处理接收到的连接</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handle_accpet</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> listenfd)</span></span>;</div><div class="line"><span class="comment">//读处理</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_read</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">char</span> *buf)</span></span>;</div><div class="line"><span class="comment">//写处理</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_write</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">char</span> *buf)</span></span>;</div><div class="line"><span class="comment">//添加事件</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add_event</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">int</span> state)</span></span>;</div><div class="line"><span class="comment">//修改事件</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modify_event</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">int</span> state)</span></span>;</div><div class="line"><span class="comment">//删除事件</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete_event</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">int</span> state)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span>  listenfd;</div><div class="line">    listenfd = socket_bind(IPADDRESS,PORT);</div><div class="line">    listen(listenfd,LISTENQ);</div><div class="line">    do_epoll(listenfd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">socket_bind</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* ip,<span class="keyword">int</span> port)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span>  listenfd;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in servaddr;</div><div class="line">    listenfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (listenfd == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"socket error:"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    bzero(&amp;servaddr,<span class="keyword">sizeof</span>(servaddr));</div><div class="line">    servaddr.sin_family = AF_INET;</div><div class="line">    inet_pton(AF_INET,ip,&amp;servaddr.sin_addr);</div><div class="line">    servaddr.sin_port = htons(port);</div><div class="line">    <span class="keyword">if</span> (bind(listenfd,(<span class="keyword">struct</span> sockaddr*)&amp;servaddr,<span class="keyword">sizeof</span>(servaddr)) == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"bind error: "</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> listenfd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_epoll</span><span class="params">(<span class="keyword">int</span> listenfd)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> epollfd;</div><div class="line">    <span class="keyword">struct</span> epoll_event events[EPOLLEVENTS];</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">char</span> buf[MAXSIZE];</div><div class="line">    <span class="built_in">memset</span>(buf,<span class="number">0</span>,MAXSIZE);</div><div class="line">    <span class="comment">//创建一个描述符</span></div><div class="line">    epollfd = epoll_create(FDSIZE);</div><div class="line">    <span class="comment">//添加监听描述符事件</span></div><div class="line">    add_event(epollfd,listenfd,EPOLLIN);</div><div class="line">    <span class="keyword">for</span> ( ; ; )</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//获取已经准备好的描述符事件</span></div><div class="line">        ret = epoll_wait(epollfd,events,EPOLLEVENTS,<span class="number">-1</span>);</div><div class="line">        handle_events(epollfd,events,ret,listenfd,buf);</div><div class="line">    &#125;</div><div class="line">    close(epollfd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></div><div class="line"><span class="title">handle_events</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">struct</span> epoll_event *events,<span class="keyword">int</span> num,<span class="keyword">int</span> listenfd,<span class="keyword">char</span> *buf)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> fd;</div><div class="line">    <span class="comment">//进行选好遍历</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; num;i++)</div><div class="line">    &#123;</div><div class="line">        fd = events[i].data.fd;</div><div class="line">        <span class="comment">//根据描述符的类型和事件类型进行处理</span></div><div class="line">        <span class="keyword">if</span> ((fd == listenfd) &amp;&amp;(events[i].events &amp; EPOLLIN))</div><div class="line">            handle_accpet(epollfd,listenfd);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (events[i].events &amp; EPOLLIN)</div><div class="line">            do_read(epollfd,fd,buf);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (events[i].events &amp; EPOLLOUT)</div><div class="line">            do_write(epollfd,fd,buf);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handle_accpet</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> listenfd)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> clifd;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in cliaddr;</div><div class="line">    <span class="keyword">socklen_t</span>  cliaddrlen;</div><div class="line">    clifd = accept(listenfd,(<span class="keyword">struct</span> sockaddr*)&amp;cliaddr,&amp;cliaddrlen);</div><div class="line">    <span class="keyword">if</span> (clifd == <span class="number">-1</span>)</div><div class="line">        perror(<span class="string">"accpet error:"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"accept a new client: %s:%d\n"</span>,inet_ntoa(cliaddr.sin_addr),cliaddr.sin_port);</div><div class="line">        <span class="comment">//添加一个客户描述符和事件</span></div><div class="line">        add_event(epollfd,clifd,EPOLLIN);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_read</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">char</span> *buf)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> nread;</div><div class="line">    nread = read(fd,buf,MAXSIZE);</div><div class="line">    <span class="keyword">if</span> (nread == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"read error:"</span>);</div><div class="line">        close(fd);</div><div class="line">        delete_event(epollfd,fd,EPOLLIN);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (nread == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"client close.\n"</span>);</div><div class="line">        close(fd);</div><div class="line">        delete_event(epollfd,fd,EPOLLIN);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"read message is : %s"</span>,buf);</div><div class="line">        <span class="comment">//修改描述符对应的事件，由读改为写</span></div><div class="line">        modify_event(epollfd,fd,EPOLLOUT);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_write</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">char</span> *buf)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> nwrite;</div><div class="line">    nwrite = write(fd,buf,<span class="built_in">strlen</span>(buf));</div><div class="line">    <span class="keyword">if</span> (nwrite == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"write error:"</span>);</div><div class="line">        close(fd);</div><div class="line">        delete_event(epollfd,fd,EPOLLOUT);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        modify_event(epollfd,fd,EPOLLIN);</div><div class="line">    <span class="built_in">memset</span>(buf,<span class="number">0</span>,MAXSIZE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add_event</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">int</span> state)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> epoll_event ev;</div><div class="line">    ev.events = state;</div><div class="line">    ev.data.fd = fd;</div><div class="line">    epoll_ctl(epollfd,EPOLL_CTL_ADD,fd,&amp;ev);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete_event</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">int</span> state)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> epoll_event ev;</div><div class="line">    ev.events = state;</div><div class="line">    ev.data.fd = fd;</div><div class="line">    epoll_ctl(epollfd,EPOLL_CTL_DEL,fd,&amp;ev);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modify_event</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">int</span> state)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> epoll_event ev;</div><div class="line">    ev.events = state;</div><div class="line">    ev.data.fd = fd;</div><div class="line">    epoll_ctl(epollfd,EPOLL_CTL_MOD,fd,&amp;ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，epoll的内容介绍完了。</p>
<p>References：</p>
<ul>
<li><p><a href="http://www.ccvita.com/515.html" target="_blank" rel="external">Epoll在LT和ET模式下的读写方式</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/Anker/p/3263780.html" target="_blank" rel="external">IO多路复用之epoll总结</a></p>
</li>
<li><p><a href="http://blog.csdn.net/ljx0305/article/details/4065058" target="_blank" rel="external">epoll使用详解</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是epoll？epoll是在2.6内核中提出的，是之前的select和poll的增强版本。它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux开发" scheme="https://maoao530.github.io/categories/Linux%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Linux" scheme="https://maoao530.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>I/O Multiplexing &amp; poll</title>
    <link href="https://maoao530.github.io/2016/03/18/io-multiplexing-poll/"/>
    <id>https://maoao530.github.io/2016/03/18/io-multiplexing-poll/</id>
    <published>2016-03-18T15:46:00.000Z</published>
    <updated>2016-10-22T13:53:03.873Z</updated>
    
    <content type="html"><![CDATA[<p>poll和select实现功能差不多，但poll效率比select效率高。</p>
<a id="more"></a>
<h1 id="1-什么是I-O-Multiplexing"><a href="#1-什么是I-O-Multiplexing" class="headerlink" title="1. 什么是I/O Multiplexing"></a>1. 什么是I/O Multiplexing</h1><p> I / O多路转接(I/O multiplexing),其基本思想是:先构造一张有关描述符的表,然后调用一个函数,它要到这些描述符中的一个已准备好进行 I / O时才返回。<br>在返回时,它告诉进程哪一个描述符已准备好可以进行 I / O。<br>IO multiplexing就是我们说的select，poll，epoll，有些地方也称这种IO方式为event driven IO。其好处就在于单个process就可以同时处理多个网络连接的IO。</p>
<p><img src="/img/archives/io_mul.png" alt="I/O 多路复用"></p>
<p>poll的机制与select类似，与select在本质上没有多大差别，管理多个描述符也是进行轮询，根据描述符的状态进行处理，但是<strong>poll没有最大文件描述符数量的限制</strong>。poll和select同样存在一个缺点就是，包含大量文件描述符的数组被整体复制于用户态和内核的地址空间之间，而不论这些文件描述符是否就绪，它的开销随着文件描述符数量的增加而线性增大。</p>
<h1 id="2-poll函数"><a href="#2-poll函数" class="headerlink" title="2. poll函数"></a>2. poll函数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span>  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span> <span class="params">( <span class="keyword">struct</span> pollfd * fds, <span class="keyword">unsigned</span> <span class="keyword">int</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>timeout == INFTIM 永远等待(INFTIM 通常等于-1)</li>
<li>timeout == 0 不等待</li>
<li>timeout &gt; 0 等待ttimeout毫秒</li>
</ul>
<p>与select不同,poll不是为每个条件构造一个描述符集,而是构造一个pollfd结构数组,每个数组元素指定一个描述符编号以及对其所关心的条件。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> pollfd &#123;  </div><div class="line"><span class="keyword">int</span> fd ;                <span class="comment">/* file descriptor to check, or &lt; 0 to ignore */</span>  </div><div class="line"><span class="keyword">short</span> events ;          <span class="comment">/* events of interest on fd */</span>  </div><div class="line">shortr events ;         <span class="comment">/* events that occurred on fd */</span>  </div><div class="line">&#125; ;</div></pre></td></tr></table></figure>
<p>简单点儿说，fd对应要监视的文件描述符，events对应需要监视的事件，revents对应实际发生的事件。</p>
<p><img src="/img/archives/poll-events-revents.png" alt="poll-events-revents"></p>
<p>返回值和错误代码:</p>
<ul>
<li>成功时，poll()返回结构体中revents域不为0的文件描述符个数</li>
<li>如果在超时前没有任何事件发生，poll()返回0；</li>
<li>失败时，poll()返回-1，并设置errno为下列值之一：<ul>
<li>EBADF　　       一个或多个结构体中指定的文件描述符无效。</li>
<li>EFAULTfds　　 指针指向的地址超出进程的地址空间。</li>
<li>EINTR　　　　  请求的事件之前产生一个信号，调用可以重新发起。</li>
<li>EINVALnfds　　参数超出PLIMIT_NOFILE值。</li>
</ul>
</li>
</ul>
<h1 id="3-利用poll设计的web服务器"><a href="#3-利用poll设计的web服务器" class="headerlink" title="3. 利用poll设计的web服务器"></a>3. 利用poll设计的web服务器</h1><p>设计一个比较简单的web服务器：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MYPORT 8008    <span class="comment">// the port users will be connecting to</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG 10     <span class="comment">// how many pending connections queue will hold</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 200</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> pollfd pollfds[BACKLOG + <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> nfds = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showclient</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"client count: %d\n"</span>, nfds <span class="number">-1</span>);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BACKLOG + <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[%d]:%d  "</span>, i, pollfds[i].fd);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sock_fd, new_fd;  <span class="comment">// listen on sock_fd, new connection on new_fd</span></div><div class="line">    <span class="keyword">struct</span> sockaddr_in server_addr;    <span class="comment">// server address information</span></div><div class="line">    <span class="keyword">struct</span> sockaddr_in client_addr; <span class="comment">// connector's address information</span></div><div class="line">    <span class="keyword">socklen_t</span> sin_size;</div><div class="line">    <span class="keyword">int</span> yes = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> buf[BUF_SIZE];</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"socket"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (setsockopt(sock_fd, SOL_SOCKET, SO_REUSEADDR, &amp;yes, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"setsockopt"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    server_addr.sin_family = AF_INET;         <span class="comment">// host byte order</span></div><div class="line">    server_addr.sin_port = htons(MYPORT);     <span class="comment">// short, network byte order</span></div><div class="line">    server_addr.sin_addr.s_addr = INADDR_ANY; <span class="comment">// automatically fill with my IP</span></div><div class="line">    <span class="built_in">memset</span>(server_addr.sin_zero, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(server_addr.sin_zero));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (bind(sock_fd, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(server_addr)) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"bind"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (listen(sock_fd, BACKLOG) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"listen"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"listen port %d\n"</span>, MYPORT);</div><div class="line"></div><div class="line">    sin_size = <span class="keyword">sizeof</span>(client_addr);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; BACKLOG + <span class="number">1</span>; i++)</div><div class="line">    &#123;</div><div class="line">        pollfds[i].fd = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    pollfds[<span class="number">0</span>].fd = sock_fd;</div><div class="line">    pollfds[<span class="number">0</span>].events = POLLIN;</div><div class="line">    nfds++;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        ret = poll(pollfds, nfds, <span class="number">-1</span>);</div><div class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"poll"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"timeout.\n"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// add a new client</span></div><div class="line">        <span class="keyword">if</span> (pollfds[<span class="number">0</span>].revents &amp; POLLIN)</div><div class="line">        &#123;</div><div class="line">            new_fd = accept(sock_fd, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;sin_size);</div><div class="line">            <span class="keyword">if</span> (new_fd &lt;= <span class="number">0</span>) &#123;</div><div class="line">                perror(<span class="string">"accept"</span>);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; BACKLOG + <span class="number">1</span>; i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (pollfds[i].fd == <span class="number">-1</span>)</div><div class="line">                &#123;</div><div class="line">                    pollfds[i].fd = new_fd;</div><div class="line">                    pollfds[i].events = POLLIN;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"add a new client: pollfds[%d] = %d \n"</span>,i,new_fd);</div><div class="line">                    nfds++;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// check every client</span></div><div class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; nfds; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (pollfds[i].revents &amp; POLLIN)</div><div class="line">            &#123;</div><div class="line">                ret = recv(pollfds[i].fd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</div><div class="line">                <span class="keyword">char</span> str[] = <span class="string">"Good,very nice!\n"</span>;</div><div class="line"></div><div class="line">                send(pollfds[i].fd, str, <span class="keyword">sizeof</span>(str) + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">                <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>) &#123;        <span class="comment">// client close</span></div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"client[%d] close\n"</span>, i);</div><div class="line">                    close(pollfds[i].fd);</div><div class="line">                    pollfds[i].fd = <span class="number">-1</span>;</div><div class="line">                    nfds--;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;        <span class="comment">// receive data</span></div><div class="line">                    <span class="keyword">if</span> (ret &lt; BUF_SIZE)</div><div class="line">                        <span class="built_in">memset</span>(&amp;buf[ret], <span class="string">'\0'</span>, <span class="number">1</span>);</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"client[%d] send:%s\n"</span>, i, buf);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        showclient();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// close other connections</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nfds; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (pollfds[i].fd != <span class="number">0</span>) &#123;</div><div class="line">            close(pollfds[i].fd);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;poll和select实现功能差不多，但poll效率比select效率高。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux开发" scheme="https://maoao530.github.io/categories/Linux%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Linux" scheme="https://maoao530.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>I/O Multiplexing &amp; select</title>
    <link href="https://maoao530.github.io/2016/03/17/io-multiplexing-select/"/>
    <id>https://maoao530.github.io/2016/03/17/io-multiplexing-select/</id>
    <published>2016-03-17T14:46:56.000Z</published>
    <updated>2016-05-16T14:29:41.576Z</updated>
    
    <content type="html"><![CDATA[<p>I / O多路转接(I/O multiplexing),其基本思想是:先构造一张有关描述符的表,然后调用一个函数,它要到这些描述符中的一个已准备好进行 I / O时才返回.<br>在返回时,它告诉进程哪一个描述符已准备好可以进行 I / O。</p>
<a id="more"></a>
<h1 id="1-什么是I-O-Multiplexing？"><a href="#1-什么是I-O-Multiplexing？" class="headerlink" title="1. 什么是I/O Multiplexing？"></a>1. 什么是I/O Multiplexing？</h1><p>I/O multiplexing就是我们说的select，poll，epoll，有些地方也称这种IO方式为event driven IO。其好处就在于单个process就可以同时处理多个网络连接的IO。<br>我们在这里仅仅来讨论select，它的基本原理就是会不断的轮询所负责的所有fdset，当某个fd有数据到达了，就通知用户进程来处理fd的读或者写事件。如果没有fd就绪，select会根据参数选择一直阻塞或者timeout。</p>
<p>I/O 多路复用的特点是通过一种机制一个进程能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的任意一个进入读就绪状态，select()函数就可以返回。</p>
<p><img src="/img/archives/io_mul.png" alt="I/O 多路复用"></p>
<h1 id="2-select函数说明"><a href="#2-select函数说明" class="headerlink" title="2. select函数说明"></a>2. select函数说明</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> maxfd,fd_set *readfds,fd_set *writefds, fd_set *exceptfds,<span class="keyword">struct</span> timeval *timeout)</span></span>;  </div><div class="line"><span class="comment">//maxfd      是需要监视的最大的文件描述符值+1</span></div><div class="line"><span class="comment">//readfds    需要检测的可读文件描述符的集合</span></div><div class="line"><span class="comment">//writefds   可写文件描述符的集合</span></div><div class="line"><span class="comment">//exceptfds 异常文件描述符的集合</span></div></pre></td></tr></table></figure>
<p>下面的宏提供了处理这三种fd_set的方式:</p>
<blockquote>
<p>FD_CLR(inr fd,fd_set<em> set)；用来清除描述词组set中相关fd 的位<br>FD_ISSET(int fd,fd_set </em>set)；用来测试描述词组set中相关fd 的位是否为真<br>FD_SET（int fd,fd_set<em>set）；用来设置描述词组set中相关fd的位<br>FD_ZERO（fd_set </em>set）；用来清除描述词组set的全部位</p>
</blockquote>
<p>另外：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> timeval&#123;</div><div class="line">    <span class="keyword">long</span> tv_sec;  <span class="comment">/* seconds */</span></div><div class="line">    <span class="keyword">long</span> tv_usec; <span class="comment">/* and microseconds */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果参数timeout设为：</p>
<ul>
<li>NULL，则表示select（）没有timeout，select将一直被阻塞，直到某个文件描述符上发生了事件</li>
<li>0：仅检测描述符集合的状态，然后立即返回，并不等待外部事件的发生</li>
<li>特定的时间值：如果在指定的时间段里没有事件发生，select将超时返回</li>
</ul>
<h1 id="3-select函数返回值"><a href="#3-select函数返回值" class="headerlink" title="3. select函数返回值"></a>3. select函数返回值</h1><p>执行成功则返回文件描述词状态已改变的个数，如果返回0代表在描述词状态改变前已超过timeout时间，没有返回；当有错误发生时则返回-1，错误原因存于errno，此时参数readfds，writefds，exceptfds和timeout的值变成不可预测。错误值可能为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// EBADF 文件描述词为无效的或该文件已关闭</div><div class="line">// EINTR 此调用被信号所中断</div><div class="line">// EINVAL 参数n 为负值。</div><div class="line">// ENOMEM 核心内存不足</div></pre></td></tr></table></figure></p>
<h1 id="4-理解Select模型："><a href="#4-理解Select模型：" class="headerlink" title="4.理解Select模型："></a>4.理解Select模型：</h1><p>例如,我们若编写下列代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">fd_set readset, writeset;</div><div class="line">FD_ZERO(&amp;readset) ;</div><div class="line">FD_ZERO(&amp;writeset) ;</div><div class="line">FD_SET(0, &amp;readset);</div><div class="line">FD_SET(3, &amp;readset);</div><div class="line">FD_SET(1, &amp;writeset);</div><div class="line">FD_SET(2, &amp;writeset);</div><div class="line">select (4,  &amp;readset, &amp;writeset, NULL, NULL);</div></pre></td></tr></table></figure></p>
<p>那么对应的fd_set模型为：</p>
<p><img src="/img/archives/select.png" alt="fdset模型"></p>
<h1 id="5-如何利用select设计的web服务器："><a href="#5-如何利用select设计的web服务器：" class="headerlink" title="5. 如何利用select设计的web服务器："></a>5. 如何利用select设计的web服务器：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span>  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MYPORT 88960    <span class="comment">// the port users will be connecting to  </span></span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG 10     <span class="comment">// how many pending connections queue will hold  </span></span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 200  </span></div><div class="line">  </div><div class="line"><span class="keyword">int</span> fd_A[BACKLOG];    <span class="comment">// accepted connection fd  </span></div><div class="line"><span class="keyword">int</span> conn_amount;    <span class="comment">// current connection amount  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showclient</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> i;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"client amount: %d\n"</span>, conn_amount);  </div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BACKLOG; i++) &#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[%d]:%d  "</span>, i, fd_A[i]);  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> sock_fd, new_fd;  <span class="comment">// listen on sock_fd, new connection on new_fd  </span></div><div class="line">    <span class="keyword">struct</span> sockaddr_in server_addr;    <span class="comment">// server address information  </span></div><div class="line">    <span class="keyword">struct</span> sockaddr_in client_addr; <span class="comment">// connector's address information  </span></div><div class="line">    <span class="keyword">socklen_t</span> sin_size;  </div><div class="line">    <span class="keyword">int</span> yes = <span class="number">1</span>;  </div><div class="line">    <span class="keyword">char</span> buf[BUF_SIZE];  </div><div class="line">    <span class="keyword">int</span> ret;  </div><div class="line">    <span class="keyword">int</span> i;  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span> ((sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == <span class="number">-1</span>) &#123;  </div><div class="line">        perror(<span class="string">"socket"</span>);  </div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span> (setsockopt(sock_fd, SOL_SOCKET, SO_REUSEADDR, &amp;yes, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)) == <span class="number">-1</span>) &#123;  </div><div class="line">        perror(<span class="string">"setsockopt"</span>);  </div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    server_addr.sin_family = AF_INET;         <span class="comment">// host byte order  </span></div><div class="line">    server_addr.sin_port = htons(MYPORT);     <span class="comment">// short, network byte order  </span></div><div class="line">    server_addr.sin_addr.s_addr = INADDR_ANY; <span class="comment">// automatically fill with my IP  </span></div><div class="line">    <span class="built_in">memset</span>(server_addr.sin_zero, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(server_addr.sin_zero));  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span> (bind(sock_fd, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(server_addr)) == <span class="number">-1</span>) &#123;  </div><div class="line">        perror(<span class="string">"bind"</span>);  </div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span> (listen(sock_fd, BACKLOG) == <span class="number">-1</span>) &#123;  </div><div class="line">        perror(<span class="string">"listen"</span>);  </div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"listen port %d\n"</span>, MYPORT);  </div><div class="line">  </div><div class="line">    fd_set fdsr;  </div><div class="line">    <span class="keyword">int</span> maxsock;  </div><div class="line">    <span class="keyword">struct</span> timeval tv;  </div><div class="line">  </div><div class="line">    conn_amount = <span class="number">0</span>;  </div><div class="line">    sin_size = <span class="keyword">sizeof</span>(client_addr);  </div><div class="line">    maxsock = sock_fd;  </div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;  </div><div class="line">        <span class="comment">// initialize file descriptor set  </span></div><div class="line">        FD_ZERO(&amp;fdsr);  </div><div class="line">        FD_SET(sock_fd, &amp;fdsr);  </div><div class="line">  </div><div class="line">        <span class="comment">// timeout setting  </span></div><div class="line">        tv.tv_sec = <span class="number">30</span>;  </div><div class="line">        tv.tv_usec = <span class="number">0</span>;  </div><div class="line">  </div><div class="line">        <span class="comment">// add active connection to fd set  </span></div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BACKLOG; i++) &#123;  </div><div class="line">            <span class="keyword">if</span> (fd_A[i] != <span class="number">0</span>) &#123;  </div><div class="line">                FD_SET(fd_A[i], &amp;fdsr);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        ret = select(maxsock + <span class="number">1</span>, &amp;fdsr, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;tv);  </div><div class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;  </div><div class="line">            perror(<span class="string">"select"</span>);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"timeout\n"</span>);  </div><div class="line">            <span class="keyword">continue</span>;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="comment">// check every fd in the set  </span></div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; conn_amount; i++) &#123;  </div><div class="line">            <span class="keyword">if</span> (FD_ISSET(fd_A[i], &amp;fdsr)) &#123;  </div><div class="line">                ret = recv(fd_A[i], buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);  </div><div class="line">                  </div><div class="line">                <span class="keyword">char</span> str[] = <span class="string">"Good,very nice!\n"</span>;  </div><div class="line">                  </div><div class="line">                send(fd_A[i],str,<span class="keyword">sizeof</span>(str) + <span class="number">1</span>, <span class="number">0</span>);  </div><div class="line">                  </div><div class="line">                  </div><div class="line">                <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>) &#123;        <span class="comment">// client close  </span></div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"client[%d] close\n"</span>, i);  </div><div class="line">                    close(fd_A[i]);  </div><div class="line">                    FD_CLR(fd_A[i], &amp;fdsr);  </div><div class="line">                    fd_A[i] = <span class="number">0</span>;  </div><div class="line">                &#125; <span class="keyword">else</span> &#123;        <span class="comment">// receive data  </span></div><div class="line">                    <span class="keyword">if</span> (ret &lt; BUF_SIZE)  </div><div class="line">                        <span class="built_in">memset</span>(&amp;buf[ret], <span class="string">'\0'</span>, <span class="number">1</span>);  </div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"client[%d] send:%s\n"</span>, i, buf);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="comment">// check whether a new connection comes  </span></div><div class="line">        <span class="keyword">if</span> (FD_ISSET(sock_fd, &amp;fdsr)) &#123;  </div><div class="line">            new_fd = accept(sock_fd, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;sin_size);  </div><div class="line">            <span class="keyword">if</span> (new_fd &lt;= <span class="number">0</span>) &#123;  </div><div class="line">                perror(<span class="string">"accept"</span>);  </div><div class="line">                <span class="keyword">continue</span>;  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            <span class="comment">// add to fd queue  </span></div><div class="line">            <span class="keyword">if</span> (conn_amount &lt; BACKLOG) &#123;  </div><div class="line">                fd_A[conn_amount++] = new_fd;  </div><div class="line">                <span class="built_in">printf</span>(<span class="string">"new connection client[%d] %s:%d\n"</span>, conn_amount,  </div><div class="line">                        inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));  </div><div class="line">                <span class="keyword">if</span> (new_fd &gt; maxsock)  </div><div class="line">                    maxsock = new_fd;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span> &#123;  </div><div class="line">                <span class="built_in">printf</span>(<span class="string">"max connections arrive, exit\n"</span>);  </div><div class="line">                send(new_fd, <span class="string">"bye"</span>, <span class="number">4</span>, <span class="number">0</span>);  </div><div class="line">                close(new_fd);  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        showclient();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">// close other connections  </span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BACKLOG; i++) &#123;  </div><div class="line">        <span class="keyword">if</span> (fd_A[i] != <span class="number">0</span>) &#123;  </div><div class="line">            close(fd_A[i]);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I / O多路转接(I/O multiplexing),其基本思想是:先构造一张有关描述符的表,然后调用一个函数,它要到这些描述符中的一个已准备好进行 I / O时才返回.&lt;br&gt;在返回时,它告诉进程哪一个描述符已准备好可以进行 I / O。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux开发" scheme="https://maoao530.github.io/categories/Linux%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Linux" scheme="https://maoao530.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
